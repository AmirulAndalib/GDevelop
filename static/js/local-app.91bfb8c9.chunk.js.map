{"version":3,"sources":["Utils/LocalUserInfo.js","ProjectsStorage/LocalFileStorageProvider/LocalFileResourceMover.js","ResourcesList/LocalResourceExternalEditors.js","Export/LocalExporters/LocalPreviewLauncher/index.js","Utils/TimeFunction.js","Export/LocalExporters/LocalPreviewLauncher/LocalPreviewDebuggerServer.js","Export/LocalExporters/index.js","Export/LocalExporters/LocalCordovaExport.js","Export/LocalExporters/LocalElectronExport.js","Export/LocalExporters/LocalHTML5Export.js","Export/LocalExporters/LocalFacebookInstantGamesExport.js","UI/LocalFilePicker/index.js","Export/LocalExporters/LocalOnlineCordovaExport.js","Export/LocalExporters/LocalOnlineElectronExport.js","Export/LocalExporters/LocalOnlineWebExport.js","MainFrame/ElectronMainMenu.js","JsExtensionsLoader/LocalJsExtensionsLoader.js","JsExtensionsLoader/LocalJsExtensionsFinder.js","EventsFunctionsExtensionsLoader/CodeWriters/LocalEventsFunctionCodeWriter.js","EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionWriter.js","EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionOpener.js","ProjectsStorage/LocalFileStorageProvider/LocalProjectResourcesHandler.js","GameEngineFinder/LocalGDJSDevelopmentWatcher.js","ProjectsStorage/ResourceMover/LocalResourceMover.js","Utils/ProcessByChunk.js","Utils/LocalFileUploader.js","ProjectsStorage/ResourceFetcher/LocalResourceFetcher.js","qr-creator.js","UI/QrCode.js","Export/LocalExporters/LocalPreviewLauncher/LocalNetworkPreviewDialog.js","ResourcesList/LocalEmbeddedResourceSources.js","ResourcesList/LocalResourceSources.js","LocalApp.js","Export/LocalExporters/LocalFileSystem.js","Utils/LocalArchiver.js","Export/LocalExporters/LocalFileUploader.js","Utils/ObjectSplitter.js","ProjectsStorage/LocalFileStorageProvider/LocalProjectOpener.js","ProjectsStorage/LocalFileStorageProvider/LocalProjectWriter.js","UI/CustomSvgIcons/Computer.js","ProjectsStorage/LocalFileStorageProvider/index.js"],"names":["os","optionalRequire","getUID","userInfo","uid","e","electron","ipcRenderer","fs","path","generateUnusedFilepath","basePath","alreadyUsedFilePaths","filename","extension","extname","filenameWithoutExtension","basename","name","newNameGenerator","tentativePath","join","existsSync","has","downloadBlobToLocalFile","blobUrl","filePath","a","Error","axios","get","responseType","response","arrayBuffer","data","invoke","moveUrlResourcesToLocalFiles","project","fileMetadata","onProgress","resourcesManager","getResourcesManager","allResourceNames","getAllResourceNames","toJSArray","resourceToFetchNames","filter","resourceName","resource","getResource","isURL","getFile","projectPath","dirname","fileIdentifier","baseAssetsPath","downloadedFilePaths","Set","erroredResources","fetchedResourcesCount","PromisePool","withConcurrency","for","process","url","isBlobURL","parseLocalFilePathOrExtensionFromMetadata","localFilePath","downloadedFilePath","resolve","sanitizeFilename","getName","ensureDir","setFile","relative","replace","push","error","isProductAuthorizedResourceUrl","extractFilenameWithExtensionFromProductAuthorizedUrl","isPublicAssetResourceUrl","extractFilenameWithExtensionFromPublicAssetResourceUrl","extractFilenameFromProjectResourceUrl","add","retryIfFailed","times","length","openAndWaitForExternalEditorWindow","editorName","externalEditorInput","externalEditorOutput","downloadAndPrepareExternalEditorBase64Resources","resourceNames","getProjectFile","urlsToDownload","filesToRead","forEach","hasResource","console","downloadUrlsToBlobs","urlContainers","count","total","downloadedBlobs","resourcesToDataUrl","Map","Promise","all","map","blob","item","convertBlobToDataURL","dataUrl","set","promises","readFile","content","toString","resourceData","editWithLocalExternalEditor","externalEditorName","defaultName","metadataKey","resourceKind","options","resourceManagementProps","resources","singleFrame","extraOptions","externalEditorData","readMetadata","existingMetadata","fps","isLooping","sendExternalEditorOpened","saveBlobUrlsFromExternalEditorBase64Resources","baseNameForNewResources","modifiedResources","onFetchNewlyAddedResources","freeBlobsAndUpdateMetadata","metadata","patchExternalEditorMetadataWithResourcesNamesIfNecessary","originalIndex","newName","newMetadata","editors","createDisplayName","editDisplayName","kind","edit","gd","global","LocalPreviewLauncher","canDoNetworkPreview","canDoHotReload","state","networkPreviewDialogOpen","networkPreviewHost","networkPreviewPort","networkPreviewError","previewGamePath","previewBrowserWindowOptions","hotReloadsCount","hideMenuBar","alwaysOnTop","_networkPreviewSubscriptionChecker","_hotReloadSubscriptionChecker","_openPreviewBrowserWindow","previewGameIndexHtmlPath","closePreview","windowId","_openPreviewWindow","gamePath","setState","width","getGameResolutionWidth","height","getGameResolutionHeight","useContentSize","title","backgroundColor","webPreferences","webSecurity","nodeIntegration","contextIsolation","getIsMenuBarHiddenInPreview","getIsAlwaysOnTopInPreview","networkPreview","removeAllListeners","on","event","err","serverParams","port","setTimeout","_checkSubscriptionForNetworkPreview","ipAddress","send","root","_prepareExporter","findGDJS","then","gdjsRoot","info","localFileSystem","LocalFileSystem","downloadUrlsToLocalFiles","fileSystem","assignIn","AbstractFileSystemJS","outputDir","getTempDir","exporter","Exporter","launchPreview","previewOptions","layout","externalLayout","getPreviewDebuggerServer","startServer","catch","timeFunction","previewExportOptions","PreviewExportOptions","setIsDevelopmentEnvironment","Window","isDev","setLayoutName","setExternalLayoutName","previewDebuggerServerAddress","getDebuggerServerAddress","useWebsocketDebuggerClientWithServerAddress","address","includeFileHashs","props","getIncludeFileHashs","includeFile","hash","setIncludeFileHash","setElectronRemoteRequirePath","debuggerIds","getExistingDebuggerIds","shouldHotReload","hotReload","setProjectDataOnlyExport","projectDataOnlyExport","setFullLoadingScreen","fullLoadingScreen","fallbackAuthor","setFallbackAuthor","id","username","exportProjectForPixiPreview","delete","debuggerId","sendMessage","command","checkUserHasSubscription","time","localPreviewDebuggerServer","this","ref","subscriptionChecker","onChangeSubscription","mode","open","onClose","onExport","onRunPreviewLocally","React","fn","onResult","t0","performance","now","debuggerServerState","debuggerServerAddress","callbacksList","reject","serverStartPromise","serverStartPromiseCompleted","onErrorReceived","debuggerIdIndex","indexOf","splice","onConnectionClosed","onConnectionOpened","errorMessage","onConnectionErrored","onServerStateChanged","message","parsedMessage","JSON","parse","onHandleParsedMessage","warn","serverStartTimeoutPromise","race","stringify","getServerState","registerCallbacks","callbacks","callbacksIndex","localOnlineWebExporter","onlineWebExporter","exportPipeline","localOnlineWebExportPipeline","localAutomatedExporters","html5Exporter","localHTML5ExportPipeline","onlineCordovaExporter","localOnlineCordovaExportPipeline","onlineElectronExporter","localOnlineElectronExportPipeline","facebookInstantGamesExporter","localFacebookInstantGamesExportPipeline","localManualExporters","cordovaExporter","localCordovaExportPipeline","electronExporter","localElectronExportPipeline","shell","packageNameWarningType","getInitialExportState","getLastCompilationDirectory","canLaunchBuild","exportState","isNavigationDisabled","renderHeader","updateExportState","noMargin","type","value","defaultPath","onChange","setLastCompilationDirectory","fullWidth","renderLaunchButtonLabel","prepareExporter","context","launchExport","exportOptions","ExportOptions","setTarget","exportWholePixiProject","urlFiles","getAllUrlFilesIn","launchResourcesDownload","updateStepProgress","throwIfAnyError","launchCompression","exportOutput","renderDoneFooter","openExportFolder","openPath","renderGameButton","label","primary","onClick","remote","app","archiveOutputFilename","getPath","filters","extensions","temporaryOutputDir","mkDir","clearDir","archiveLocalFolder","outputFilename","dialog","styles","container","position","display","alignItems","button","marginLeft","textField","flex","LocalFilePicker","onChooseFolder","browserWindow","getCurrentWindow","showSaveDialog","style","undefined","margin","translatableHintText","onlineBuildType","limitedBuilds","targets","keystore","signingDialogOpen","errored","exportStep","includes","archiveOutputDir","tmpdir","launchUpload","outputFile","getBuildFileUploadOptions","uploadOptions","uploadLocalFile","key","launchOnlineBuild","authenticatedUser","uploadBucketKey","gameId","getAuthorizationHeader","firebaseUser","buildCordovaAndroid","buildElectron","renderCustomStepsProgress","build","onSaveProject","sizeLimit","buildWeb","useIPCEventListener","ipcEvent","callback","shouldApply","handler","eventArgs","removeListener","useAppEventListener","isMainWindow","windowTitle","lowercaseTitle","toLowerCase","startsWith","ElectronMainMenu","extraCallbacks","i18n","recentProjectFiles","shortcutMap","onClosePreview","language","isFocusedOnMainWindow","setIsFocusedOnMainWindow","focusedWindowId","setFocusedWindowId","closePreviewWindow","useShortcutToClosePreviewWindow","PreferencesContext","values","window","onChooseProject","onOpenRecentFile","onSaveProjectAs","onCloseProject","onCloseApp","onExportProject","onCreateProject","onCreateBlank","onOpenProjectManager","onOpenHomePage","onOpenDebugger","onOpenAbout","onOpenPreferences","onOpenLanguage","onOpenProfile","onOpenGamesDashboard","setElectronUpdateStatus","buildMainMenuDeclarativeTemplate","isApplicationTopLevelMenu","useCommandWithOptions","generateOptions","text","loadExtension","require","findJsExtensionModules","module","exports","objectsEditorService","objectsRenderingService","filterExamples","onFindGDJS","loadAllExtensions","_","extensionModulePaths","extensionModulePath","extensionModule","rethrowException","ex","result","rawError","registerEditorConfigurations","registerInstanceRenderers","JsPlatform","extensionsRoot","readdir","extensionFolders","filteredExtensionFolders","folder","extensionFolder","extensionFolderPath","jsExtensionModulePath","stat","stats","isFile","modulePaths","modulePath","makeLocalEventsFunctionCodeWriter","onWriteFile","mkdir","code","getPathFor","codeNamespace","slugs","getIncludeFileFor","writeFunctionCode","functionCodeNamespace","writeFile","writeBehaviorCode","behaviorCodeNamespace","writeObjectCode","objectCodeNamespace","writeJSONFile","object","filepath","stringifyException","LocalEventsFunctionsExtensionWriter","chooseEventsFunctionExtensionFile","extensionName","writeEventsFunctionsExtension","serializedObject","serializeToJSObject","chooseCustomObjectFile","objectName","writeCustomObject","customObject","exportedObject","clone","setTags","getVariables","clear","getEffects","getAllBehaviorNames","removeBehavior","LocalEventsFunctionsExtensionOpener","showOpenDialog","properties","filePaths","readEventsFunctionExtensionFile","encoding","dataObject","readJSONFile","lazyRequireGlob","optionalLazyRequire","locateResourceFile","resourceFilePath","getLocalResourceFullPath","showItemInFolder","openResourceFile","copyResourceFilePath","clipboard","writeText","scanForNewResources","createResource","glob","allExtensions","toUpperCase","files","allFiles","filesToCheck","VectorString","push_back","filePathsNotInResources","findFilesNotInResources","mapVector","relativeFilePath","setName","applyResourceDefaults","addResource","removeAllResourcesWithInvalidPath","getResourceFilePathStatus","removeResource","LocalGDJSDevelopmentWatcher","shouldWatch","useGDJSDevelopmentWatcher","moveNothing","moveAllLocalResourcesToCloudResources","oldFileMetadata","newFileMetadata","newCloudProjectId","allResourcesToUpload","resourceFile","checkIfIsGDevelopCloudBucketUrl","Boolean","getResourcesToUpload","alreadyDoneCount","processByChunk","transformItem","resourceAbsolutePath","readLocalFileToFile","file","isChunkTooBig","resourceAndFilesChunk","reduce","size","processChunk","resourceAndFilesToUpload","getCredentialsForCloudProject","uploadProjectResourceFiles","uploadedProjectResourceFiles","index","movers","LocalFileStorageProvider","internalName","ProjectResourcesCopier","copyAllResourcesTo","CloudStorageProvider","UrlStorageProvider","moveAllCloudProjectResourcesToCloudProject","LocalResourceMover","moveAllProjectResources","oldStorageProvider","newStorageProvider","mover","array","currentItemIndex","nextChunk","mappedItem","readLocalFileToArrayBuffer","buffer","slice","byteOffset","byteLength","extensionToMimeType","aac","wav","mp3","ogg","png","jpg","jpeg","webp","ttf","otf","mp4","webm","json","xml","gz","js","extensionWithoutLeadingDot","File","fetchers","moveUrlResourcesToCloudFilesIfPrivate","fetchRelativeResourcesToFullUrls","LocalResourceFetcher","fetchAllProjectResources","storageProvider","fetcher","qrCodeGenerator","QrCreator","render","config","$element","self","vendor_qrcode","createQRCode","level","version","quiet","qr","vqr","qrModuleCount","quietModuleCount","isDark","row","col","drawModuleRoundedDark","ctx","l","t","r","b","rad","nw","ne","se","sw","lal","x0","y0","x1","y1","r0","r1","drawModuleRoundendLight","mlla","x","y","drawOnCanvas","canvas","settings","ecLevel","minVersion","maxVersion","Math","d","background","fillStyle","fillRect","left","top","moduleCount","moduleSize","beginPath","right","bottom","rowT","rowB","colL","colR","radius","center","northwest","north","northeast","east","southeast","south","southwest","west","setFill","fill","colorStops","absolutePosition","coordinate","gradient","offset","color","defaults","Object","HTMLCanvasElement","$canvas","document","qrcode","typeNumber","errorCorrectLevel","setupPositionProbePattern","_moduleCount","c","_modules","makeImpl","test","maskPattern","modules","Array","pos","QRUtil","i","j","bits","_errorCorrectLevel","mod","_dataCache","rsBlocks","QRRSBlock","qrBitBuffer","_buffer","_length","_this","B","_this.getBuffer","_this.getAt","put","_this.put","num","f","_this.getLengthInBits","m","_this.putBit","bit","bufIndex","_dataList","MODE_8BIT_BYTE","totalDataCount","PAD0","PAD1","maxEcCount","maxDcCount","dcdata","dcCount","dataCount","ecCount","totalCount","getBuffer","rsPoly","modPoly","qrPolynomial","ecdata","modIndex","totalCodeCount","g","inc","bitIndex","byteIndex","maskFunc","dark","QRErrorCorrectLevel","u","_this.addData","newData","qr8BitByte","_bytes","S","_this.getMode","_this.getLength","write","_this.write","_this.isDark","h","_this.getModuleCount","J","_this.make","minLostPoint","pattern","lostPoint","shift","_num","multiply","_this.multiply","QRMath","_this.mod","ratio","qrcode.stringToBytes","s","utf8","charcode","charCodeAt","L","M","Q","H","getBCHDigit","digit","PATTERN_POSITION_TABLE","w","_this.getBCHTypeInfo","G15","G15_MASK","A","_this.getBCHTypeNumber","G18","G","_this.getPatternPosition","F","_this.getMaskFunction","PATTERN000","PATTERN001","PATTERN010","PATTERN011","PATTERN100","PATTERN101","PATTERN110","PATTERN111","C","_this.getErrorCorrectPolynomial","errorCorrectLength","D","_this.getLostPoint","sameCount","darkCount","EXP_TABLE","LOG_TABLE","_this.glog","n","_this.gexp","getRsBlockTable","RS_BLOCK_TABLE","I","_this.getRSBlocks","rsBlock","list","QrCode","gdevelopTheme","GDevelopThemeContext","containerRef","containerElement","current","palette","secondary","firstChild","removeChild","LocalNetworkPreviewDialog","urlWithProtocol","Dialog","actions","FlatButton","secondaryActions","onRequestClose","maxWidth","Text","PlaceholderLoader","ShareLink","justifyContent","copyAllEmbeddedResourcesToProjectFolder","filesWithEmbeddedResources","copies","hasAnyEmbeddedResourceOutsideProjectFolder","embeddedResources","embedded","isOutsideProjectFolder","resourceBasename","fullPath","fileExtension","fileNameWithoutExtension","newFileNameWithoutExtension","tentativeFileName","resourceNewPath","copyFile","createAndMapEmbeddedResources","filesWithMappedResources","mapping","relPath","theEmbeddedResource","createNewResource","listTileMapEmbeddedResources","tileMap","__header__","dir","defs","tilesets","tileset","isPathInProjectFolder","levels","bgRelPath","embeddedResourcesParsers","tilemap","ResourceStoreChooser","onChooseResources","ResourceStore","onChoose","chosenResourceUrl","newResource","setOrigin","localResourceSources","allResourceKindsAndMetadata","fileExtensions","displayName","selectLocalFileResources","getLastUsedPath","setLastUsedPath","multiSelection","latestPath","lastUsedPath","hasFilesOutsideProjectFolder","some","parseEmbeddedResources","newToOldFilePaths","showConfirmDialog","copyAllToProjectFolder","filePathWithMapping","mappedResources","setMetadata","embeddedResourcesMapping","displayTab","onlyForStorageProvider","selectResourcesHeadless","renderComponent","RaisedButton","getStorageProvider","FileToCloudProjectResourceUploader","automaticallyOpenInput","automaticallyOpenIfPossible","create","authentication","setUpContextMenu","appArguments","getArguments","disableCheckForUpdates","makeEventsFunctionCodeWriter","eventsFunctionsExtensionWriter","eventsFunctionsExtensionOpener","storageProviders","defaultStorageProvider","getStorageProviderOperations","getStorageProviderResourceOperations","initialFileMetadataToOpen","renderMainMenu","renderPreviewLauncher","renderExportDialog","automatedExporters","manualExporters","renderGDJSDevelopmentWatcher","resourceMover","resourceFetcher","resourceSources","resourceExternalEditors","localResourceExternalEditors","extensionsLoader","makeExtensionsLoader","ObjectsEditorService","ObjectsRenderingService","pathPosix","posix","_filesToDownload","pathPrefix","normalizedPathPrefix","normalize","keys","mkdirsSync","dirExists","emptyDirSync","fileNameFrom","_downloadUrlsToLocalFiles","dirNameFrom","makeAbsolute","baseDirectory","isAbsolute","makeRelative","charAt","source","dest","copySync","writeToFile","contents","outputFileSync","readFileSync","readDir","ext","output","readdirSync","fileExists","normalizedFilePath","statSync","lazyRequireArchiver","archiver","createWriteStream","archive","zlib","fileSize","pointer","log","roundFileSizeInMb","round","pipe","directory","finalize","stepCurrentProgress","stepMaxProgress","unsplit","isReferenceMagicPropertyName","getReferencePartialObject","maxUnsplitDepth","unsplitObject","currentObject","depth","indexOrPropertyName","reference","isReference","referenceTo","partialObject","getSlugifiedUniqueNameFromProperty","propertyName","existingNamesForReference","currentReference","property","onOpenWithPicker","onOpen","referencePath","hasAutoSave","compareLastModified","autoSavePath","autoSavedTime","mtime","getTime","saveTime","onGetAutoSave","checkFileContent","expectedContent","verificationTime","toFixed","writeAndCheckFile","writeAndCheckFormattedJSONFile","writeProjectFiles","paths","serializedProjectObject","isFolderProject","partialObjects","pathSeparator","getArrayItemReferenceName","shouldSplit","createReference","splitObject","currentPath","isArray","itemPath","itemReference","propertyPath","propertyReference","split","Date","getProjectUuid","lastModifiedDate","wasSaved","onChooseSaveProjectAsLocation","saveDialogOptions","showSaveDialogSync","saveAsLocation","onStartSaving","onMoveResources","setProjectFile","onAutoSaveProject","serializeToJSON","getWriteErrorMessage","forbiddenCharacterRegex","consecutiveSpacesRegex","memo","SvgIcon","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","renderIcon","Computer","fontSize","getFileMetadataFromAppArguments","POSITIONAL_ARGUMENTS_KEY","onRenderNewProjectSaveAsLocationChooser","projectName","setSaveAsLocation","newProjectsDefaultFolder","outputPath","projectFileName","substring","trim","cleanUpProjectFileName","LocalFolderPicker","newOutputPath","createOperations","getOpenErrorMessage","createResourceOperations","updateInterface","cleanUserSelectionOfResources","informUser","click","submenu"],"mappings":"qHACA,8CACMA,EADN,MACWC,GAAgB,MAEdC,EAAS,WACpB,IACE,OAAOF,EAAGG,WAAWC,IACrB,MAAOC,GACP,MAAO,M,mNCcLC,EAAWL,IAAgB,YAC3BM,EAAcD,EAAWA,EAASC,YAAc,KAChDC,EAAKP,IAAgB,YACrBQ,EAAOR,IAAgB,QAQvBS,EAAyB,SAC7BC,EACAC,EACAC,GAEA,IAAMC,EAAYL,EAAKM,QAAQF,GACzBG,EAA2BP,EAAKQ,SAASJ,EAAUC,GACnDI,EAAOC,YAAiBH,GAA0B,SAAAE,GACtD,IAAME,EAAgBX,EAAKY,KAAKV,EAAUO,GAAQJ,EAClD,OACEN,EAAGc,WAAWF,IAAkBR,EAAqBW,IAAIH,MAG7D,OAAOX,EAAKY,KAAKV,EAAUO,GAAQJ,GAG/BU,EAAuB,uCAAG,WAC9BC,EACAC,GAF8B,iBAAAC,EAAA,yDAIzBpB,EAJyB,sBAIN,IAAIqB,MAAM,iBAJJ,uBAMPC,IAAMC,IAAIL,EAAS,CACxCM,aAAc,gBAPc,cAMxBC,EANwB,OASxBC,EAAcD,EAASE,KATC,SAWxB3B,EAAY4B,OAChB,mCACAF,EACAP,GAd4B,2CAAH,wDAkBhBU,EAA4B,uCAAG,iDAAAT,EAAA,yDAC1CU,EAD0C,EAC1CA,QACAC,EAF0C,EAE1CA,aACAC,EAH0C,EAG1CA,WAEK/B,GAAOD,EAL8B,sBAKX,IAAIqB,MAAM,eALC,cAQpCY,EAAmBH,EAAQI,sBAC3BC,EAAmBF,EAAiBG,sBAAsBC,YAC1DC,EAAuBH,EAAiBI,QAAO,SAAAC,GACnD,IAAMC,EAAWR,EAAiBS,YAAYF,GAE9C,OAAOG,YAAMF,EAASG,cAGlBC,EAAc3C,EAAK4C,QAAQf,EAAagB,gBACxCC,EAAiB9C,EAAKY,KAAK+B,EAAa,UACxCI,EAAsB,IAAIC,IAC1BC,EAAmB,GAErBC,EAAwB,EArBc,UAuBpCC,IAAYC,gBAAgB,IAC/BC,IAAIjB,GACJkB,QAFG,uCAEK,WAAMhB,GAAN,6BAAApB,EAAA,yDACDqB,EAAWR,EAAiBS,YAAYF,GAExCiB,EAAMhB,EAASG,WACjBc,YAAUD,GAJP,mCASCE,YAA0ClB,GAF5CmB,EAPC,EAODA,cACArD,EARC,EAQDA,UAEIsD,EAAqBD,EACvB1D,EAAK4D,QAAQjB,EAAae,GAC1BzD,EACE6C,EACAC,EACAc,YAAiBtB,EAASuB,WAAazD,GAAa,MAfvD,SAkBGN,EAAGgE,UAAUjB,GAlBhB,wBAmBG/B,EAAwBwC,EAAKI,GAnBhC,QAoBHpB,EAASyB,QACPhE,EAAKiE,SAAStB,EAAagB,GAAoBO,QAAQ,MAAO,MArB7D,kDAwBHjB,EAAiBkB,KAAK,CAAE7B,eAAc8B,MAAK,OAxBxC,uCA8BHhE,EAFEiE,YAA+Bd,GAEtBe,YAAqDf,GACvDgB,YAAyBhB,GAEvBiB,YACTjB,GAISkB,YAAsClB,GAI7CI,EAAqB1D,EACzB6C,EACAC,EACA3C,GAEF2C,EAAoB2B,IAAIf,GA/CnB,oBAkDGgB,YAAc,CAAEC,MAAO,GAAV,sBAAe,sBAAA1D,EAAA,sEAC1BnB,EAAGgE,UAAUjB,GADa,uBAE1BhD,EAAY4B,OAChB,sBACA6B,EACAI,GAL8B,OAOhCpB,EAASyB,QACPhE,EAAKiE,SAAStB,EAAagB,GAAoBO,QAAQ,MAAO,MARhC,4CAlD/B,2DA8DHjB,EAAiBkB,KAAK,CAAE7B,eAAc8B,MAAK,OA9DxC,QAkEPtC,EAAWoB,IAAyBd,EAAqByC,QAlElD,kEAFL,uDAvBoC,iCA8FnC,CACL5B,qBA/FwC,4CAAH,uD,yHC5CnCjD,EAAOR,IAAgB,QACvBO,EAAKP,IAAgB,MACrBK,EAAWL,IAAgB,YAC3BM,EAAcD,EAAWA,EAASC,YAAc,KAMhDgF,EAAkC,uCAAG,WACzCC,EACAC,GAFyC,eAAA9D,EAAA,yDAIpCpB,EAJoC,sBAIjB,IAAIqB,MAAM,kBAJO,uBAMNrB,EAAY4B,OAAZ,UAC9BqD,EAD8B,SAEjCC,GARuC,cAMnCC,EANmC,yBAUlCA,GAVkC,2CAAH,wDAiB3BC,EAA+C,uCAAG,2CAAAhE,EAAA,6DAC7DU,EAD6D,EAC7DA,QACAuD,EAF6D,EAE7DA,cAeMxC,EAAc3C,EAAK4C,QAAQhB,EAAQwD,kBACnCC,EAA4C,GAC5CC,EAA4C,GAC5CvD,EAAmBH,EAAQI,sBACjCmD,EAAcI,SAAQ,SAAAjD,GACpB,GAAKP,EAAiByD,YAAYlD,GAAlC,CAEA,IACMiB,EADWxB,EAAiBS,YAAYF,GACzBI,UACjBD,YAAMc,GACJC,YAAUD,GACZkC,QAAQrB,MAAM,sDAEdiB,EAAelB,KAAK,CAClBZ,MACAjB,iBAKJgD,EAAYnB,KAAK,CACfT,cAAeH,EACfjB,qBAvCuD,SA8CnDoD,YAAoB,CAC5BC,cAAeN,EACfvD,WAAY,SAAC8D,EAAOC,OAhDuC,cA4CvDC,EA5CuD,OAmDvDC,EAAqB,IAAIC,IAnD8B,UA0DvDC,QAAQC,IACZJ,EAAgBK,IAAhB,uCAAoB,+BAAAjF,EAAA,2DAASkD,MAAOgC,EAAhB,EAAgBA,KAAMC,EAAtB,EAAsBA,MACpCD,EADc,sCAGdL,EAHc,KAGSM,EAAK/D,aAHd,SAIGgE,YAAqBF,GAJxB,yBAIZG,QAJY,WAGKC,IAHL,uEAOdf,QAAQrB,MAAR,6CAEIiC,EAAK/D,aAFT,0BAPc,0DAApB,wDA3D2D,yBA4EvD2D,QAAQC,IACZZ,EAAYa,IAAZ,uCAAgB,iCAAAjF,EAAA,6DAASwC,EAAT,EAASA,cAAepB,EAAxB,EAAwBA,aAAxB,kBAEUvC,EAAG0G,SAASC,SAChC1G,EAAK4D,QAAQjB,EAAae,IAHhB,OAENiD,EAFM,OAMZZ,EAAmBS,IAAIlE,EAAc,CACnCoB,gBACA6C,QAAS,0BAA4BI,EAAQC,SAAS,YAR5C,gDAWZnB,QAAQrB,MAAR,qCACgCV,EADhC,0BAXY,yDAAhB,wDA7E2D,iCAgGtDyB,EAAcgB,KAAI,SAAA7D,GACvB,IAAMuE,EAAed,EAAmB1E,IAAIiB,GAC5C,IAAKuE,EACH,MAAO,CACLpG,KAAM6B,EACNiE,QAAS,IAGb,IAAQ7C,EAA2BmD,EAA3BnD,cACR,MAAO,CACLjD,KAAM6B,EACNiE,QAHiCM,EAAZN,QAIrB7C,qBA5GyD,4CAAH,sDAoHtDoD,EAA2B,uCAAG,mDAAA5F,EAAA,6DAClC6F,EADkC,EAClCA,mBACAC,EAFkC,EAElCA,YACAC,EAHkC,EAGlCA,YACAC,EAJkC,EAIlCA,aACAC,EALkC,EAKlCA,QAQQvF,EAAoDuF,EAApDvF,QAASuD,EAA2CgC,EAA3ChC,cAAeiC,EAA4BD,EAA5BC,wBAbE,SAgBVlC,EAAgD,CACtEtD,UACAuD,kBAlBgC,cAgB5BkC,EAhB4B,OAsB5BrC,EAA2C,CAC/CsC,YAAaH,EAAQI,aAAaD,YAClCE,mBAAoBC,YAClBR,EACAE,EAAQI,aAAaG,kBAEvBC,IAAKR,EAAQI,aAAaI,IAC1BC,UAAWT,EAAQI,aAAaK,UAChCnH,KAAM0G,EAAQI,aAAa9G,MAAQ0E,EAAc,IAAM6B,EACvDK,aAEFQ,YAAyBd,GAjCS,SAkCwBjC,EACxDiC,EACA/B,GApCgC,UAkC5BC,EAlC4B,iDAsCA,MAtCA,yBA0CF6C,YAC9B,CACEC,wBAAyB9C,EAAqB8C,wBAC9CnG,UACAyF,UAAWpC,EAAqBoC,UAChCH,iBA/C8B,eA0C5Bc,EA1C4B,2BAsD1BZ,EAAwBa,6BAtDE,2DAwDhCxC,QAAQrB,MACN,8DADF,MAxDgC,eAgElC8D,YAA2B,CACzBF,oBACAf,cACAkB,SAAUhB,EAAQI,aAAaD,YAC3BrC,EAAqBuC,mBACrB,OAINY,YACEJ,EAAkB7B,KAAI,qBAAG5D,SAAwBuB,aACjDmB,EAAqBuC,oBA3EW,kBA8E3B,CACLH,UAAWW,EAAkB7B,KAAI,gBAAG5D,EAAH,EAAGA,SAAU8F,EAAb,EAAaA,cAAb,MAAkC,CACjE5H,KAAM8B,EAASuB,UACfuE,oBAEFC,QAASrD,EAAqB8C,wBAC9BQ,YAAY,eAAItB,EAAchC,EAAqBuC,sBApFnB,2DAAH,sDA4F3BgB,EAAyC,CAC7C,CACE/H,KAAM,aACNgI,kBAAmB,0BACnBC,gBAAiB,wBACjBC,KAAM,QACNC,KAAK,WAAD,4BAAE,WAAMzB,GAAN,SAAAjG,EAAA,sEACS4F,EAA4B,CACvCK,UACAJ,mBAAoB,SACpBC,YAAa,YACbC,YAAa,OACbC,aAAc,UANZ,mFAAF,mDAAC,IAUP,CACEzG,KAAM,OACNgI,kBAAmB,wBACnBC,gBAAiB,sBACjBC,KAAM,QACNC,KAAK,WAAD,4BAAE,WAAMzB,GAAN,SAAAjG,EAAA,sEACS4F,EAA4B,CACvCK,UACAJ,mBAAoB,OACpBC,YAAa,mBACbC,YAAa,OACbC,aAAc,UANZ,mFAAF,mDAAC,IAUP,CACEzG,KAAM,OACNgI,kBAAmB,wBACnBC,gBAAiB,sBACjBC,KAAM,OACNC,KAAK,WAAD,4BAAE,WAAMzB,GAAN,SAAAjG,EAAA,sEACS4F,EAA4B,CACvCK,UACAJ,mBAAoB,OACpBC,YAAa,oBACbC,YAAa,OACbC,aAAc,SANZ,mFAAF,mDAAC,KAYMsB,O,6OC9RT3I,EAAWL,IAAgB,YAC3BQ,EAAOR,IAAgB,QACvBM,EAAcD,EAAWA,EAASC,YAAc,KAChD+I,EAAkBC,EAAOD,GAyBVE,E,4MAInBC,oBAAsB,kBAAM,G,EAC5BC,eAAiB,kBAAM,G,EAEvBC,MAAQ,CACNC,0BAA0B,EAC1BC,mBAAoB,KACpBC,mBAAoB,KACpBC,oBAAqB,KACrBC,gBAAiB,KACjBC,4BAA6B,KAC7BC,gBAAiB,EACjBC,aAAa,EACbC,aAAa,G,EAEfC,mCAAoE,K,EACpEC,8BAA+D,K,EAE/DC,0BAA4B,WAC1B,MAAyD,EAAKZ,MAAtDK,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,4BACpBA,GAAgCD,GAEhCzJ,GAELA,EAAY4B,OAAO,eAAgB,CACjC8H,8BACAO,yBAAyB,UAAD,OAAYR,EAAZ,eACxBI,YAAa,EAAKT,MAAMS,YACxBD,YAAa,EAAKR,MAAMQ,e,EAI5BM,aAAe,SAACC,GACTnK,GACLA,EAAY4B,OAAO,gBAAiB,CAAEuI,c,EAGxCC,mBAAqB,SACnBtI,EACAuI,EACAhD,GAEA,EAAKiD,SACH,CACEZ,4BAA6B,CAC3Ba,MAAOzI,EAAQ0I,yBACfC,OAAQ3I,EAAQ4I,0BAChBC,gBAAgB,EAChBC,MAAM,cAAD,OAAgB9I,EAAQkC,WAC7B6G,gBAAiB,UACjBC,eAAgB,CACdC,aAAa,EAGbC,iBAAiB,EACjBC,kBAAkB,IAGtBxB,gBAAiBY,EACjBT,aAAcvC,EAAQ6D,8BACtBrB,YAAaxC,EAAQ8D,8BAEvB,WACE,GAAK9D,EAAQ+D,eAEN,CACL,IAAKpL,EAAa,OAElBA,EAAYqL,mBAAmB,qBAC/BrL,EAAYqL,mBAAmB,qBAC/BrL,EAAYsL,GAAG,qBAAqB,SAACC,EAAOC,EAAKC,GAC3CD,EACF,EAAKlB,SAAS,CACZjB,0BAA0B,EAC1BE,mBAAoB,KACpBD,mBAAoB,KACpBE,oBAAqBgC,IAGvB,EAAKlB,SAAS,CACZjB,0BAA0B,EAC1BE,mBAAoBkC,EAAaC,OAIrCC,YAAW,kBAAM,EAAKC,4CAExB5L,EAAYsL,GAAG,oBAAoB,SAACC,EAAOM,GACzC,EAAKvB,SAAS,CACZhB,mBAAoBuC,OAGxB7L,EAAY8L,KAAK,eAAgB,CAC/BC,KAAM1B,IAERrK,EAAY8L,KAAK,6BA/BjB,EAAK9B,gC,EAqCbgC,iBAAmB,WAKjB,OAAOC,qBAAWC,MAAK,YAAmB,IAAhBC,EAAe,EAAfA,SACxBxG,QAAQyG,KAAK,iBAAkBD,GAE/B,IAAME,EAAkB,IAAIC,IAAgB,CAC1CC,0BAA0B,IAEtBC,EAAaC,IACjB,IAAI1D,EAAG2D,qBACPL,GAKF,MAAO,CACLM,UAJgBzM,EAAKY,KAAK0L,EAAWI,aAAc,WAKnDC,SAJe,IAAI9D,EAAG+D,SAASN,EAAYL,GAK3CA,gB,EAKNY,cAAgB,SAACC,GACf,IAAQlL,EAAoCkL,EAApClL,QAASmL,EAA2BD,EAA3BC,OAAQC,EAAmBF,EAAnBE,eAKzB,OAAO,EAAKC,2BACTC,cACAC,OAAM,SAAA7B,GAGL7F,QAAQrB,MACN,uDACAkH,MAGHU,MAAK,kBAAM,EAAKF,sBAChBE,MAAK,YAAwC,IAArCS,EAAoC,EAApCA,UAAWE,EAAyB,EAAzBA,SAAUV,EAAe,EAAfA,SAC5BmB,aACE,WACE,IAAMC,EAAuB,IAAIxE,EAAGyE,qBAClC1L,EACA6K,GAEFY,EAAqBE,4BAA4BC,IAAOC,SACxDJ,EAAqBK,cAAcX,EAAOjJ,WACtCkJ,GACFK,EAAqBM,sBACnBX,EAAelJ,WAInB,IAAM8J,EAA+BC,cACjCD,GACFP,EAAqBS,4CACnBF,EAA6BG,QAC7B,GAAKH,EAA6BpC,MAItC,IAAMwC,EAAmB,EAAKC,MAAMC,sBACpC,IAAK,IAAMC,KAAeH,EAAkB,CAC1C,IAAMI,EAAOJ,EAAiBG,GAC9Bd,EAAqBgB,mBAAmBF,EAAaC,GAMvDf,EAAqBiB,6BACnBtO,EAAKY,KACHqL,EACA,0BACA,mBACA,sBAIJ,IAAMsC,EAAc,EAAKtB,2BAA2BuB,yBAC9CC,EACJ3B,EAAe4B,aAAeH,EAAY1J,OAE5CwI,EAAqBsB,yBAEnBF,GAAmB3B,EAAe8B,uBAGpCvB,EAAqBwB,qBACnB/B,EAAegC,mBAGbhC,EAAeiC,gBACjB1B,EAAqB2B,kBACnBlC,EAAeiC,eAAeE,GAC9BnC,EAAeiC,eAAeG,UAIlCvC,EAASwC,4BAA4B9B,GACrCA,EAAqB+B,SACrBzC,EAASyC,SAELX,GACFF,EAAYhJ,SAAQ,SAAA8J,GAClB,EAAKpC,2BAA2BqC,YAAYD,EAAY,CACtDE,QAAS,iBAKX,EAAKrG,MAAMO,gBAAkB,KAAO,GACpC,EAAKI,+BAEL,EAAKA,8BAA8B2F,2BAErC,EAAKpF,UAAS,SAAAlB,GAAK,MAAK,CACtBO,gBAAiBP,EAAMO,gBAAkB,OAG3C,EAAKS,mBAAmBtI,EAAS6K,EAAWK,MAGhD,SAAA2C,GAAI,OAAIhK,QAAQyG,KAAR,uBAA6BuD,EAA7B,c,EAShB/D,oCAAsC,WACpC,OAAK,EAAK9B,oCAEH,EAAKA,mCAAmC4F,4B,8DAPjD,WACE,OAAOE,M,oBAST,WAAU,IAAD,OACP,EAKIC,KAAKzG,MAJPC,EADF,EACEA,yBACAC,EAFF,EAEEA,mBACAC,EAHF,EAGEA,mBACAC,EAJF,EAIEA,oBAGF,OACE,eAAC,WAAD,WACE,cAAC,IAAD,CACEsG,IAAK,SAAAC,GAAmB,OACrB,EAAKjG,mCAAqCiG,GAE7CC,qBAAsB,kBACpB,EAAK1F,SAAS,CAAEjB,0BAA0B,KAE5C8F,GAAG,oBACHvE,MAAO,cAAC,QAAD,0BACPqF,KAAK,QAEP,cAAC,IAAD,CACEH,IAAK,SAAAC,GAAmB,OACrB,EAAKhG,8BAAgCgG,GAExCZ,GAAG,gBACHvE,MACE,cAAC,QAAD,4DAEFqF,KAAK,QAEP,cAAC,IAAD,CACEC,KAAM7G,EACN5F,IACE6F,GAAsBC,EAAtB,UACOD,EADP,YAC6BC,GACzB,KAENjF,MAAOkF,EACP2G,QAAS,kBAAM,EAAK7F,SAAS,CAAEjB,0BAA0B,KACzD+G,SAAUP,KAAK1B,MAAMiC,SACrBC,oBAAqBR,KAAK7F,mC,GAhScsG,e,oDC7ClD,kCAAO,IAAMhD,EAAe,SAACiD,EAAcC,GACzC,IAAIC,EAAKC,YAAYC,MACrBJ,IAEAC,EADSE,YAAYC,MACPF,K,kCCLhB,gFAOM1Q,EAPN,MAOiBL,GAAgB,YAC3BM,EAAcD,EAAWA,EAASC,YAAc,KAElD4Q,EAA6C,UAC7CC,EAAwC,KACtCC,EAAuD,GACvDrC,EAAiC,GAkB1BmB,EAAoD,CAC/DxC,YAAa,WACX,IAAKpN,EAAa,OAAOmG,QAAQ4K,SACjC,GAA4B,YAAxBH,EAAmC,OAAOzK,QAAQrC,UAEtD,IAAMkN,EAAqB,IAAI7K,SAAQ,SAACrC,EAASiN,GAC/C,IAAIE,GAA8B,EAClCL,EAAsB,UACtBC,EAAwB,KAvBvB7Q,IAELA,EAAYqL,mBAAmB,8BAC/BrL,EAAYqL,mBAAmB,2BAC/BrL,EAAYqL,mBAAmB,8BAC/BrL,EAAYqL,mBAAmB,8BAC/BrL,EAAYqL,mBAAmB,+BAC/BrL,EAAYqL,mBAAmB,8BAC/BrL,EAAYqL,mBAAmB,8BAkB3BrL,EAAYsL,GAAG,2BAA2B,SAACC,EAAOC,GAC3CyF,IACHF,EAAOvF,GACPyF,GAA8B,GAGhCH,EAAcrL,SAAQ,mBAAyByL,EAAzB,EAAGA,iBAAsC1F,SAGjExL,EAAYsL,GAAG,8BAA8B,SAACC,EAAD,GAAoB,IAAV4D,EAAS,EAATA,GAC/CgC,EAAkB1C,EAAY2C,QAAQjC,IACnB,IAArBgC,GAAwB1C,EAAY4C,OAAOF,EAAiB,GAEhEL,EAAcrL,SAAQ,mBACpB6L,EADoB,EAAGA,oBACJ,CACjBnC,KACAV,sBAKNzO,EAAYsL,GAAG,8BAA8B,SAACC,EAAD,GAAoB,IAAV4D,EAAS,EAATA,GACrDV,EAAYpK,KAAK8K,GACjB2B,EAAcrL,SAAQ,mBACpB8L,EADoB,EAAGA,oBACJ,CACjBpC,KACAV,sBAKNzO,EAAYsL,GACV,+BACA,SAACC,EAAD,GAAkC,IAAxB4D,EAAuB,EAAvBA,GAAIqC,EAAmB,EAAnBA,aACZV,EAAcrL,SAAQ,mBACpBgM,EADoB,EAAGA,qBACH,CAClBtC,KACAqC,uBAMRxR,EAAYsL,GAAG,8BAA8B,SAACC,EAAD,GAAyB,IAAf0C,EAAc,EAAdA,QACrDtI,QAAQyG,KAAK,kCACbwE,EAAsB,UACtBC,EAAwB5C,EACnBgD,IACHnN,IACAmN,GAA8B,GAGhCH,EAAcrL,SAAQ,mBACpBiM,EADoB,EAAGA,8BAK3B1R,EAAYsL,GAAG,6BAA6B,SAACC,EAAD,GAA6B,IAAnB4D,EAAkB,EAAlBA,GAAIwC,EAAc,EAAdA,QACxDhM,QAAQyG,KAAK,4CACb,IACE,IAAMwF,EAAgBC,KAAKC,MAAMH,GACjCb,EAAcrL,SAAQ,mBACpBsM,EADoB,EAAGA,uBACD,CAAE5C,KAAIyC,qBAE9B,MAAO9R,GACP6F,QAAQqM,KACN,6DACAlS,OAINE,EAAY8L,KAAK,4BAKbmG,EAA4B,IAAI9L,SAAQ,SAACrC,EAASiN,GACtDpF,YAAW,WACToF,EACE,IAAI1P,MACF,kEAGH,QAEL,OAAO8E,QAAQ+L,KAAK,CAAClB,EAAoBiB,KAE3CzC,YAAa,SAACL,EAAgBwC,GACvB3R,IACuB,YAAxB4Q,EAKJ5Q,EAAY8L,KAAK,wBAAyB,CACxCqD,KACAwC,QAASE,KAAKM,UAAUR,KANxBhM,QAAQrB,MAAM,0DASlB8N,eAAgB,kBAAMxB,GACtBlC,uBAAwB,kBAAMD,GAC9B4D,kBAAmB,SAACC,GAGlB,OAFAxB,EAAczM,KAAKiO,GAEZ,WACL,IAAMC,EAAiBzB,EAAcM,QAAQkB,IACrB,IAApBC,GAAuBzB,EAAcO,OAAOkB,EAAgB,MAKzDxE,EAA2B,kBACtC8C,I,wRC1IW2B,EAAgC,2BACxCC,KADwC,IAE3CC,eAAgBC,MAGLC,EAA2C,CAAC,2BAElDC,KAFiD,IAGpDH,eAAgBI,MAHoC,2BAMjDC,KANiD,IAOpDL,eAAgBM,MAPoC,2BAUjDC,KAViD,IAWpDP,eAAgBQ,MAXoC,2BAcjDC,KAdiD,IAepDT,eAAgBU,OAIPC,EAAwC,CAAC,2BAE/CR,KAF8C,IAGjDH,eAAgBI,MAHiC,2BAM9CQ,KAN8C,IAOjDZ,eAAgBa,MAPiC,2BAU9CC,KAV8C,IAWjDd,eAAgBe,Q,qOChCd1T,EAAWL,IAAgB,YAC3BgU,EAAQ3T,EAAWA,EAAS2T,MAAQ,KAEpC3K,EAAkBC,EAAOD,GAmBlBwK,EAMT,CACF5S,KAAM,gBACNgT,uBAAwB,SAExBC,sBAAuB,SAAC9R,GAAD,MAAyB,CAC9C6K,UAAW7K,EAAQ+R,gCAGrBC,eAAgB,SAAAC,GAAW,QAAMA,EAAYpH,WAE7CqH,qBAAsB,kBAAM,GAE5BC,aAAc,gBAAGnS,EAAH,EAAGA,QAASiS,EAAZ,EAAYA,YAAaG,EAAzB,EAAyBA,kBAAzB,OACZ,eAAC,IAAD,CAAQC,UAAQ,EAAhB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAQA,UAAQ,EAAhB,SACE,cAAC,IAAD,QAGJ,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,KAAK,SACLC,MAAON,EAAYpH,UACnB2H,YAAaxS,EAAQ+R,8BACrBU,SAAU,SAAA5H,GACRuH,GAAkB,iBAAO,CAAEvH,gBAC3B7K,EAAQ0S,4BAA4B7H,IAEtC8H,WAAS,UAMjBC,wBAAyB,kBAAM,cAAC,QAAD,iBAE/BC,gBAAiB,SACfC,GAEA,OAAO3I,qBAAWC,MAAK,YAAmB,IAAhBC,EAAe,EAAfA,SACxBxG,QAAQyG,KAAK,iBAAkBD,GAG/B,IAAME,EAAkB,IAAIC,IAAgB,CAC1CC,0BAA0B,IAEtBC,EAAaC,IACjB,IAAI1D,EAAG2D,qBACPL,GAIF,MAAO,CACLQ,SAHe,IAAI9D,EAAG+D,SAASN,EAAYL,GAI3CE,uBAKNwI,aAAa,WAAD,4BAAE,WACZD,EADY,EAGZ3F,GAHY,mBAAA7N,EAAA,6DAEVyL,EAFU,EAEVA,SAAUR,EAFA,EAEAA,iBAGNyI,EAAgB,IAAI/L,EAAGgM,cAC3BH,EAAQ9S,QACR8S,EAAQb,YAAYpH,YAERqI,UAAU,WACpB/F,GACF6F,EAAc5F,kBACZD,EAAeE,GACfF,EAAeG,UAGnBvC,EAASoI,uBAAuBH,GAChCA,EAAcxF,SACdzC,EAASyC,SAlBG,kBAoBL,CACL4F,SAAU7I,EAAgB8I,iBAAiBP,EAAQb,YAAYpH,aArBrD,2CAAF,uDAAC,GAyBbyI,wBAAwB,WAAD,4BAAE,WACvBR,EADuB,kBAAAxT,EAAA,6DAErB8T,EAFqB,EAErBA,SAFqB,SAIjB3I,YAAyB,CAC7B1G,cAAeqP,EACflT,WAAY4S,EAAQS,mBACpBC,iBAAiB,IAPI,gCAUhB,MAVgB,2CAAF,qDAAC,GAaxBC,kBAAmB,SACjBX,EACAY,GAEA,OAAOrP,QAAQrC,QAAQ,OAGzB2R,iBAAkB,YAA+B,IAA5B1B,EAA2B,EAA3BA,YACb2B,GADwC,EAAdvF,QACP,WACnBuD,GAAOA,EAAMiC,SAAS5B,EAAYpH,aAGxC,OACE,cAAC,IAAD,CACEiJ,iBAAkB,kBAChB,cAAC,IAAD,CAEEC,MAAO,cAAC,QAAD,oBACPC,SAAS,EACTC,QAASL,GAHL,e,uPC7IV3V,EAAWL,IAAgB,YAC3BgU,EAAQ3T,EAAWA,EAAS2T,MAAQ,KAEpC3K,EAAkBC,EAAOD,GAmBlB0K,EAMT,CACF9S,KAAM,iBACNgT,uBAAwB,UAExBC,sBAAuB,SAAC9R,GAAD,MAAyB,CAC9C6K,UAAW7K,EAAQ+R,gCAGrBC,eAAgB,SAAAC,GAAW,QAAMA,EAAYpH,WAE7CqH,qBAAsB,kBAAM,GAE5BC,aAAc,gBAAGnS,EAAH,EAAGA,QAASiS,EAAZ,EAAYA,YAAaG,EAAzB,EAAyBA,kBAAzB,OACZ,eAAC,IAAD,CAAQC,UAAQ,EAAhB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAQA,UAAQ,EAAhB,SACE,cAAC,IAAD,QAGJ,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,KAAK,SACLC,MAAON,EAAYpH,UACnB2H,YAAaxS,EAAQ+R,8BACrBU,SAAU,SAAA5H,GACRuH,GAAkB,iBAAO,CAAEvH,gBAC3B7K,EAAQ0S,4BAA4B7H,IAEtC8H,WAAS,UAMjBC,wBAAyB,kBAAM,cAAC,QAAD,iBAE/BC,gBAAiB,SACfC,GAEA,OAAO3I,qBAAWC,MAAK,YAAmB,IAAhBC,EAAe,EAAfA,SACxBxG,QAAQyG,KAAK,iBAAkBD,GAG/B,IAAME,EAAkB,IAAIC,IAAgB,CAC1CC,0BAA0B,IAEtBC,EAAaC,IACjB,IAAI1D,EAAG2D,qBACPL,GAIF,MAAO,CACLQ,SAHe,IAAI9D,EAAG+D,SAASN,EAAYL,GAI3CE,uBAKNwI,aAAa,WAAD,4BAAE,WACZD,EADY,EAGZ3F,GAHY,mBAAA7N,EAAA,6DAEVyL,EAFU,EAEVA,SAAUR,EAFA,EAEAA,iBAGNyI,EAAgB,IAAI/L,EAAGgM,cAC3BH,EAAQ9S,QACR8S,EAAQb,YAAYpH,YAERqI,UAAU,YACpB/F,GACF6F,EAAc5F,kBACZD,EAAeE,GACfF,EAAeG,UAGnBvC,EAASoI,uBAAuBH,GAChCA,EAAcxF,SACdzC,EAASyC,SAlBG,kBAoBL,CACL4F,SAAU7I,EAAgB8I,iBAAiBP,EAAQb,YAAYpH,aArBrD,2CAAF,uDAAC,GAyBbyI,wBAAwB,WAAD,4BAAE,WACvBR,EADuB,kBAAAxT,EAAA,6DAErB8T,EAFqB,EAErBA,SAFqB,SAIjB3I,YAAyB,CAC7B1G,cAAeqP,EACflT,WAAY4S,EAAQS,mBACpBC,iBAAiB,IAPI,gCAUhB,MAVgB,2CAAF,qDAAC,GAaxBC,kBAAmB,SACjBX,EACAY,GAEA,OAAOrP,QAAQrC,QAAQ,OAGzB2R,iBAAkB,YAA+B,IAA5B1B,EAA2B,EAA3BA,YACb2B,GADwC,EAAdvF,QACP,WACnBuD,GAAOA,EAAMiC,SAAS5B,EAAYpH,aAGxC,OACE,cAAC,IAAD,CACEiJ,iBAAkB,kBAChB,cAAC,IAAD,CAEEC,MAAO,cAAC,QAAD,oBACPC,SAAS,EACTC,QAASL,GAHL,e,uPChJV3V,EAAWL,IAAgB,YAC3BgU,EAAQ3T,EAAWA,EAAS2T,MAAQ,KAEpC3K,EAAkBC,EAAOD,GAmBlB+J,EAMT,CACFnS,KAAM,cAENiT,sBAAuB,SAAC9R,GAAD,MAAyB,CAC9C6K,UAAW7K,EAAQ+R,gCAGrBC,eAAgB,SAAAC,GAAW,QAAMA,EAAYpH,WAE7CqH,qBAAsB,kBAAM,GAE5BC,aAAc,gBAAGnS,EAAH,EAAGA,QAASiS,EAAZ,EAAYA,YAAaG,EAAzB,EAAyBA,kBAAzB,OACZ,eAAC,IAAD,CAAQC,UAAQ,EAAhB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,MAEF,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,KAAK,SACLC,MAAON,EAAYpH,UACnB2H,YAAaxS,EAAQ+R,8BACrBU,SAAU,SAAA5H,GACRuH,GAAkB,iBAAO,CAAEvH,gBAC3B7K,EAAQ0S,4BAA4B7H,IAEtC8H,WAAS,UAMjBC,wBAAyB,kBAAM,cAAC,QAAD,gCAE/BC,gBAAiB,SACfC,GAEA,OAAO3I,qBAAWC,MAAK,YAAmB,IAAhBC,EAAe,EAAfA,SACxBxG,QAAQyG,KAAK,iBAAkBD,GAG/B,IAAME,EAAkB,IAAIC,IAAgB,CAC1CC,0BAA0B,IAEtBC,EAAaC,IACjB,IAAI1D,EAAG2D,qBACPL,GAIF,MAAO,CACLQ,SAHe,IAAI9D,EAAG+D,SAASN,EAAYL,GAI3CE,uBAKNwI,aAAa,WAAD,4BAAE,WACZD,EADY,EAGZ3F,GAHY,mBAAA7N,EAAA,6DAEVyL,EAFU,EAEVA,SAAUR,EAFA,EAEAA,gBAGNyI,EAAgB,IAAI/L,EAAGgM,cAC3BH,EAAQ9S,QACR8S,EAAQb,YAAYpH,WAElBsC,GACF6F,EAAc5F,kBACZD,EAAeE,GACfF,EAAeG,UAGnBvC,EAASoI,uBAAuBH,GAChCA,EAAcxF,SACdzC,EAASyC,SAjBG,kBAmBL,CACL4F,SAAU7I,EAAgB8I,iBAAiBP,EAAQb,YAAYpH,aApBrD,2CAAF,uDAAC,GAwBbyI,wBAAwB,WAAD,4BAAE,WACvBR,EADuB,kBAAAxT,EAAA,6DAErB8T,EAFqB,EAErBA,SAFqB,SAIjB3I,YAAyB,CAC7B1G,cAAeqP,EACflT,WAAY4S,EAAQS,mBACpBC,iBAAiB,IAPI,gCAUhB,MAVgB,2CAAF,qDAAC,GAaxBC,kBAAmB,SACjBX,EACAY,GAEA,OAAOrP,QAAQrC,QAAQ,OAGzB2R,iBAAkB,YAA+B,IAA5B1B,EAA2B,EAA3BA,YAA2B,EAAd5D,QAKhC,OACE,cAAC,IAAD,CACEyF,iBAAkB,kBAChB,cAAC,IAAD,CACEnB,WAAS,EACTqB,SAAO,EACPC,QAAS,WATXrC,GAAOA,EAAMiC,SAAS5B,EAAYpH,YAUhCkJ,MAAO,cAAC,QAAD,+C,iQCxIb3V,EAAOR,IAAgB,QACvBK,EAAWL,IAAgB,YAC3BsW,EAAStW,IAAgB,oBACzBuW,EAAMD,EAASA,EAAOC,IAAM,KAC5BvC,EAAQ3T,EAAWA,EAAS2T,MAAQ,KAEpC3K,EAAkBC,EAAOD,GAuBlBqK,EAMT,CACFzS,KAAM,+BAENiT,sBAAuB,SAAC9R,GAAD,MAAyB,CAC9CoU,sBAAuBD,EACnB/V,EAAKY,KAAKmV,EAAIE,QAAQ,aAAc,uBACpC,KAGNrC,eAAgB,SAAAC,GAAW,QAAMA,EAAYmC,uBAE7ClC,qBAAsB,kBAAM,GAE5BC,aAAc,cAAGnS,QAAH,IAAYiS,EAAZ,EAAYA,YAAaG,EAAzB,EAAyBA,kBAAzB,OACZ,eAAC,IAAD,CAAQC,UAAQ,EAAhB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,MAEF,cAAC,IAAD,UACE,cAAC,IAAD,CACEvJ,MAAO,yCACP+G,QACE,oEAEFyE,QAAS,CACP,CACEzV,KAAM,6CACN0V,WAAY,CAAC,SAGjBhC,MAAON,EAAYmC,sBACnB5B,YAAa2B,EAAMA,EAAIE,QAAQ,aAAe,GAC9C5B,SAAU,SAAAF,GAAK,OACbH,GAAkB,iBAAO,CAAEgC,sBAAuB7B,OAEpDI,WAAS,UAMjBC,wBAAyB,kBAAM,cAAC,QAAD,iBAE/BC,gBAAiB,SACfC,GAEA,OAAO3I,qBAAWC,MAAK,YAAmB,IAAhBC,EAAe,EAAfA,SACxBxG,QAAQyG,KAAK,iBAAkBD,GAG/B,IAAME,EAAkB,IAAIC,IAAgB,CAC1CC,0BAA0B,IAEtBC,EAAaC,IACjB,IAAI1D,EAAG2D,qBACPL,GAEIQ,EAAW,IAAI9D,EAAG+D,SAASN,EAAYL,GACvCmK,EAAqBpW,EAAKY,KAC9B0L,EAAWI,aACX,8BAKF,OAHAJ,EAAW+J,MAAMD,GACjB9J,EAAWgK,SAASF,GAEb,CACLzJ,WACAR,kBACAiK,0BAKNzB,aAAa,WAAD,4BAAE,WACZD,EADY,EAGZ3F,GAHY,qBAAA7N,EAAA,6DAEVyL,EAFU,EAEVA,SAAUR,EAFA,EAEAA,gBAAiBiK,EAFjB,EAEiBA,oBAGvBxB,EAAgB,IAAI/L,EAAGgM,cAC3BH,EAAQ9S,QACRwU,IAEYtB,UAAU,wBACpB/F,GACF6F,EAAc5F,kBACZD,EAAeE,GACfF,EAAeG,UAGnBvC,EAASoI,uBAAuBH,GAChCA,EAAcxF,SACdzC,EAASyC,SAlBG,kBAoBL,CACLgH,qBACApB,SAAU7I,EAAgB8I,iBAAiBmB,KAtBjC,2CAAF,uDAAC,GA0BblB,wBAAwB,WAAD,4BAAE,WACvBR,EADuB,oBAAAxT,EAAA,6DAErBkV,EAFqB,EAErBA,mBAAoBpB,EAFC,EAEDA,SAFC,SAIjB3I,YAAyB,CAC7B1G,cAAeqP,EACflT,WAAY4S,EAAQS,mBACpBC,iBAAiB,IAPI,gCAUhB,CAAEgB,uBAVc,2CAAF,qDAAC,GAaxBf,kBAAmB,SACjBX,EADiB,GAGe,IAD9B0B,EAC6B,EAD7BA,mBAEF,OAAOG,YAAmB,CACxBvW,KAAMoW,EACNI,eAAgB9B,EAAQb,YAAYmC,yBAIxCT,iBAAkB,YAA+B,IAA5B1B,EAA2B,EAA3BA,YACb2B,GADwC,EAAdvF,QACP,WACnBuD,GAASxT,GACXwT,EAAMiC,SAASzV,EAAK4C,QAAQiR,EAAYmC,0BAG5C,OACE,cAAC,IAAD,CACEN,iBAAkB,kBAChB,cAAC,IAAD,CAEEC,MAAO,cAAC,QAAD,oBACPC,SAAS,EACTC,QAASL,GAHL,e,gJCpLV3V,EAAWL,IAAgB,YAC3BsW,EAAStW,IAAgB,oBACzBiX,EAASX,EAASA,EAAOW,OAAS,KAElCC,EAAS,CACbC,UAAW,CACTC,SAAU,WACVC,QAAS,OACTC,WAAY,YAEdC,OAAQ,CACNC,WAAY,IAEdC,UAAW,CACTC,KAAM,IA+DKC,IA9CS,SAAC,GAQX,IAPZhD,EAOW,EAPXA,MACAE,EAMW,EANXA,SACA3J,EAKW,EALXA,MACA+G,EAIW,EAJXA,QACA2C,EAGW,EAHXA,YACAG,EAEW,EAFXA,UACA2B,EACW,EADXA,QAEMkB,EAAc,uCAAG,gCAAAlW,EAAA,yDAChBuV,GAAW5W,EADK,wDAGfwX,EAAgBvB,EAAOwB,mBAHR,SAIMb,EAAOc,eAAeF,EAAe,CAC9D3M,MAAOA,EACPwL,QAASA,EACTzE,QAASA,EACT2C,YAAaA,IARM,gBAIbnT,EAJa,EAIbA,SAMRoT,EAASpT,GAAY,IAVA,2CAAH,qDAapB,OACE,sBACEuW,MAAK,2BACAd,EAAOC,WADP,IAEHtM,MAAOkK,EAAY,YAASkD,IAHhC,UAME,cAAC,IAAD,CACEC,OAAO,QACPF,MAAOd,EAAOO,UACd/C,KAAK,OACLyD,qBAAsB,qBACtBxD,MAAOA,EACPE,SAAU,SAAChJ,EAAO8I,GAAR,OAAkBE,EAASF,MAEvC,cAAC,IAAD,CACEwB,MAAO,cAAC,QAAD,eACP6B,MAAOd,EAAOK,OACdlB,QAASuB,S,4OCvDXpX,EAAOR,IAAgB,QACvBD,EAAKC,IAAgB,MACrBqJ,EAAkBC,EAAOD,GAmBlBiK,EAMT,CACFrS,KAAM,uBACNmX,gBAAiB,gBACjBC,eAAe,EACfpE,uBAAwB,SAExBC,sBAAuB,iBAAO,CAC5BoE,QAAS,CAAC,cACVC,SAAU,MACVC,mBAAmB,IAIrBpE,eAAgB,SAACC,EAAaoE,EAASC,GAAvB,OACdD,GAA0B,KAAfC,GAGbpE,qBAAsB,SAACoE,EAAYD,GAAb,OACnBA,GACD,CAAC,WAAY,SAAU,qBAAsB,WAAY,UAAUE,SACjED,IAGJnE,aAAc,SAAA9F,GAAK,OAAI,cAAC,IAAD,eAAuBA,KAE9CuG,wBAAyB,kBAAM,cAAC,QAAD,oCAE/BC,gBAAiB,SACfC,GAEA,OAAO3I,qBAAWC,MAAK,YAAmB,IAAhBC,EAAe,EAAfA,SACxBxG,QAAQyG,KAAK,iBAAkBD,GAE/B,IAAME,EAAkB,IAAIC,IAAgB,CAC1CC,0BAA0B,IAEtBC,EAAaC,IACjB,IAAI1D,EAAG2D,qBACPL,GAEIQ,EAAW,IAAI9D,EAAG+D,SAASN,EAAYL,GACvCmK,EAAqBpW,EAAKY,KAC9B0L,EAAWI,aACX,uBAKF,OAHAJ,EAAW+J,MAAMD,GACjB9J,EAAWgK,SAASF,GAEb,CACLzJ,WACAR,kBACAiK,0BAKNzB,aAAa,WAAD,4BAAE,WACZD,EADY,EAGZ3F,GAHY,qBAAA7N,EAAA,6DAEVyL,EAFU,EAEVA,SAAUR,EAFA,EAEAA,gBAAiBiK,EAFjB,EAEiBA,oBAGvBxB,EAAgB,IAAI/L,EAAGgM,cAC3BH,EAAQ9S,QACRwU,IAEYtB,UAAU,WACpB/F,GACF6F,EAAc5F,kBACZD,EAAeE,GACfF,EAAeG,UAGnBvC,EAASoI,uBAAuBH,GAChCA,EAAcxF,SACdzC,EAASyC,SAlBG,kBAoBL,CACLgH,qBACApB,SAAU7I,EAAgB8I,iBAAiBmB,KAtBjC,2CAAF,uDAAC,GA0BblB,wBAAwB,WAAD,4BAAE,WACvBR,EADuB,oBAAAxT,EAAA,6DAErBkV,EAFqB,EAErBA,mBAAoBpB,EAFC,EAEDA,SAFC,SAIjB3I,YAAyB,CAC7B1G,cAAeqP,EACflT,WAAY4S,EAAQS,mBACpBC,iBAAiB,IAPI,gCAUhB,CAAEgB,uBAVc,2CAAF,qDAAC,GAaxBf,kBAAmB,SACjBX,EADiB,GAGe,IAD9B0B,EAC6B,EAD7BA,mBAEIgC,EAAmB7Y,EAAG8Y,SAC5B,OAAO9B,YAAmB,CACxBvW,KAAMoW,EACNI,eAAgBxW,EAAKY,KAAKwX,EAAkB,uBAIhDE,aAAc,SACZ5D,EACA6D,GAEA,OAAOC,cAA4BxM,MAAK,SAAAyM,GACtC,OAAOC,YACLH,EACAE,EACA/D,EAAQS,oBACRnJ,MAAK,kBAAMyM,EAAcE,WAI/BC,kBAAmB,SACjB/E,EACAgF,EACAC,EACAC,EACA5R,GAKA,IAAQ6R,EAAyCH,EAAzCG,uBAAwBC,EAAiBJ,EAAjBI,aAChC,OAAKA,EAGEC,YACLF,EACAC,EAAatZ,IACbmZ,EACAjF,EAAYiE,QACZjE,EAAYkE,SACZgB,EACA5R,GATOlB,QAAQ4K,OAAO,IAAI1P,MAAM,kC,8PC9JhCnB,EAAOR,IAAgB,QACvBD,EAAKC,IAAgB,MACrBqJ,EAAkBC,EAAOD,GAmBlBmK,EAMT,CACFvS,KAAM,wBACNmX,gBAAiB,iBACjBC,eAAe,EACfpE,uBAAwB,UAExBC,sBAAuB,iBAAO,CAC5BoE,QAAS,CAAC,YAIZlE,eAAgB,SAACC,EAAaoE,EAASC,GAAvB,QACZrE,EAAYiE,QAAQjT,SAAWoT,GAA0B,KAAfC,IAG9CpE,qBAAsB,SAACoE,EAAYD,GAAb,OACnBA,GACD,CAAC,WAAY,SAAU,qBAAsB,WAAY,UAAUE,SACjED,IAGJnE,aAAc,SAAA9F,GAAK,OAAI,cAAC,IAAD,eAAuBA,KAE9CuG,wBAAyB,kBAAM,cAAC,QAAD,iBAE/BC,gBAAiB,SACfC,GAEA,OAAO3I,qBAAWC,MAAK,YAAmB,IAAhBC,EAAe,EAAfA,SACxBxG,QAAQyG,KAAK,iBAAkBD,GAE/B,IAAME,EAAkB,IAAIC,IAAgB,CAC1CC,0BAA0B,IAEtBC,EAAaC,IACjB,IAAI1D,EAAG2D,qBACPL,GAEIQ,EAAW,IAAI9D,EAAG+D,SAASN,EAAYL,GACvCmK,EAAqBpW,EAAKY,KAC9B0L,EAAWI,aACX,wBAKF,OAHAJ,EAAW+J,MAAMD,GACjB9J,EAAWgK,SAASF,GAEb,CACLzJ,WACAR,kBACAiK,0BAKNzB,aAAa,WAAD,4BAAE,WACZD,EADY,EAGZ3F,GAHY,qBAAA7N,EAAA,6DAEVyL,EAFU,EAEVA,SAAUR,EAFA,EAEAA,gBAAiBiK,EAFjB,EAEiBA,oBAGvBxB,EAAgB,IAAI/L,EAAGgM,cAC3BH,EAAQ9S,QACRwU,IAEYtB,UAAU,YACpB/F,GACF6F,EAAc5F,kBACZD,EAAeE,GACfF,EAAeG,UAGnBvC,EAASoI,uBAAuBH,GAChCA,EAAcxF,SACdzC,EAASyC,SAlBG,kBAoBL,CACLgH,qBACApB,SAAU7I,EAAgB8I,iBAAiBmB,KAtBjC,2CAAF,uDAAC,GA0BblB,wBAAwB,WAAD,4BAAE,WACvBR,EADuB,oBAAAxT,EAAA,6DAErBkV,EAFqB,EAErBA,mBAAoBpB,EAFC,EAEDA,SAFC,SAIjB3I,YAAyB,CAC7B1G,cAAeqP,EACflT,WAAY4S,EAAQS,mBACpBC,iBAAiB,IAPI,gCAUhB,CAAEgB,uBAVc,2CAAF,qDAAC,GAaxBf,kBAAmB,SACjBX,EADiB,GAGe,IAD9B0B,EAC6B,EAD7BA,mBAEIgC,EAAmB7Y,EAAG8Y,SAC5B,OAAO9B,YAAmB,CACxBvW,KAAMoW,EACNI,eAAgBxW,EAAKY,KAAKwX,EAAkB,uBAIhDE,aAAc,SACZ5D,EACA6D,GAEA,OAAOC,cAA4BxM,MAAK,SAAAyM,GACtC,OAAOC,YACLH,EACAE,EACA/D,EAAQS,oBACRnJ,MAAK,kBAAMyM,EAAcE,WAI/BC,kBAAmB,SACjB/E,EACAgF,EACAC,EACAC,EACA5R,GAKA,IAAQ6R,EAAyCH,EAAzCG,uBAAwBC,EAAiBJ,EAAjBI,aAChC,OAAKA,EAGEE,YACLH,EACAC,EAAatZ,IACbmZ,EACAjF,EAAYiE,QACZiB,EACA5R,GAROlB,QAAQ4K,OAAO,IAAI1P,MAAM,kC,uPC5JhCnB,EAAOR,IAAgB,QACvBD,EAAKC,IAAgB,MACrBqJ,EAAkBC,EAAOD,GAqBlB4J,EAMT,CACFhS,KAAM,mBACNmX,gBAAiB,YAEjBlE,sBAAuB,kBAAM,MAG7BE,eAAgB,SAACC,EAAaoE,EAASC,GAAvB,OACdD,GAA0B,KAAfC,GAAoC,SAAfA,GAGlCpE,qBAAsB,SAACoE,EAAYD,GAAb,OACnBA,IAAY,CAAC,GAAI,QAAQE,SAASD,IAErCnE,aAAc,kBAAM,cAAC,IAAD,KAEpBS,wBAAyB,kBAAM,cAAC,QAAD,uBAE/B4E,0BAA2B,gBACzBC,EADyB,EACzBA,MACAzX,EAFyB,EAEzBA,QACA0X,EAHyB,EAGzBA,cACArB,EAJyB,EAIzBA,QACAC,EALyB,EAKzBA,WALyB,OAOzB,cAAC,IAAD,CACEmB,MAAOA,EACPzX,QAASA,EACT0X,cAAeA,EACfrB,QAASA,EACTC,WAAYA,KAIhBzD,gBAAiB,SACfC,GAEA,OAAO3I,qBAAWC,MAAK,YAAmB,IAAhBC,EAAe,EAAfA,SACxBxG,QAAQyG,KAAK,iBAAkBD,GAE/B,IAAME,EAAkB,IAAIC,IAAgB,CAC1CC,0BAA0B,IAEtBC,EAAaC,IACjB,IAAI1D,EAAG2D,qBACPL,GAEIQ,EAAW,IAAI9D,EAAG+D,SAASN,EAAYL,GACvCmK,EAAqBpW,EAAKY,KAC9B0L,EAAWI,aACX,mBAKF,OAHAJ,EAAW+J,MAAMD,GACjB9J,EAAWgK,SAASF,GAEb,CACLzJ,WACAR,kBACAiK,0BAKNzB,aAAa,WAAD,4BAAE,WACZD,EADY,EAGZ3F,GAHY,qBAAA7N,EAAA,6DAEVyL,EAFU,EAEVA,SAAUR,EAFA,EAEAA,gBAAiBiK,EAFjB,EAEiBA,mBAGvBxB,EAAgB,IAAI/L,EAAGgM,cAC3BH,EAAQ9S,QACRwU,GAEErH,GACF6F,EAAc5F,kBACZD,EAAeE,GACfF,EAAeG,UAGnBvC,EAASoI,uBAAuBH,GAChCA,EAAcxF,SACdzC,EAASyC,SAjBG,kBAmBL,CACLgH,qBACApB,SAAU7I,EAAgB8I,iBAAiBmB,KArBjC,2CAAF,uDAAC,GAyBblB,wBAAwB,WAAD,4BAAE,WACvBR,EADuB,oBAAAxT,EAAA,6DAErBkV,EAFqB,EAErBA,mBAAoBpB,EAFC,EAEDA,SAFC,SAIjB3I,YAAyB,CAC7B1G,cAAeqP,EACflT,WAAY4S,EAAQS,mBACpBC,iBAAiB,IAPI,gCAUhB,CAAEgB,uBAVc,2CAAF,qDAAC,GAaxBf,kBAAmB,SACjBX,EADiB,GAGe,IAD9B0B,EAC6B,EAD7BA,mBAEIgC,EAAmB7Y,EAAG8Y,SAC5B,OAAO9B,YAAmB,CACxBvW,KAAMoW,EACNI,eAAgBxW,EAAKY,KAAKwX,EAAkB,oBAC5CmB,UAAW,QAIfjB,aAAc,SACZ5D,EACA6D,GAEA,OAAOC,cAA4BxM,MAAK,SAAAyM,GACtC,OAAOC,YACLH,EACAE,EACA/D,EAAQS,oBACRnJ,MAAK,kBAAMyM,EAAcE,WAI/BC,kBAAmB,SACjB/E,EACAgF,EACAC,EACAC,EACA5R,GAKA,IAAQ6R,EAAyCH,EAAzCG,uBAAwBC,EAAiBJ,EAAjBI,aAChC,OAAKA,EAGEO,YACLR,EACAC,EAAatZ,IACbmZ,EACAC,EACA5R,GAPOlB,QAAQ4K,OAAO,IAAI1P,MAAM,kC,oHCnLhCtB,EAAWL,IAAgB,YAC3BsW,EAAStW,IAAgB,oBACzBuW,EAAMD,EAASA,EAAOC,IAAM,KAC5BjW,EAAcD,EAAWA,EAASC,YAAc,KAGhD2Z,EAAsB,SAAC,GAQtB,IAPLC,EAOI,EAPJA,SACAC,EAMI,EANJA,SACAC,EAKI,EALJA,YAMAxJ,aACE,WACE,GAAKtQ,GAAgB8Z,EAArB,CAEA,IAAMC,EAAU,SAACxO,GAAD,2BAAWyO,EAAX,iCAAWA,EAAX,yBAAyBH,EAAQ,WAAR,EAAYG,IAErD,OADAha,EAAYsL,GAAGsO,EAAUG,GAClB,kBAAM/Z,EAAYia,eAAeL,EAAUG,OAEpD,CAACH,EAAUC,EAAUC,KAInBI,EAAsB,SAAC,GAMtB,IALL3O,EAKI,EALJA,MACAsO,EAII,EAJJA,SAKAvJ,aACE,WACE,GAAK2F,EAAL,CACA,IAAM8D,EAAU,SAACxO,GAAD,2BAAWyO,EAAX,iCAAWA,EAAX,yBAAyBH,EAAQ,WAAR,EAAYG,IAErD,OADA/D,EAAI3K,GAAGC,EAAOwO,GACP,kBAAM9D,EAAIgE,eAAe1O,EAAOwO,OAEzC,CAACxO,EAAOsO,KAINM,EAAe,SAACC,GACpB,IAAKA,EAAa,OAAO,EACzB,IAAMC,EAAiBD,EAAYE,cACnC,OACED,EAAeE,WAAW,aACP,yCAAnBF,GACmB,yCAAnBA,GACmB,mCAAnBA,GAoLWG,IA7KU,SAAC,GAQlB,IAPNrM,EAOK,EAPLA,MACAmE,EAMK,EANLA,UACAmI,EAKK,EALLA,eAMQC,EAAmDvM,EAAnDuM,KAAM5Y,EAA6CqM,EAA7CrM,QAAS6Y,EAAoCxM,EAApCwM,mBAAoBC,EAAgBzM,EAAhByM,YACnCC,EAAmBJ,EAAnBI,eACFC,EAAWJ,EAAKI,SACtB,EAGIxK,YAAwB,GAH5B,mBACEyK,EADF,KAEEC,EAFF,KAIA,EAA8C1K,WAC5C0F,EAAOwB,mBAAmBrI,IAD5B,mBAAO8L,EAAP,KAAwBC,EAAxB,KAGMC,GACHJ,GAAyBF,EACtB,kBAAMA,EAAeI,IACrB,KAEMG,EACR9K,aAAiB+K,KADnBC,OAAUF,gCAGZlB,EAAoB,CAClB3O,MAAO,uBACPsO,SAAU,SAAA0B,GACRL,EAAmBK,EAAOpM,IAC1B6L,EAAyBb,EAAaoB,EAAO3Q,WAGjDsP,EAAoB,CAClB3O,MAAO,sBACPsO,SAAU,SAAA0B,GACRP,GAA0Bb,EAAaoB,EAAO3Q,WAMlD+O,EAAoB,CAClBC,SAAU,iBACVC,SAAUvH,EAAUkJ,gBACpB1B,YAAaiB,IAEfpB,EAAoB,CAClBC,SAAU,wBACVC,SAAUvH,EAAUmJ,iBACpB3B,YAAaiB,IAEfpB,EAAoB,CAClBC,SAAU,iBACVC,SAAUvH,EAAUkH,cACpBM,YAAaiB,IAEfpB,EAAoB,CAClBC,SAAU,oBACVC,SAAUvH,EAAUoJ,gBACpB5B,YAAaiB,IAEfpB,EAAoB,CAClBC,SAAU,kBACVC,SACEuB,GAAmCD,EAC/BA,EACA7I,EAAUqJ,eAChB7B,eACEsB,IAAmCD,IAE/BJ,IAERpB,EAAoB,CAClBC,SAAU,sBACVC,SAAUvH,EAAUsJ,WACpB9B,YAAaiB,IAEfpB,EAAoB,CAClBC,SAAU,mBACVC,SAAUvH,EAAUuJ,gBACpB/B,YAAaiB,IAEfpB,EAAoB,CAClBC,SAAU,4BACVC,SAAUvH,EAAUwJ,gBACpBhC,YAAaiB,IAEfpB,EAAoB,CAClBC,SAAU,yBACVC,SAAUvH,EAAUyJ,cACpBjC,YAAaiB,IAEfpB,EAAoB,CAClBC,SAAU,iCACVC,SAAUvH,EAAU0J,qBACpBlC,YAAaiB,IAEfpB,EAAoB,CAClBC,SAAU,2BACVC,SAAUvH,EAAU2J,eACpBnC,YAAaiB,IAEfpB,EAAoB,CAClBC,SAAU,0BACVC,SAAUvH,EAAU4J,eACpBpC,YAAaiB,IAEfpB,EAAoB,CAClBC,SAAU,uBACVC,SAAUvH,EAAU6J,YACpBrC,YAAaiB,IAEfpB,EAAoB,CAClBC,SAAU,6BACVC,SAAUvH,EAAU8J,kBACpBtC,YAAaiB,IAEfpB,EAAoB,CAClBC,SAAU,0BACVC,SAAUvH,EAAU+J,eACpBvC,YAAaiB,IAEfpB,EAAoB,CAClBC,SAAU,yBACVC,SAAUvH,EAAUgK,cACpBxC,YAAaiB,IAEfpB,EAAoB,CAClBC,SAAU,iCACVC,SAAUvH,EAAUiK,qBACpBzC,YAAaiB,IAEfpB,EAAoB,CAClBC,SAAU,gBACVC,SAAUvH,EAAUkK,wBACpB1C,aAAa,IAGfxJ,aACE,WACMtQ,GACFA,EAAY8L,KACV,gBACA2Q,YAAiC,CAC/B3a,UACA4Y,OACAC,qBACAC,cACA8B,2BAA2B,OAKnC,CAAChC,EAAMI,EAAUhZ,EAAS6Y,EAAoBC,IAGhD,IAAQa,EAAqBnJ,EAArBmJ,iBAYR,OAXAkB,YAAsB,uBAAuB,EAAM,CACjDC,gBAAiBtM,eACf,kBACEqK,EAAmBtU,KAAI,SAAAE,GAAI,MAAK,CAC9BsW,KAAMtW,EAAKxE,aAAagB,eACxBgX,QAAS,kBAAM0B,EAAiBlV,UAEpC,CAACkV,EAAkBd,MAIhB,O,qBC9OT,IAAQmC,EAAkBC,EAAQ,MAA1BD,cACFpd,EAAkBqd,EAAQ,IACxBC,EAA2BD,EAAQ,MAAnCC,uBAqBRC,EAAOC,QAAU,YAQW,IANxBnU,EAMuB,EANvBA,GACAoU,EAKuB,EALvBA,qBACAC,EAIuB,EAJvBA,wBACAC,EAGuB,EAHvBA,eACAC,EAEuB,EAFvBA,WAGF,MAAO,CACLC,kBAAmB,SAACC,GAClB,OAAOR,EAAuB,CAAEK,iBAAgBC,eAAcpR,MAC5D,SAAAuR,GACE,OAAOtX,QAAQC,IACbqX,EAAqBpX,KAAI,SAAAqX,GACvB,IAAIC,EAAkB,KACtB,IACEA,EAAkBje,EAAgBge,EAAqB,CACrDE,kBAAkB,IAEpB,MAAOC,GACP,MAAO,CACLH,sBACAI,OAAQ,CACNnM,QACE,+GACFrN,OAAO,EACPyZ,SAAUF,IAKhB,OAAIF,GAIAR,GACAQ,EAAgBK,8BAEhBL,EAAgBK,6BACdb,GAOFC,GACAO,EAAgBM,2BAEhBN,EAAgBM,0BACdb,GAIG,CACLM,sBACAI,OAAQhB,EACNU,EACAzU,EACAA,EAAGmV,WAAW3c,MACdoc,KAKC,CACLD,sBACAI,OAAQ,CACNxZ,OAAO,EACPqN,QACE,2GAMZ,SAAAnG,GAEE,MADA7F,QAAQrB,MAAR,wCACMkH,S,qBCvGhB,IAAQS,EAAa8Q,EAAQ,KAArB9Q,SACFvM,EAAkBqd,EAAQ,IAC1B7c,EAAOR,EAAgB,QACvBO,EAAKP,EAAgB,MAkD3Bud,EAAOC,QAAU,CACfF,uBAjC6B,SAAC,GAAoC,IAAlCK,EAAiC,EAAjCA,eAAgBC,EAAiB,EAAjBA,WAChD,OAAQA,EAAaA,IAAerR,KAAYC,MAAK,YAAmB,IAAhBC,EAAe,EAAfA,SAChDgS,EAAiBje,EAAKY,KAAKqL,EAAU,UAAW,cAItD,OAHAxG,QAAQyG,KAAR,sEACiE+R,EADjE,QAGO,IAAIhY,SAAQ,SAACrC,EAASiN,GAC3B9Q,EAAGme,QAAQD,GAAgB,SAAC7Z,EAAO+Z,GACjC,GAAI/Z,EACF,OAAOyM,EAAOzM,GAGhB,IAAMga,EAA2BD,EAAiB9b,QAAO,SAAAgc,GACvD,OAAKlB,IAEiC,IAA/BkB,EAAOnN,QAAQ,cAGxBjL,QAAQC,IACNkY,EAAyBjY,KAAI,SAAAmY,GAAe,OAnCdC,EAqC1Bve,EAAKY,KAAKqd,EAAgBK,GApC/B,IAAIrY,SAAQ,SAAArC,GACjB,IAAM4a,EAAwBxe,EAAKY,KACjC2d,EACA,kBAEFxe,EAAG0e,KAAKD,GAAuB,SAAClT,EAAKoT,GACnC,OACS9a,EADL0H,EACa,KAGFoT,EAAMC,SAAWH,EAAwB,YAXtB,IAAAD,MAwC9BvS,MAAK,SAAA4S,GACLhb,EAAQgb,EAAYvc,QAAO,SAAAwc,GAAU,QAAMA,QAC1ChO,e,kCC5CX,mFAGM7Q,EAAOR,IAAgB,QACvBD,EAAKC,IAAgB,MACrBO,EAAKP,IAAgB,MAMdsf,EAAoC,SAAC,GAEkB,IADlEC,EACiE,EADjEA,YAIMtS,EAAYzM,EAAKY,KACrBrB,EAAG8Y,SACH,8BAAgC5Y,eAElCM,EAAGif,MAAMvS,GAAW,SAAAnB,GACdA,GAAoB,WAAbA,EAAI2T,MACbxZ,QAAQrB,MACN,mFACAkH,MAMN,IAAM4T,EAAa,SAACC,GAClB,MAAM,GAAN,OAAU1S,EAAV,YAAuB2S,IAAMD,GAA7B,QAGF,MAAO,CACLE,kBAAmB,SAACF,GAAD,OAA2BD,EAAWC,IACzDG,kBAAmB,SACjBC,EACAN,GAEA,OAAO,IAAIhZ,SAAQ,SAACrC,EAASiN,GAC3B,IAAM1C,EAAc+Q,EAAWK,GAC/BR,EAAY,CAAE5Q,cAAaxH,QAASsY,IACpClf,EAAGyf,UAAUrR,EAAa8Q,GAAM,SAAA3T,GAC9B,GAAIA,EAAK,OAAOuF,EAAOvF,GAEvB1H,WAIN6b,kBAAmB,SACjBC,EACAT,GAEA,OAAO,IAAIhZ,SAAQ,SAACrC,EAASiN,GAC3B,IAAM1C,EAAc+Q,EAAWQ,GAC/BX,EAAY,CAAE5Q,cAAaxH,QAASsY,IACpClf,EAAGyf,UAAUrR,EAAa8Q,GAAM,SAAA3T,GAC9B,GAAIA,EAAK,OAAOuF,EAAOvF,GAEvB1H,WAIN+b,gBAAiB,SACfC,EACAX,GAEA,OAAO,IAAIhZ,SAAQ,SAACrC,EAASiN,GAC3B,IAAM1C,EAAc+Q,EAAWU,GAC/Bb,EAAY,CAAE5Q,cAAaxH,QAASsY,IACpClf,EAAGyf,UAAUrR,EAAa8Q,GAAM,SAAA3T,GAC9B,GAAIA,EAAK,OAAOuF,EAAOvF,GAEvB1H,c,gHC5EJ7D,EAAKP,IAAgB,YACrBQ,EAAOR,IAAgB,QACvBsW,EAAStW,IAAgB,oBACzBiX,EAASX,EAASA,EAAOW,OAAS,KAElCoJ,EAAgB,SAACC,EAAgBC,GACrC,IAAKhgB,EAAI,OAAOkG,QAAQ4K,OAAO,IAAI1P,MAAM,iCAEzC,IACE,IAAMwF,EAAUgL,KAAKM,UAAU6N,EAAQ,KAAM,GAC7C,OAAO/f,EAAGgE,UAAU/D,EAAK4C,QAAQmd,IAAW/T,MAC1C,kBACE,IAAI/F,SAAQ,SAACrC,EAASiN,GACpB9Q,EAAGyf,UAAUO,EAAUpZ,GAAS,SAAC2E,GAC/B,OAAIA,EACKuF,EAAOvF,GAGT1H,aAIf,MAAOoc,GACP,OAAO/Z,QAAQ4K,OAAOmP,KAILC,E,iDAAAA,EACZC,kCAAoC,SACzCC,GAEA,IAAK1J,EAAQ,OAAOxQ,QAAQ4K,OAAO,iBACnC,IAAMwG,EAAgBvB,EAAOwB,mBAE7B,OAAOb,EACJc,eAAeF,EAAe,CAC7B3M,MAAO,qCACPwL,QAAS,CACP,CACEzV,KAAM,sCACN0V,WAAY,CAAC,UAGjB/B,YAAa+L,GAAiB,mBAE/BnU,MAAK,YAAmB,IAAhB/K,EAAe,EAAfA,SACP,OAAKA,GAAiB,SAnBTgf,EAwBZG,8BAAgC,SACrC/f,EACA0f,GAEA,IAAMM,EAAmBC,YAAoBjgB,GAC7C,OAAOwf,EAAcQ,EAAkBN,GAAU5S,OAAM,SAAA7B,GAErD,MADA7F,QAAQrB,MAAM,iDAAkDkH,GAC1DA,MA/BS2U,EAmCZM,uBAAyB,SAACC,GAC/B,IAAK/J,EAAQ,OAAOxQ,QAAQ4K,OAAO,iBACnC,IAAMwG,EAAgBvB,EAAOwB,mBAE7B,OAAOb,EACJc,eAAeF,EAAe,CAC7B3M,MAAO,kCACPwL,QAAS,CACP,CACEzV,KAAM,kCACN0V,WAAY,CAAC,SAGjB/B,YAAaoM,GAAc,WAE5BxU,MAAK,YAAmB,IAAhB/K,EAAe,EAAfA,SACP,OAAKA,GAAiB,SAnDTgf,EAwDZQ,kBAAoB,SACzBC,EACAX,GAEA,IAAMY,EAAiBD,EAAaE,QAAQvf,MAC5Csf,EAAeE,QAAQ,IACvBF,EAAeG,eAAeC,QAC9BJ,EAAeK,aAAaD,QAC5BJ,EACGM,sBACA9e,YACAoD,SAAQ,SAAA9E,GAAI,OAAIkgB,EAAeO,eAAezgB,MACjD,IAAM4f,EAAmBC,YAAoBK,GAC7C,OAAOd,EAAcQ,EAAkBN,GAAU5S,OAAM,SAAA7B,GAErD,MADA7F,QAAQrB,MAAM,8BAA+BkH,GACvCA,O,uGCnGNvL,EAAKP,IAAgB,MACrBsW,EAAStW,IAAgB,oBACzBiX,EAASX,EAASA,EAAOW,OAAS,KAmBnB0K,E,iDAAAA,EACZjB,kCAAoC,WACzC,IAAKzJ,EAAQ,OAAOxQ,QAAQ4K,OAAO,iBACnC,IAAMwG,EAAgBvB,EAAOwB,mBAE7B,OAAOb,EACJ2K,eAAe/J,EAAe,CAC7B3M,MAAO,qCACP2W,WAAY,CAAC,YACb5P,QAAS,kDACTyE,QAAS,CACP,CACEzV,KAAM,sCACN0V,WAAY,CAAC,YAIlBnK,MAAK,YAAoB,IAAjBsV,EAAgB,EAAhBA,UACP,OAAKA,GAAcA,EAAUzc,OACtByc,EAAU,GAD2B,SAlB/BH,EAuBZI,gCAAkC,SACvCxB,GAEA,OA3CiB,SAACA,GACpB,OAAKhgB,EAEE,IAAIkG,SAAQ,SAACrC,EAASiN,GAC3B9Q,EAAG2G,SAASqZ,EAAU,CAAEyB,SAAU,SAAU,SAAClW,EAAK7J,GAChD,GAAI6J,EAAK,OAAOuF,EAAOvF,GAEvB,IACE,IAAMmW,EAAa9P,KAAKC,MAAMnQ,GAC9B,OAAOmC,EAAQ6d,GACf,MAAO9D,GACP,OAAO9M,EAAOkP,EAAW,0CAVf9Z,QAAQ4K,OAAO,gCA0CtB6Q,CAAa3B,K,gTCrClBlX,EAAkBC,EAAOD,GAEzB8Y,EAAkBC,YAAoB,QACtC5hB,EAAOR,IAAgB,QACvBK,EAAWL,IAAgB,YAEpBqiB,EAAqB,SAAC,GAM3B,IALNjgB,EAKK,EALLA,QACAW,EAIK,EAJLA,SAKMuf,EAAmBC,YACvBngB,EACAW,EAASuB,WAGXjE,EAAS2T,MAAMwO,iBAAiBhiB,EAAK4D,QAAQke,KAGlCG,EAAmB,SAAC,GAMzB,IALNrgB,EAKK,EALLA,QACAW,EAIK,EAJLA,SAKMuf,EAAmBC,YACvBngB,EACAW,EAASuB,WAEXjE,EAAS2T,MAAMiC,SAASzV,EAAK4D,QAAQke,KAG1BI,EAAuB,SAAC,GAM7B,IALNtgB,EAKK,EALLA,QACAW,EAIK,EAJLA,SAKMuf,EAAmBC,YACvBngB,EACAW,EAASuB,WAEXjE,EAASsiB,UAAUC,UAAUpiB,EAAK4D,QAAQke,KAG/BO,EAAmB,uCAAG,+CAAAnhB,EAAA,yDACjCU,EADiC,EACjCA,QACAuU,EAFiC,EAEjCA,WACAmM,EAHiC,EAGjCA,eAMMC,EAAOZ,IAToB,wDAY3B5f,EAAmBH,EAAQI,sBAC3BW,EAAc3C,EAAK4C,QAAQhB,EAAQwD,kBAEnCod,EAf2B,sBAgB5BrM,GAhB4B,YAiB5BA,EAAWhQ,KAAI,SAAA9F,GAAS,OAAIA,EAAUoiB,mBAjBV,mBAqBR,IAAIxc,SAAQ,SAACrC,EAASiN,GAC3C0R,EACE5f,EAAc,UAAY6f,EAAc5hB,KAAK,KAAO,KACpD,SAACwD,EAAOse,GACFte,EAAOyM,EAAOzM,GACbR,EAAQ8e,SA1BY,QAqBzBC,EArByB,OA+BzBC,EAAe,IAAI/Z,EAAGga,aAC5BF,EAASpd,SAAQ,SAAAtE,GAAQ,OACvB2hB,EAAaE,UAAU9iB,EAAKiE,SAAStB,EAAa1B,OAE9C8hB,EAA0BnhB,EAC7BI,sBACAghB,wBAAwBJ,GAC3BA,EAAaxT,SAEb6T,oBAAUF,GAAyB,SAACG,GAClC,IAAM5gB,EAAe5B,YAAiBwiB,GAAkB,SAAAziB,GAAI,OAC1DsB,EAAiByD,YAAY/E,MAGzB8B,EAAW+f,IACjB/f,EAASyB,QAAQkf,GACjB3gB,EAAS4gB,QAAQ7gB,GACjB8gB,YAAsBxhB,EAASW,GAC/BR,EAAiBshB,YAAY9gB,GAC7BA,EAAS6M,SAET3J,QAAQyG,KAAR,WACMgX,EADN,iDAC+D5gB,EAD/D,UApD6B,yDAyD/BmD,QAAQrB,MAAR,qCAA4CzB,EAA5C,WAzD+B,6EAAH,sDA8DnB2gB,EAAoC,SAAC,GAI1C,IAHN1hB,EAGK,EAHLA,QAIMG,EAAmBH,EAAQI,sBACJD,EAC1BG,sBACAC,YACAE,QAAO,SAAAC,GACN,MAA4D,UAArDihB,YAA0B3hB,EAASU,MAGzBiD,SAAQ,SAAAjD,GAC3BP,EAAiByhB,eAAelhB,GAChCmD,QAAQyG,KAAK,gCAAkC5J,S,oDCzInD,uEAGMzC,EAAWL,IAAgB,YAC3BM,EAAcD,EAAWA,EAASC,YAAc,KAMzC2jB,EAA8B,WACzC,IACMC,EADctT,aAAiB+K,KACLC,OAAOuI,0BAwBvC,OAtBAvT,aACE,WACE,GAAKsT,EAAL,CAKA,GAAK5jB,EAQL,OADAA,EAAY8L,KAAK,wCACV,WACL9L,EAAY8L,KAAK,yCARjBnG,QAAQrB,MACN,qEAUN,CAACsf,IAGI,O,6NCdH1jB,EAAOR,IAAgB,QAEvBqJ,EAAkBC,EAAOD,GAEzB+a,EAAW,uCAAG,sBAAA1iB,EAAA,+EACX,CACL+B,iBAAkB,KAFF,2CAAH,qDAWJ4gB,EAAqC,uCAAG,iDAAA3iB,EAAA,6DACnDU,EADmD,EACnDA,QACAiX,EAFmD,EAEnDA,kBACAiL,EAHmD,EAGnDA,gBACAC,EAJmD,EAInDA,gBACAjiB,EALmD,EAKnDA,WAEM8b,EAAwC,CAC5C3a,iBAAkB,IAGd+gB,EAAoBD,EAAgBlhB,eAEpCd,EAAmBH,EAAQI,sBAsC3BiiB,EAhCuB,SAACriB,GAE5B,OADyBG,EAAiBG,sBAAsBC,YAE7DgE,KACC,SAAC7D,GACC,IAAMC,EAAWR,EAAiBS,YAAYF,GACxC4hB,EAAe3hB,EAASG,UAE9B,OAAID,YAAMyhB,GACJC,YAAgCD,GAG3B,KACE1gB,YAAU0gB,IACnBtG,EAAO3a,iBAAiBkB,KAAK,CAC3B7B,aAAcC,EAASuB,UACvBM,MAAO,IAAIjD,MAAM,2BAEZ,MAGA,KAIFoB,KAIZF,OAAO+hB,SAGiBC,GAEvB1hB,EAAc3C,EAAK4C,QAAQkhB,EAAgBjhB,gBAE7CyhB,EAAmB,EAvD4B,UAyD7CC,YAAeN,EAAsB,CACzCO,cAAc,WAAD,4BAAE,WAAOjiB,GAAP,iBAAArB,EAAA,6DACPujB,EAAuBzkB,EAAK4D,QAChCjB,EACAJ,EAASG,WAHE,kBAOQgiB,YAAoBD,GAP5B,cAOLE,EAPK,yBAQJ,CACLpiB,WACAoiB,SAVS,uCAaX/G,EAAO3a,iBAAiBkB,KAAK,CAC3B7B,aAAcC,EAASuB,UACvBM,MAAO,IAAIjD,MAAJ,mCACuBsjB,EADvB,SAfE,kBAmBJ,MAnBI,yDAAF,mDAAC,GAsBdG,cAAe,SAACC,GACd,OAAIA,EAAsBhgB,OAAS,IAEbggB,EACnBxiB,OAAO+hB,SACPU,QAAO,SAACC,EAAD,UAAoBA,EAApB,EAASJ,KAAuBI,OAAM,GAMzB,MAEzBC,aAAa,WAAD,4BAAE,WACZH,GADY,iBAAA3jB,EAAA,6DAGN+jB,EAA8CJ,EAAsBxiB,OACxE+hB,SAJU,SAQNc,YAA8BrM,EAAmBmL,GAR3C,uBAS6DmB,YACvEtM,EACAmL,EACAiB,EAAyB9e,KAAI,qBAAGwe,SAChC,SAAC/e,EAAOC,GACN/D,EAAWwiB,EAAmB1e,EAAOqe,EAAqBpf,WAdlD,OASNugB,EATM,OAiBZd,GAAoBO,EAAsBhgB,OAG1CugB,EAA6B7f,SAAQ,WAAiB8f,GAAW,IAAzB9hB,EAAwB,EAAxBA,IAAKa,EAAmB,EAAnBA,MACrC7B,EAAW0iB,EAAyBI,GAAO9iB,UAC7C6B,GAAUb,EAQdhB,EAASyB,QAAQT,GAPfqa,EAAO3a,iBAAiBkB,KAAK,CAC3B7B,aAAcC,EAASuB,UACvBM,MAAOA,GAAS,IAAIjD,MAAM,qCAzBpB,2CAAF,mDAAC,KA7FoC,iCAgI5Cyc,GAhI4C,4CAAH,sDAmI5C0H,GAEL,6BACKC,IAAyBC,aAD9B,aAEGD,IAAyBC,cAF5B,uCAGM,mCAAAtkB,EAAA,6DAASU,EAAT,EAASA,QAASmiB,EAAlB,EAAkBA,gBAGfphB,EAAc3C,EAAK4C,QAAQmhB,EAAgBlhB,gBAC3CyJ,EAAaC,IACjB,IAAI1D,EAAG2D,qBACP,IAAIJ,KAENvD,EAAG4c,uBAAuBC,mBACxB9jB,EAEA0K,EACA3J,GACA,GACA,GACA,GAfC,kBAiBI,CACLM,iBAAkB,KAlBjB,2CAHN,+EA0BK0iB,IAAqBH,aA1B1B,aA2BGD,IAAyBC,eACtB,gBAAG5jB,EAAH,EAAGA,QAASmiB,EAAZ,EAAYA,gBAAiBjiB,EAA7B,EAA6BA,WAA7B,OACHH,YAA6B,CAC3BC,UACAC,aAAckiB,EACdjiB,kBAhCL,wBAsCK8jB,IAAmBJ,aAtCxB,aAuCGD,IAAyBC,eACtB,gBAAG5jB,EAAH,EAAGA,QAASmiB,EAAZ,EAAYA,gBAAiBjiB,EAA7B,EAA6BA,WAA7B,OACHH,YAA6B,CAC3BC,UACAC,aAAckiB,EACdjiB,kBA5CL,wBAkDKyjB,IAAyBC,aAlD9B,aAmDGG,IAAqBH,cAClB3B,GApDN,wBAuDK8B,IAAqBH,aAvD1B,aAwDGG,IAAqBH,cAClBK,KAzDN,wBA6DKD,IAAmBJ,aA7DxB,aA8DGG,IAAqBH,cAClB5B,GA/DN,GAkEKkC,EAAqB,CACzBC,wBAAwB,WAAD,4BAAE,WACvB5e,GADuB,mBAAAjG,EAAA,yDAGf8kB,EAA2C7e,EAA3C6e,mBAAoBC,EAAuB9e,EAAvB8e,mBACtBC,EACJZ,EAAO,GAAD,OACDU,EAAmBR,aADlB,aACmCS,EAAmBT,eANvC,sBASf,IAAIrkB,MAAJ,yCAC8B6kB,EAAmBR,aADjD,eAEFS,EAAmBT,aAFjB,MATe,gCAehBU,EAAM/e,IAfU,2CAAF,mDAAC,IAmBX2e,Q,iHC/PFvB,EAAc,uCAAG,WAC5B4B,EAD4B,4BAAAjlB,EAAA,sDAG1BsjB,EAH0B,EAG1BA,cACAI,EAJ0B,EAI1BA,cACAI,EAL0B,EAK1BA,aAOEoB,EAAmB,EACjBC,EAA+B,GAbT,YAerBD,EAAmBD,EAAMthB,QAfJ,iCAgBD2f,EAAc2B,EAAMC,IAhBnB,UAgBpBE,EAhBoB,OAkBrBD,EAAUxhB,OAlBW,4CAqBnB+f,EAAc,GAAD,OAAKyB,EAAL,CAAgBC,KArBV,0DAyBhBtB,EAAaqB,GAzBG,QA0BtBA,EAAUxhB,OAAS,EA1BG,QA8B1BwhB,EAAUliB,KAAKmiB,GACfF,IA/B0B,2BAkCxBC,EAAUxhB,OAlCc,kCAmCpBmgB,EAAaqB,GAnCO,QAoC1BA,EAAUxhB,OAAS,EApCO,8EAAH,yD,gHCArB7E,EAAOR,IAAgB,QACvBO,EAAKP,IAAgB,MAErB+mB,EAA0B,uCAAG,WACjCtlB,GADiC,iBAAAC,EAAA,sEAGJ,IAAI+E,SAAQ,SAACrC,EAASiN,GACjD9Q,EAAG2G,SAASzF,GAAU,SAASqK,EAAKkb,GAC9Blb,EACFuF,EAAOvF,GAIT1H,EAAQ4iB,SAVqB,cAG3BA,EAH2B,OAiB3BhlB,EAAcglB,EAAOA,OAAOC,MAChCD,EAAOE,WACPF,EAAOE,WAAaF,EAAOG,YAnBI,kBAqB1BnlB,GArB0B,2CAAH,sDAyB1BolB,EAAsB,CAE1BC,IAAK,YACLC,IAAK,YACLC,IAAK,YACLC,IAAK,YAGLC,IAAK,YACLC,IAAK,aACLC,KAAM,aACNC,KAAM,aAGNC,IAAK,WACLC,IAAK,WAGLC,IAAK,YACLC,KAAM,aAGNC,KAAM,mBACNC,IAAK,kBACLC,GAAI,mBACJC,GAAI,0BAGOlD,EAAmB,uCAAG,WAAOzjB,GAAP,iBAAAC,EAAA,sEACPqlB,EAA2BtlB,GADpB,cAC3BO,EAD2B,OAE3BqmB,EAA6B7nB,EAAKM,QAAQW,GAAUiD,QAAQ,MAAO,IAFxC,kBAG1B,IAAI4jB,KAAK,CAACtmB,GAAcxB,EAAKQ,SAASS,GAAW,CACtDiT,KACE0S,EAAoBiB,IACpB,8BAN6B,2CAAH,uD,+HC5C1BE,GAEL,mBAGEpC,IAAqBH,aAAewC,KAHtC,cAMEzC,IAAyBC,aAAe7jB,KAN1C,cASEikB,IAAmBJ,aAAeyC,KATpC,GAYKC,EAAwC,CAC5CC,yBAAyB,WAAD,4BAAE,WACxBhhB,GADwB,iBAAAjG,EAAA,yDAGhBknB,EAAoBjhB,EAApBihB,gBACFC,EAAUN,EAASK,EAAgB5C,cAJjB,sBAMhB,IAAIrkB,MAAJ,2CAEFinB,EAAgB5C,aAFd,sDANgB,gCAYjB6C,EAAQlhB,IAZS,2CAAF,mDAAC,IAgBZ+gB,O,kIC5CXI,EAAkB,KAGDC,E,iDAMrBA,SALIC,SAAcC,EAAQC,GAClBJ,EAAgBG,EAAQC,IAKhCC,eAAoBJ,E,SAIVK,GAGNC,SAASA,EAAalM,EAAMmM,EAAOC,EAASC,GACxC,IAAIC,EAAK,GAELC,EAAMN,EAAcG,EAASD,GACjCI,IAAYvM,GACZuM,MAEAF,EAAQA,GAAS,EAP8B,IAS3CG,EAAgBD,MAChBE,EAAmBF,MAAuB,EAAIF,EAmBlD,OAPAC,OAAUtM,EACVsM,QAAWH,EACXG,UAAaF,EACbE,IAAiBG,EACjBH,IAdAI,SAAgBC,EAAKC,GAIjB,OAFAA,GAAOP,IAEG,GAHVM,GAAON,IAGQM,GAAOH,GAAuB,EAANI,GAAWA,GAAOJ,IAGlDD,IAAWI,EAAKC,IAUpBN,EAwBXO,SAASA,EAAsBC,EAAKC,EAAGC,EAAGC,EAAGC,EAAGC,EAAKC,EAAIC,EAAIC,EAAIC,GAQ7DC,SAASA,EAAIN,EAAGO,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,GAC5BZ,GACAJ,SAAWW,EAAKI,EAAIH,EAAKI,GACzBhB,QAAUW,EAAIC,EAAIC,EAAIC,EAAIT,IAE1BL,SAAWW,EAAIC,GAXnBN,EACAN,SAAWC,EAAII,EAAKH,GAEpBF,SAAWC,EAAGC,GAYlBQ,EAAIH,EAAIJ,EAAGD,EAAGC,EAAGC,GAAIC,EAAK,GAC1BK,EAAIF,EAAIL,EAAGC,EAAGH,EAAGG,EAAG,GAAIC,GACxBK,EAAID,EAAIR,EAAGG,EAAGH,EAAGC,EAAGG,EAAK,GACzBK,EAAIJ,EAAIL,EAAGC,EAAGC,EAAGD,EAAG,EAAGG,GAI3BY,SAASA,EAAwBjB,EAAKC,EAAGC,EAAGC,EAAGC,EAAGC,EAAKC,EAAIC,EAAIC,EAAIC,GAC/DS,SAASA,EAAKC,EAAGC,EAAGL,EAAIC,GACpBhB,SAAWmB,EAAEJ,EAAIK,GACjBpB,SAAWmB,EAAGC,GACdpB,SAAWmB,EAAGC,EAAEJ,GAChBhB,QAAUmB,EAAGC,EAAGD,EAAEJ,EAAIK,EAAGf,GAGzBC,GAAIY,EAAKjB,EAAGC,EAAGG,EAAKA,GACpBE,GAAIW,EAAKf,EAAGD,GAAIG,EAAKA,GACrBG,GAAIU,EAAKf,EAAGC,GAAIC,GAAMA,GACtBI,GAAIS,EAAKjB,EAAGG,EAAGC,GAAMA,GAiF7BgB,SAASA,EAAaC,EAAQC,GAvIuC9pB,GAwIxCyb,aAAesO,MAAkBC,MAAqBC,MAAqBnC,MArIpG,IAFAkC,EAAaE,SAAS,EAAGF,GAAc,GACvCC,EAAaC,SAAS,GAAID,GAAc,IACTpC,GAAWoC,EAAYpC,GAAW,EAC7D,IACI,MAAOF,EAAalM,EAAMmM,EAAOC,EAASC,GAA1C,QACF,MAAO1d,IANoD+f,SAyIjE,IAAKpC,EACD,OAAO,KA3CX,IA8CIvU,EAAUqW,aAAkB,MAEJC,EAnIxBM,aAmIe5W,EAlIf6W,UAkIwBP,EAlIJM,WAkIL5W,EAjIf8W,SAiIwBR,EAjIPS,KAiIOT,EAjIQU,IAiIRV,EAjIsBjG,KAiItBiG,EAjIqCjG,OA2E7D4G,EAAc1C,IACd2C,EAsDqBZ,EAtDRjG,KAAgB4G,EAsDjBjX,EAlDhBmX,YACKvC,EAAM,EAAGA,EAAMqC,EAAarC,GAAO,EACpC,IAAKC,EAAM,EAAGA,EAAMoC,EAAapC,GAAO,EAAG,CAgD/B7U,QA/CAgV,EA+CSsB,EA/CTS,KAAgBlC,EAAMqC,EACtBjC,EA8CSqB,EA9CTU,IAAepC,EAAMsC,EAGqBtC,IAAKC,IA3C3DF,EA2CsBJ,EA3CbI,EACTyC,EAAQL,EAwCIG,EAvCZG,EAASL,EAuCGE,EAtCZI,EAAO1C,EAAM,EACb2C,EAAO3C,EAAM,EACb4C,EAAO3C,EAAM,EACb4C,EAAO5C,EAAM,EACb6C,EAAShB,WAAWA,SAAS,GAAKA,SAAS,EA+EtBJ,EA/EyBoB,IAkClCR,GAjCZS,EAAShD,EAAOC,EAAKC,GACrB+C,EAAYjD,EAAO2C,EAAME,GACzBK,EAAQlD,EAAO2C,EAAMzC,GACrBiD,EAAYnD,EAAO2C,EAAMG,GAZ6C,IAatEM,EAAOpD,EAAOC,EAAK6C,GACnBO,EAAYrD,EAAO4C,EAAME,GACzBQ,EAAQtD,EAAO4C,EAAM1C,GACrBqD,EAAYvD,EAAO4C,EAAMC,GACzBW,EAAOxD,EAAOC,EAAK4C,GAEvBT,EAAOL,WAAWK,GAClBC,EAAMN,WAAWM,GACjBI,EAAQV,WAAWU,GACnBC,EAASX,WAAWW,GAEhBM,EACA7C,EAAsB9U,EAAS+W,EAAMC,EAAKI,EAAOC,EAAQK,GAASG,IAAUM,GAAON,IAAUE,GAAOE,IAAUF,GAAOE,IAAUE,GAE/HnC,EAAwBhW,EAAS+W,EAAMC,EAAKI,EAAOC,EAAQK,EAAQG,GAASM,GAAQP,EAAWC,GAASE,GAAQD,EAAWG,GAASF,GAAQC,EAAWC,GAASE,GAAQD,GA8D5K,OArCJE,SAAiBpY,EAASsW,GACtB,IAAM+B,EAAO/B,OACb,GAAoB,kBAAT+B,EAEPrY,YAAoBqY,MAFxB,CAFgC,IAO1B7Y,EAAO6Y,OAETC,EAAaD,aAGjB,GADME,EAHSF,WAGU5mB,KAAa,mBAAcilB,WAAW8B,EAAalC,WAC/D,oBAAT9W,EACA,MAAWQ,6BAAmCA,EAASuY,OACpD,IAAa,oBAAT/Y,EAGP,MAAU/S,MAAM,oBAFhBgsB,EAAWzY,6BAAmCA,EAASuY,GAI3DD,WAAmB,YAAqB,uBAAnBI,EAAmB,KAAXC,EAAW,KACpCF,eAAsBC,EAAQC,MAElC3Y,YAAoByY,GA1BpBL,CAuCgBpY,EAASsW,GAATtW,EAtChBqY,OAwCOhC,EAgBX,IAAIuC,EAAW,CAEXpC,WAAc,EACdC,WAAc,GAGdF,QAAW,IAGXQ,KAAQ,EACRC,IAAO,EAGP3G,KAAQ,IAGRgI,KAAQ,OAGRzB,WAAc,KAGd3O,KAAQ,UAGRyP,OAAU,GAGVpD,MAAS,GAMbV,EAAkBA,SAASnhB,EAASuhB,GAChC,IAAIsC,EAAW,GACfuC,cAAcvC,EAAUsC,EAAUnmB,GAElC6jB,IAAsBA,aACtBA,IAAsBA,aACtBA,IAAmBA,UACnBA,OAAgBA,OAChBA,MAAeA,MACfA,OAAgBA,OAChBA,OAAgBA,OAChBA,aAAsBA,a,EACtBrO,KAAgBqO,OAChBA,IAAkBA,SAClBA,IAAiBA,QAEbtC,aAAoB8E,mBAChB9E,UAAmBsC,QAAiBtC,WAAoBsC,SACxDtC,QAAiBsC,OACjBtC,SAAkBsC,QAEtBtC,aAAoB,MAApBA,UAAoC,EAAG,EAAGA,QAAgBA,UAC1DoC,EAAapC,EAAUsC,MAnEvByC,EAAUC,uBAAuB,WACrCD,MAoEiCzC,EApEjBjG,KAChB0I,SAmEiCzC,EAnEhBjG,KACjB7jB,EAAO4pB,EAAa2C,EAkEazC,GAC7BtC,cADgB+E,K,CAuBX,WAWIE,WAASC,EAAYC,GA2CEC,WAASxE,EAAKC,GAE1C,IAAK,IAAIK,GAAK,EAAQ,GAALA,EAAQA,GAAK,EAE1B,MAAgB,GAAZN,EAAMM,GAAWmE,GAAgBzE,EAAMM,GAE3C,IAAK,IAAIoE,GAAK,EAAQ,GAALA,EAAQA,GAAK,GAEV,GAAZzE,EAAMyE,GAAWD,GAAgBxE,EAAMyE,IAKvCC,EAAS3E,EAAMM,GAAGL,EAAMyE,GAHvB,GAAKpE,GAAU,GAALA,IAAgB,GAALoE,GAAe,GAALA,IAC/B,GAAKA,GAAU,GAALA,IAAgB,GAALpE,GAAe,GAALA,IAC/B,GAAKA,GAAU,GAALA,GAAU,GAAKoE,GAAU,GAALA,GA5ChCE,WAASC,EAAMC,GAKtB,IAOFL,MAVFA,EAA6B,EATfH,EASmB,GAEzBS,EAAcC,MAAM3C,GACfrC,EAAM,EAAGA,EAAMqC,EAAarC,GAAO,EAAG,CAC3C+E,EAAQ/E,GAAWgF,MAAM3C,GACzB,IAAK,IAAIpC,EAAM,EAAGA,EAAMoC,EAAapC,GAAO,EACxC8E,EAAQ/E,GAAKC,GAAO,KAsFhC,IAnFIK,EAAOyE,EAGXP,EAA0B,EAAG,GAC7BA,EAA0BC,EAAe,EAAG,GAC5CD,EAA0B,EAAGC,EAAe,GA4ExCQ,EAAMC,IAnGIZ,GAqGLa,EAAI,EAAGA,EAAIF,SAAYE,GAAK,EAEjC,IAASC,EAAI,EAAGA,EAAIH,SAAYG,GAAK,EAAG,CAEhCpF,EAAMiF,EAAIE,GACd,IAAIlF,EAAMgF,EAAIG,GAEd,GAA0B,MAAtBT,EAAS3E,GAAKC,GAIlB,IAAK,IAAIK,GAAK,EAAQ,GAALA,EAAQA,GAAK,EAE1B,IAAK,IAAIoE,GAAK,EAAQ,GAALA,EAAQA,GAAK,EAE1BC,EAAS3E,EAAMM,GAAGL,EAAMyE,IAAW,GAANpE,GAAgB,GAALA,IAAgB,GAANoE,GAAgB,GAALA,GAAgB,GAALpE,GAAe,GAALoE,EAlClG,IAASpE,EAAI,EAAGA,EAAImE,EAAe,EAAGnE,GAAK,EACjB,MAAlBqE,EAASrE,GAAG,KAGhBqE,EAASrE,GAAG,GAAe,GAATA,EAAI,GAG1B,IAASoE,EAAI,EAAGA,EAAID,EAAe,EAAGC,GAAK,EACjB,MAAlBC,EAAS,GAAGD,KAGhBC,EAAS,GAAGD,GAAe,GAATA,EAAI,GAmD1B,IAFIW,EAAOH,IADCI,GAAsB,EAnHdR,GAsHXK,EAAI,EAAO,GAAJA,EAAQA,GAAK,EACrBI,GAvHMV,GAuH+B,IAAnBQ,GAAQF,EAAK,GAGnCR,EAAa,EAAJQ,EAAQA,EAAS,EAAJA,EAAQA,EAAI,EAAIV,EAAe,GAAKU,GAAI,GAAKI,EACnEZ,EAAS,GAAO,EAAJQ,EAAQV,EAAeU,EAAI,EAAS,EAAJA,EAAQ,GAAKA,EAAI,GAAKA,GAAMI,EAzH5E,GA6HAZ,EAASF,EAAe,GAAG,IA/HbI,EAEK,GA5BLP,EA4Bd,CAoGA,IAFIe,EAAOH,IA9HGZ,GAgILa,EAAI,EAAO,GAAJA,EAAQA,GAAK,EACrBI,GApGYV,GAoGyB,IAAnBQ,GAAQF,EAAK,GACnCR,EAAS7C,WAAWqD,EAAI,IAAIA,EAAI,EAAIV,EAAe,EAAI,GAAKc,EAGhE,IAASJ,EAAI,EAAO,GAAJA,EAAQA,GAAK,EACrBI,GAzGYV,GAyGyB,IAAnBQ,GAAQF,EAAK,GACnCR,EAASQ,EAAI,EAAIV,EAAe,EAAI,GAAG3C,WAAWqD,EAAI,IAAMI,EAvGhE,GAAkB,MAAdC,EAAJ,CAmPA,IAHIC,EAAWC,IAhRDpB,EAiC2BgB,GAgPrCpI,EA0yBMyI,WAAW,IAErBC,EAAU,GACVC,EAAU,EACVC,EAAQ,CAENC,EAAYC,WACd,OAAOJ,GAGLlB,EAAQuB,SAASlK,GAEnB,OAAwD,IAA/C6J,EADM9D,WAAW/F,EAAQ,MACF,EAAIA,EAAQ,EAAM,IAGhDmK,IAAMC,SAASC,EAAK7qB,GACtB,IAAK,IAAI4pB,EAAI,EAAGA,EAAI5pB,EAAQ4pB,GAAK,EAC7BW,IAAiD,IAAlCM,IAAS7qB,EAAS4pB,EAAI,EAAM,KAI7CkB,EAAkBC,WACpB,OAAOT,GAGLU,EAASC,SAASC,GAEpB,IAAIC,EAAW5E,WAAW+D,EAAU,GAChCD,UAAkBc,GAClBd,OAAa,GAGba,IACAb,EAAQc,IAAc,MAAUb,EAAU,GAG9CA,GAAW,IAGf,OAAOC,EAj1BUH,GAEJR,EAAI,EAAGA,EAlP6CwB,EAkPzCprB,OAAiB4pB,GAAK,EAClChtB,EAnPqDwuB,EAmPrCxB,GACpBjI,MAkHQ0J,EAlHmB,GAC3B1J,MAAW/kB,MAAkB+sB,IAiHrB0B,EAvYEtC,IAuRVnsB,QAAW+kB,GAKf,IAASiI,EADL0B,EAAiB,EACL1B,EAAIM,SAAiBN,GAAK,EACtC0B,GAAkBpB,EAASN,GAAT,EAGtB,GAAIjI,MAA4C,EAAjB2J,EAC3B,MAAUhvB,MAAM,0BACZqlB,MACA,IACiB,EAAjB2J,EACA,KASR,IALI3J,MAA2B,GAAsB,EAAjB2J,GAChC3J,MAAW,EAAG,GAIqB,GAAhCA,MAA2B,GAC9BA,KAAc,GAIlB,OAEQ,OAA6C,EAAjB2J,KAGhC3J,MA1TG4J,IA0Tc,KAEb5J,OAA6C,EAAjB2J,KAGhC3J,MA9TG6J,GA8Tc,GA9GoB,IAErCjD,EAAS,EAMb,IAJIkD,EADAC,EAAa,EAEbC,EAAalC,MA4GUS,EA5GJlqB,Q,EACNypB,MA2GUS,EA3GJlqB,QAEd+kB,EAAI,EAAGA,EAyGWmF,EAzGPlqB,OAAiB+kB,GAAK,EAAG,KAErC6G,EAuGmB1B,EAvGAnF,GAAT8G,EACVC,EAsGmB5B,EAtGAnF,GAATgH,EAAyBH,EAOvC,IALAF,EAAanF,SAASmF,EAAYE,GAClCH,EAAalF,SAASkF,EAAYK,GAElCH,EAAO5G,GAAS0E,MAAMmC,GAEbhC,EAAI,EAAGA,EAAI+B,EAAO5G,GAAP,OAAkB6E,GAAK,EACvC+B,EAAO5G,GAAG6E,GAAK,IA8FJjI,EA9FWqK,IAAmBpC,EAAIrB,GASjD,IAPAA,GAAUqD,EAENK,EAAStC,IAAiCmC,GAE1CI,EADUC,EAAaR,EAAO5G,GAAIkH,MAAqB,GAC7CjC,EAAYiC,GAE1BG,EAAOrH,GAAS0E,MAAMwC,MAAqB,GAClCrC,EAAI,EAAGA,EAAIwC,EAAOrH,GAAP,OAAkB6E,GAAK,EACnCyC,EAAWzC,EAAIsC,MAAsBE,EAAOrH,GAAP,OACzCqH,EAAOrH,GAAG6E,GAAkB,GAAZyC,EAAiBH,IAAcG,GAAY,EAKnE,IAASzC,EADL0C,EAAiB,EACL1C,EA8EWM,EA9EPlqB,OAAiB4pB,GAAK,EACtC0C,GA6EuBpC,EA7EIN,GAATmC,EAMtB,IAHInvB,EAAW6sB,MAAM6C,GAGZ1C,EAFLpJ,EAAQ,EAEIoJ,EAAI8B,EAAY9B,GAAK,EACjC,IAAS7E,EAAI,EAAGA,EAsEOmF,EAtEHlqB,OAAiB+kB,GAAK,EAClC6E,EAAI+B,EAAO5G,GAAP,SACJnoB,EAAK4jB,GAASmL,EAAO5G,GAAG6E,GACxBpJ,GAAS,GAKrB,IAASoJ,EAAI,EAAGA,EAAI6B,EAAY7B,GAAK,EACjC,IAAS7E,EAAI,EAAGA,EA6DOmF,EA7DHlqB,OAAiB+kB,GAAK,EAClC6E,EAAIwC,EAAOrH,GAAP,SACJnoB,EAAK4jB,GAAS4L,EAAOrH,GAAG6E,GACxBpJ,GAAS,GA0DrB+L,EArDO3vB,EAvGP,IAhIQqtB,IA0HJuC,GAAO,EACP/H,EAAMyE,EAAe,EACrBuD,EAAW,EACXC,EAAY,EACZC,EAAWhD,IA9HKJ,GAgIX7E,EAAMwE,EAAe,EAAS,EAANxE,EAASA,GAAO,EAI7C,IAFW,GAAPA,KAAU,IAED,CAET,IAASyE,EAAI,EAAO,EAAJA,EAAOA,GAAK,EAEM,MAA1BC,EAAS3E,GAAKC,EAAMyE,KAEhByD,GAAO,EAEPF,EAAY9vB,WACZgwB,EAAgD,IAAtChwB,EAAK8vB,KAAeD,EAAY,IAGnCE,EAASlI,EAAKC,EAAMyE,KAG3ByD,GAAQA,GAGZxD,EAAS3E,GAAKC,EAAMyE,GAAKyD,GAGR,KAFjB,IAGIF,GAAa,EACbD,EAAW,IAOvB,GAAU,GAFVhI,GAAO+H,IAEQtD,GAAgBzE,EAAK,CAChCA,GAAO+H,EACPA,GAAOA,EACP,QA7MiC,IAK7CzC,EAAqB8C,EAAoB7D,GACzCI,EAAW,KACXF,EAAe,EACfe,EAAa,KACbmB,EAAY,GACZb,EAAQ,CA6TNuC,EAAUC,SAASnwB,GACjBowB,EAqyBKC,SAASrwB,GAAM,IAIxBswB,EAASpE,IAAqBlsB,GAiBlC,MAhBY2tB,CAEN4C,EAAUC,WACZ,OA1uBY/B,GA6uBVrG,EAAYqI,WACd,OAAOH,UAGLI,MAAQC,SAAS5L,GACnB,IAAK,IAAIiI,EAAI,EAAGA,EAAIsD,SAAetD,GAAK,EACpCjI,MAAWuL,EAAOtD,GAAI,KAtzBZqD,CAAWrwB,GACzBwuB,OAAe4B,GACf/C,EAAa,MAGX5tB,EAASmxB,SAAS/I,EAAKC,GACzB,GAAU,EAAND,GAAWyE,GAAgBzE,GAAa,EAANC,GAAWwE,GAAgBxE,EAC7D,MAAUpoB,MAAMmoB,EAAM,IAAMC,GAEhC,OAAO0E,EAAS3E,GAAKC,IAGnB+I,EAAiBC,WACnB,OAAOxE,GAGLyE,EAAOC,WAnRT,IALgC,IAE5BC,EAAe,EACfC,EAAU,EAELlE,EAAI,EAAO,EAAJA,EAAOA,GAAK,EAAG,CAE3BP,GAAS,EAAMO,GAEf,IAAImE,EAAYpE,IAAoBY,IAE3B,GAALX,GAAUiE,EAAeE,KACzBF,EAAeE,EACfD,EAAUlE,GA4QlBP,GAAS,EAxQFyE,KA2QX,OAAOvD,EA0WX4B,SAASA,EAAatB,EAAKmD,GAEvB,GAAyB,oBAAdnD,SACP,MAAUvuB,MAAMuuB,SAAa,IAAMmD,GAGvC,IAAIC,EAAO,WAEP,IADA,IAAI1F,EAAS,EACNA,EAASsC,UAA6B,GAAfA,EAAItC,IAC9BA,GAAU,EAGd,IADA,IAAI0F,EAAWxE,MAAMoB,SAAatC,EAASyF,GAClCpE,EAAI,EAAGA,EAAIiB,SAAatC,EAAQqB,GAAK,EAC1CqE,EAAKrE,GAAKiB,EAAIjB,EAAIrB,GAEtB,OAAO0F,EATA,GAYP1D,EAAQ,CAENpB,EAAQuB,SAASlK,GACnB,OAAOyN,EAAKzN,IAGVwE,EAAYqI,WACd,OAAOY,UAGLC,SAAWC,SAASpzB,GAItB,IAFA,IAAI8vB,EAAUpB,MAAMc,MAAoBxvB,MAAgB,GAE/C6uB,EAAI,EAAGA,EAAIW,MAAmBX,GAAK,EACxC,IAAK,IAAIC,EAAI,EAAGA,EAAI9uB,MAAe8uB,GAAK,EACpCgB,EAAIjB,EAAIC,IAAMuE,IAAYA,IAAY7D,IAAYX,IAAMwE,IAAYrzB,IAAQ8uB,KAIpF,OAAOsC,EAAatB,EAAK,IAGvBhG,EAAMwJ,SAAStzB,GAEjB,GAAwC,EAApCwvB,MAAoBxvB,MACpB,OAAOwvB,EAMX,IAHA,IAAI+D,EAAQF,IAAY7D,IAAY,IAAM6D,IAAYrzB,IAAQ,IAE1D8vB,EAAUpB,MAAMc,OACXX,EAAI,EAAGA,EAAIW,MAAmBX,GAAK,EACxCiB,EAAIjB,GAAKW,IAAYX,GAGzB,IAASA,EAAI,EAAGA,EAAI7uB,MAAe6uB,GAAK,EACpCiB,EAAIjB,IAAMwE,IAAYA,IAAYrzB,IAAQ6uB,IAAM0E,GAIpD,OAAOnC,EAAatB,EAAK,GAAlB,EAAyB9vB,KAGpC,OAAOwvB,EAhaXzB,IAAuByF,SAASC,GAIxB,IADA,IAAIC,EAAO,GACF7E,EAAI,EAAGA,EA2BD4E,EA3BKxuB,OAAY4pB,IAAK,CACjC,IAAI8E,EA0BOF,EA1BIG,WAAe/E,GACf,IAAX8E,EAAiBD,OAAUC,GACX,KAAXA,EACLD,OAAU,IAAQC,GAAY,EAC1B,IAAmB,GAAXA,GACM,MAAXA,GAAiC,OAAZA,EAC5BD,OAAU,IAAQC,GAAY,GAC1B,IAASA,GAAY,EAAK,GAC1B,IAAmB,GAAXA,IAIZ9E,IAIA8E,EAAW,QAAwB,KAAXA,IAAqB,GACpB,KASlBF,EATFG,WAAe/E,IACpB6E,OAAU,IAAQC,GAAY,GAC1B,IAASA,GAAY,GAAM,GAC3B,IAASA,GAAY,EAAK,GAC1B,IAAmB,GAAXA,IAKxB,OAFWD,GAiBf,IAAI5B,EAAsB,CACtB+B,EAAK,EACLC,EAAK,EACLC,EAAK,EACLC,EAAK,GAsBLpF,EAAS,WAkDSqF,WAASpyB,GAEvB,IADA,IAAIqyB,EAAQ,EACG,GAARryB,GACHqyB,GAAS,EACTryB,KAAU,EAEd,OAAOqyB,EAxDS,IAEhBC,EAAyB,CACzB,GACA,CAAC,EAAG,IACJ,CAAC,EAAG,IACJ,CAAC,EAAG,IACJ,CAAC,EAAG,IACJ,CAAC,EAAG,IACJ,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,EAAG,GAAI,GAAI,IACZ,CAAC,EAAG,GAAI,GAAI,GAAI,IAChB,CAAC,EAAG,GAAI,GAAI,GAAI,IAChB,CAAC,EAAG,GAAI,GAAI,GAAI,KAChB,CAAC,EAAG,GAAI,GAAI,GAAI,KAChB,CAAC,EAAG,GAAI,GAAI,GAAI,KAChB,CAAC,EAAG,GAAI,GAAI,GAAI,KAChB,CAAC,EAAG,GAAI,GAAI,GAAI,KAChB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,KACpB,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,KACrB,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,KACrB,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,KACrB,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,KACrB,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,KACrB,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,KACrB,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,KAC1B,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,KAC1B,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,KAC1B,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,KAC1B,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,KAC1B,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,MAM1B3E,EAAQ,CAWN4E,EAAiBC,SAASxyB,GAE5B,IADA,IAAI4pB,EAAI5pB,GAAQ,GAC4B,GAArCoyB,EAAYxI,GAAKwI,EAjBlBK,OAkBF7I,GAlBE6I,MAkBYL,EAAYxI,GAAKwI,EAlB7BK,MAoBN,OAlBWC,OAkBF1yB,GAAQ,GAAM4pB,IAIrB+I,EAAmBC,SAAS5yB,GAE9B,IADA,IAAI4pB,EAAI5pB,GAAQ,GAC4B,GAArCoyB,EAAYxI,GAAKwI,EAzBlBS,OA0BFjJ,GA1BEiJ,MA0BYT,EAAYxI,GAAKwI,EA1B7BS,MA4BN,OAAQ7yB,GAAQ,GAAM4pB,GAGpBkJ,EAAqBC,SAAS5G,GAChC,OAAOmG,EAAuBnG,EAAa,IAGzC6G,EAAkBC,SAAStG,GAE7B,OAAQA,GAEJ,KAlGIuG,EAmGA,OAAO,SAASlG,EAAGC,GAAK,OAAsB,IAAdD,EAAIC,GAAK,GAC7C,KAnGIkG,EAoGA,OAAO,SAASnG,GAAQ,OAAgB,GAATA,EAAI,GACvC,KApGIoG,EAqGA,OAAO,SAASpG,EAAGC,GAAK,OAAgB,GAATA,EAAI,GACvC,KArGIoG,EAsGA,OAAO,SAASrG,EAAGC,GAAK,OAAsB,IAAdD,EAAIC,GAAK,GAC7C,KAtGIqG,EAuGA,OAAO,SAAStG,EAAGC,GAAK,OAAsD,IAA9CtD,WAAWqD,EAAI,GAAKrD,WAAWsD,EAAI,IAAM,GAC7E,KAvGIsG,EAwGA,OAAO,SAASvG,EAAGC,GAAK,OAAoC,GAA5BD,EAAIC,EAAK,EAAKD,EAAIC,EAAK,GAC3D,KAxGIuG,EAyGA,OAAO,SAASxG,EAAGC,GAAK,OAA0C,IAAjCD,EAAIC,EAAK,EAAKD,EAAIC,EAAK,GAAK,GACjE,KAzGIwG,EA0GA,OAAO,SAASzG,EAAGC,GAAK,OAA0C,IAAjCD,EAAIC,EAAK,GAAKD,EAAIC,GAAK,GAAK,GAEjE,QACI,MAAUvtB,MAAM,mBAAqBitB,KAI3C+G,EAA4BC,SAASC,GAEvC,IADA,IAAIn0B,EAAI8vB,EAAa,CAAC,GAAI,GACjBvC,EAAI,EAAGA,EAAI4G,EAAoB5G,GAAK,EACzCvtB,EAAIA,WAAW8vB,EAAa,CAAC,EAAGiC,IAAYxE,IAAK,IAErD,OAAOvtB,GAGLyuB,EAAkBC,SAAS7f,EAAMmE,GACnC,GApJYgc,GAoJRngB,GAAwC,EAAPmE,GAAmB,GAAPA,EAC7C,MAAU/S,MAAM,SAAW4O,EAAO,WAAamE,GAEnD,OAAc,GAAPA,EAAY,EAAI,IAGrBohB,EAAeC,SAAS5H,GAO1B,IAPkC,IAE9BhC,EAAcgC,MACdiF,EAAY,EAIPtJ,EAAM,EAAGA,EAAMqC,EAAarC,GAAO,EACxC,IAAK,IAAIC,EAAM,EAAGA,EAAMoC,EAAapC,GAAO,EAAG,CAK3C,IAL2C,IAEvCiM,EAAY,EACZ/D,EAAO9D,IAAcrE,EAAKC,GAErBK,GAAK,EAAQ,GAALA,EAAQA,GAAK,EAE1B,KAAc,EAAVN,EAAMM,GAAS+B,GAAerC,EAAMM,GAIxC,IAAK,IAAIoE,GAAK,EAAQ,GAALA,EAAQA,GAAK,EAEZ,EAAVzE,EAAMyE,GAASrC,GAAepC,EAAMyE,IAI/B,GAALpE,GAAe,GAALoE,IAIVyD,GAAQ9D,IAAcrE,EAAMM,EAAGL,EAAMyE,KACrCwH,GAAa,GAKT,EAAZA,IACA5C,GAAc,EAAI4C,EAAY,GAO1C,IAASlM,EAAM,EAAGA,EAAMqC,EAAc,EAAGrC,GAAO,EAC5C,IAASC,EAAM,EAAGA,EAAMoC,EAAc,EAAGpC,GAAO,EACxC3jB,EAAQ,EACR+nB,IAAcrE,EAAKC,KAAM3jB,GAAS,GAClC+nB,IAAcrE,EAAM,EAAGC,KAAM3jB,GAAS,GACtC+nB,IAAcrE,EAAKC,EAAM,KAAI3jB,GAAS,GACtC+nB,IAAcrE,EAAM,EAAGC,EAAM,KAAI3jB,GAAS,IACjC,GAATA,GAAuB,GAATA,KACdgtB,GAAa,GAOzB,IAAStJ,EAAM,EAAGA,EAAMqC,EAAarC,GAAO,EACxC,IAASC,EAAM,EAAGA,EAAMoC,EAAc,EAAGpC,GAAO,EACxCoE,IAAcrE,EAAKC,KAClBoE,IAAcrE,EAAKC,EAAM,IAC1BoE,IAAcrE,EAAKC,EAAM,IACzBoE,IAAcrE,EAAKC,EAAM,IACzBoE,IAAcrE,EAAKC,EAAM,KACxBoE,IAAcrE,EAAKC,EAAM,IAC1BoE,IAAcrE,EAAKC,EAAM,KACzBqJ,GAAa,IAKzB,IAASrJ,EAAM,EAAGA,EAAMoC,EAAapC,GAAO,EACxC,IAASD,EAAM,EAAGA,EAAMqC,EAAc,EAAGrC,GAAO,EACxCqE,IAAcrE,EAAKC,KAClBoE,IAAcrE,EAAM,EAAGC,IACxBoE,IAAcrE,EAAM,EAAGC,IACvBoE,IAAcrE,EAAM,EAAGC,IACvBoE,IAAcrE,EAAM,EAAGC,KACtBoE,IAAcrE,EAAM,EAAGC,IACxBoE,IAAcrE,EAAM,EAAGC,KACvBqJ,GAAa,IASzB,IAASrJ,EAFLkM,EAAY,EAEElM,EAAMoC,EAAapC,GAAO,EACxC,IAASD,EAAM,EAAGA,EAAMqC,EAAarC,GAAO,EACpCqE,IAAcrE,EAAKC,KACnBkM,GAAa,GAQzB,OAFA7C,EADYxH,SAAS,IAAMqK,EAAY9J,EAAcA,EAAc,IAAM,EACpD,KAKzB,OAAOyD,EAjOE,GAwOT6D,EAAS,WAMT,IANoB,IAEhByC,EAAgBpH,MAAM,KACtBqH,EAAgBrH,MAAM,KAGjBG,EAAI,EAAO,EAAJA,EAAOA,GAAK,EACxBiH,EAAUjH,GAAK,GAAKA,EAExB,IAASA,EAAI,EAAO,IAAJA,EAASA,GAAK,EAC1BiH,EAAUjH,GAAKiH,EAAUjH,EAAI,GACzBiH,EAAUjH,EAAI,GACdiH,EAAUjH,EAAI,GACdiH,EAAUjH,EAAI,GAEtB,IAASA,EAAI,EAAO,IAAJA,EAASA,GAAK,EAC1BkH,EAAUD,EAAUjH,IAAMA,EA2B9B,MAxBYW,CAENgC,EAAOwE,SAASC,GAElB,GAAQ,EAAJA,EACA,MAAU10B,MAAM,QAAU00B,EAAI,KAGlC,OAAOF,EAAUE,IAGfpH,EAAOqH,SAASD,GAElB,KAAW,EAAJA,GACHA,GAAK,IAGT,KAAY,KAALA,GACHA,GAAK,IAGT,OAAOH,EAAUG,KAxCZ,GAuHT7G,EAAY,WAoQU+G,WAASnI,EAAYC,GACvC,OAAQA,GACJ,KAAK6D,IACD,OAAOsE,EAAkC,GAAlBpI,EAAa,IACxC,KAAK8D,IACD,OAAOsE,EAAkC,GAAlBpI,EAAa,GAAS,GACjD,KAAK8D,IACD,OAAOsE,EAAkC,GAAlBpI,EAAa,GAAS,GACjD,KAAK8D,IACD,OAAOsE,EAAkC,GAAlBpI,EAAa,GAAS,IA1QzD,IAAIoI,EAAiB,CAQjB,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,GAGR,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,IAGR,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,IAGR,CAAC,EAAG,IAAK,IACT,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,GAGR,CAAC,EAAG,IAAK,KACT,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IACnB,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IAGnB,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,IAGR,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,IACR,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IACnB,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IAGnB,CAAC,EAAG,IAAK,IACT,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IACnB,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IACnB,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IAGnB,CAAC,EAAG,IAAK,KACT,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IACnB,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IACnB,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IAGnB,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IACnB,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IACnB,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IACnB,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IAGnB,CAAC,EAAG,IAAK,IACT,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IACnB,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IACnB,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IAGnB,CAAC,EAAG,IAAK,GAAI,EAAG,IAAK,IACrB,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IACnB,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IACnB,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IAGnB,CAAC,EAAG,IAAK,KACT,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IACnB,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IACnB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IAGpB,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KACtB,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IACnB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IAGpB,CAAC,EAAG,IAAK,GAAI,EAAG,IAAK,IACrB,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IACnB,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IACnB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IAGpB,CAAC,EAAG,IAAK,GAAI,EAAG,IAAK,IACrB,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IACnB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IAGpB,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KACtB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IAGpB,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KACtB,CAAC,EAAG,GAAI,GAAI,EAAG,GAAI,IACnB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IAGpB,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KACtB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IAGpB,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KACtB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAGrB,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KACtB,CAAC,GAAI,GAAI,IACT,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IAGpB,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KACtB,CAAC,GAAI,GAAI,IACT,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,IAGT,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KACtB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAGrB,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KACtB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IAGpB,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KACtB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAGrB,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KACvB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IAGpB,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KACtB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAGrB,CAAC,EAAG,IAAK,IAAK,GAAI,IAAK,KACvB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAGrB,CAAC,EAAG,IAAK,IAAK,EAAG,IAAK,KACtB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAGrB,CAAC,EAAG,IAAK,IAAK,GAAI,IAAK,KACvB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAGrB,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KACvB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAGrB,CAAC,GAAI,IAAK,KACV,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAGrB,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KACvB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAGrB,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KACvB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IAGpB,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KACvB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAGrB,CAAC,EAAG,IAAK,IAAK,GAAI,IAAK,KACvB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IAGpB,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KACvB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAGrB,CAAC,EAAG,IAAK,IAAK,GAAI,IAAK,KACvB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAGrB,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KACvB,CAAC,GAAI,GAAI,GAAI,EAAG,GAAI,IACpB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAGrB,CAAC,GAAI,IAAK,IAAK,EAAG,IAAK,KACvB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACrB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,KAUrB5G,EAAQ,CAiBN6G,EAAcC,SAAStI,EAAYC,GAErC,IAAIsI,EAAUJ,EAAgBnI,EAAYC,GAE1C,GAAsB,oBAAXsI,EACP,MAAUh1B,MAAM,6BAA+BysB,EAC3C,sBAAwBC,GAG5BhpB,EAASsxB,SAAiB,EAC1BC,EAAO,GAEX,IAAK,IAAI3H,EAAI,EAAGA,EAAI5pB,EAAQ4pB,GAAK,EAM7B,IANgC,IAE5B7oB,EAAQuwB,EAAY,EAAJ1H,GAChBmC,EAAauF,EAAY,EAAJ1H,EAAQ,GAC7BiC,EAAYyF,EAAY,EAAJ1H,EAAQ,GAEvBC,EAAI,EAAGA,EAAI9oB,EAAO8oB,GAAK,EAAG,CACCgC,QA1CpCtB,EAAQ,GACZA,IAyC4BwB,EAxC5BxB,IAAkBsB,EAwCV0F,OAvCDhH,GA2CP,OAAOgH,IAGX,OAAOhH,EA7SK,GA2XhB,OAAOzB,EAjpCE,I,gCCzPF0I,EAnCA,SAAC,GAAgC,IAA9B9yB,EAA6B,EAA7BA,IAA6B,IAAxBwhB,YAAwB,MAAjB,IAAiB,EACvCuR,EAAgBlmB,aAAiBmmB,KAEjCC,EAAepmB,SAA8B,MA6BnD,OA5BAA,aACE,WACE,IAAMqmB,EAAmBD,EAAaE,QAEtC,GAAKD,EAgBL,OAdAlO,EAAUC,OACR,CACE7L,KAAMpZ,EACN6oB,OAAQ,EAIRnB,QAAS,IACT8B,KAAMuJ,EAAcK,QAAQC,UAC5BtL,WAAY,KACZvG,QAEF0R,GAEK,WACDA,EAAiBI,YACnBJ,EAAiBK,YAAYL,EAAiBI,eAIpD,CAACtzB,EAAKwhB,EAAMuR,IAEP,qBAAK1mB,IAAK4mB,KCsEJO,IAzFmB,SAAC,GAOrB,IANZxzB,EAMW,EANXA,IACAyM,EAKW,EALXA,KACA5L,EAIW,EAJXA,MACA8L,EAGW,EAHXA,SACAD,EAEW,EAFXA,QACAE,EACW,EADXA,oBAEA,IAAKH,EAAM,OAAO,KAClB,IAAMgnB,EAAkBzzB,EAAG,iBAAaA,GAAQ,GAEhD,OACE,eAAC0zB,EAAA,EAAD,CACEvsB,MAAO,cAAC,QAAD,gBACPwsB,QAAS,CACP,cAACC,EAAA,EAAD,CAEExhB,MAAO,cAAC,QAAD,cACPC,SAAO,EACPC,QAAS5F,GAHL,UAMRmnB,iBAAkB,CAChBlnB,GACE,cAACinB,EAAA,EAAD,CAEExhB,MAAO,cAAC,QAAD,oBACPE,QAAS3F,GAFL,UAKR,cAACinB,EAAA,EAAD,CAEExhB,MAAO,cAAC,QAAD,6BACPE,QAAS1F,GAFL,wBAKRH,KAAMA,EACNqnB,eAAgBpnB,EAChBqnB,SAAS,KA1BX,UA4BGlzB,GACC,cAAC,IAAD,UACE,cAACmzB,EAAA,EAAD,UACE,cAAC,QAAD,8KAQJnzB,IAAUb,GAAO,cAACi0B,EAAA,EAAD,KACjBpzB,GAASb,GACT,gCACE,cAAC,IAAD,UACE,cAACg0B,EAAA,EAAD,UACE,cAAC,QAAD,6GAMJ,cAACE,EAAA,EAAD,CAAWl0B,IAAKA,IACfyzB,GACC,qCACE,cAAC,IAAD,UACE,cAACO,EAAA,EAAD,UACE,cAAC,QAAD,mCAGJ,cAAC,IAAD,CAAMG,eAAe,SAArB,SACE,cAAC,EAAD,CAAQn0B,IAAKyzB,EAAiBjS,KAAM,WAI1C,cAAC,IAAD,UACE,cAACwS,EAAA,EAAD,UACE,cAAC,QAAD,2G,iKChGRx3B,EAAKP,IAAgB,MACrBQ,EAAOR,IAAgB,QAiCtB,SAAem4B,EAAtB,oC,4CAAO,WACL/1B,EACAg2B,GAFK,iCAAA12B,EAAA,yDAIAnB,GAAOC,EAJP,iDAQC2C,EAAc3C,EAAK4C,QAAQhB,EAAQwD,kBACnCyyB,EAAS,GATV,cAcAD,EAA2Bxc,UAd3B,sEAYH0c,EAZG,EAYHA,2CACAC,EAbG,EAaHA,kBAEKD,EAfF,sEAiBoBC,EAAkB3c,UAjBtC,2BAiBQ4c,EAjBR,QAkBD,IAAKA,EAASC,uBAAwB,iBAEtC,IAAMC,EAAmBl4B,EAAKQ,SAASw3B,EAASG,UAC1CC,EAAgBp4B,EAAKM,QAAQ43B,GAC7BG,EAA2Br4B,EAAKQ,SACpC03B,EACAE,GAGIE,EAA8B53B,YAClC23B,GACA,SAAAE,GACE,IAAM53B,EACJX,EAAKY,KAAK+B,EAAa41B,GAAqBH,EAC9C,OAAOr4B,EAAGc,WAAWF,MAInB63B,EAAkBx4B,EAAKY,KAC3B+B,EACA21B,EAA8BF,GAGhCJ,EAAS11B,aAAeg2B,EAA8BF,EAEtDP,EAAO1zB,KAAKpE,EAAG0G,SAASgyB,SAAST,EAASG,SAAUK,KA3CnD,saA+CEvyB,QAAQC,IAAI2xB,IA/Cd,+E,sBAsDA,SAASa,EACd92B,EACAg2B,GAEA,IAD8B,EACxBj1B,EAAc3C,EAAK4C,QAAQhB,EAAQwD,kBAEnCuzB,EAA2B,IAAI3yB,IAHP,cAIkB4xB,GAJlB,IAI9B,2BAA4E,CAAC,IAAD,2BAAhE32B,EAAgE,KAApD82B,EAAoD,KAApDA,kBAChBa,EAAU,GAD0D,cAOrEb,EAAkB3c,UAPmD,IAE1E,2BAKiC,CAAC,IAAD,UAJ/BlU,EAI+B,EAJ/BA,aACA5E,EAG+B,EAH/BA,aACAu2B,EAE+B,EAF/BA,QACAV,EAC+B,EAD/BA,SAEK71B,IACHA,EAAetC,EAAKiE,SAAStB,EAAaw1B,IAG5C,IAAMW,EAAsBC,YAAkB7xB,GAC1C4xB,IACFA,EAAoB3V,QAAQ7gB,GAC5Bw2B,EAAoB90B,QAAQ1B,GAE5Bs2B,EAAQC,GAAWv2B,EAEnBV,EAAQI,sBAAsBqhB,YAAYyV,KAnB4B,8BAuB1EH,EAAyBnyB,IAAIvF,EAAU,CACrC23B,aA5B0B,8BAgC9B,OAAOD,EAWF,SAAeK,EAAtB,oC,4CAAO,WACLp3B,EACAX,GAFK,mDAAAC,EAAA,yDAIAnB,GAAOC,EAJP,yCAKI,MALJ,uBAQcD,EAAG0G,SAASC,SAASzF,EAAU,QAR7C,UAQCQ,EARD,kBAUGw3B,EAAUtnB,KAAKC,MAAMnQ,MAGZw3B,EAAQC,YAAyC,SAA3BD,EAAQC,WAAWnjB,IAbrD,iBAcKojB,EAAMn5B,EAAK4C,QAAQ3B,GACnB82B,EAAoB,IAAI/xB,IAC1B8xB,GAA6C,EAhBhD,cAkBqBmB,EAAQG,KAAKC,UAlBlC,IAkBD,4BAAWC,EAAkC,SAC/BT,UACJA,EAAUS,EAAQT,QAClBV,EAAWn4B,EAAK4D,QAAQu1B,EAAKN,GAC7BZ,GAA0BsB,YAC9B33B,EACAu2B,GAEI51B,EAA6B,CACjC2E,aAAc,QACd2xB,UACAV,WACAF,0BAGFF,EAAkBvxB,IAAIqyB,EAASt2B,GAE3B01B,IACFH,GAA6C,IApClD,4CAwCmBmB,EAAQO,QAxC3B,IAwCD,4BAAW1Q,EAAyB,SACxB2Q,YACFZ,EAAU/P,EAAM2Q,UAChBtB,EAAWn4B,EAAK4D,QAAQu1B,EAAKN,GAC7BZ,GAA0BsB,YAC9B33B,EACAu2B,GAEI51B,EAA6B,CACjC2E,aAAc,QACd2xB,UACAV,WACAF,0BAGFF,EAAkBvxB,IAAIsiB,EAAM2Q,UAAWl3B,GAEnC01B,IACFH,GAA6C,IA1DlD,uDA8DM,CACLA,6CACAC,sBAhED,iEAoEHtyB,QAAQrB,MAAR,qDACgDnD,EADhD,yEApEG,kBAuEI,MAvEJ,2D,sBA2EA,IAAMy4B,EAA6D,CACxEC,QAASX,EACTvR,KAAMuR,G,mCC/LFljB,EAAStW,IAAgB,oBACzBiX,EAASX,EAASA,EAAOW,OAAS,KAClCzW,EAAOR,IAAgB,QAQvBo6B,EAAuB,SAAC,GAII,IAHhCzyB,EAG+B,EAH/BA,QACA0yB,EAE+B,EAF/BA,kBACAd,EAC+B,EAD/BA,kBAEA,OACE,cAACe,EAAA,EAAD,CACEC,SAAU,SAAAx3B,GACR,IAAMy3B,EAAoBz3B,EAASgB,IAC7B02B,EAAclB,IACpBkB,EAAYj2B,QAAQg2B,GACpBC,EAAY9W,QAAQnjB,EAAKQ,SAASw5B,IAClCC,EAAYC,UAAU,uBAAwBF,GAE9CH,EAAkB,CAACI,KAErB/yB,aAAcC,EAAQD,gBAKtBizB,EAA2C,sBAG5CC,IAA4Bj0B,KAC7B,YAA+D,IAA5DwC,EAA2D,EAA3DA,KAAmB0xB,GAAwC,EAArDC,YAAqD,EAAxCD,gBAAgBtB,EAAwB,EAAxBA,kBAC9BwB,EAAwB,uCAAG,qEAAAr5B,EAAA,yDAC/BsZ,EAD+B,EAC/BA,KACAggB,EAF+B,EAE/BA,gBACAC,EAH+B,EAG/BA,gBACA74B,EAJ+B,EAI/BA,QACAuF,EAL+B,EAK/BA,QAEKsP,EAP0B,sBAQvB,IAAItV,MAAM,sDARa,cAUzBkgB,EAAa,CAAC,YAChBla,EAAQuzB,gBAAgBrZ,EAAWld,KAAK,mBAEtCxB,EAAc3C,EAAK4C,QAAQhB,EAAQwD,kBACnCu1B,EAAaH,EAAgB54B,EAAS+G,IAAShG,EAE/C0U,EAAgBvB,EAAOwB,mBAhBE,UAiBLb,EAAO2K,eAAe/J,EAAe,CAC7D3M,MAAO8P,EAAK8C,EAAE,sBACd+D,aACAnL,QAAS,CACP,CAAEzV,KAAM+Z,EAAK8C,EAAE,wBAAqBnH,WAAYkkB,IAElDjmB,YAAaumB,IAvBgB,qBAiBzBrZ,EAjByB,EAiBzBA,YAQaA,EAAUzc,OAzBE,0CAyBa,IAzBb,WA2BzB+1B,EAAe56B,EAAK4R,MAAM0P,EAAU,IAAI6X,IAC9CsB,EAAgB74B,EAAS+G,EAAMiyB,GAE3BC,EAA+BvZ,EAAUwZ,MAC3C,SAAA96B,GAAI,OAAKu5B,YAAsB33B,EAAS5B,MAMpC43B,EAA6B,IAAI5xB,MACjC+0B,EAAyBrB,EAAyB/wB,IAtCzB,+BAwCN2Y,GAxCM,kEAwClBrgB,EAxCkB,kBAyCK85B,EAC9Bn5B,EACAX,GA3CyB,SAyCrB82B,EAzCqB,UA+CzBH,EAA2BpxB,IAAIvF,EAAU82B,GAErCA,EAAkBD,6CACpB+C,GAA+B,IAlDR,oJAwDzBG,EAAoB,IAAIh1B,IAC1B2yB,EAA2B,IAAI3yB,KAC/B60B,EA1D2B,qBA2DdrtB,IAAOytB,kBACpBzgB,EAAK8C,EACH,8IA7DyB,kCAkET4d,YAChBt5B,EACA0f,EACA0Z,GArEyB,eAkE3B1Z,EAlE2B,iBAwErBqW,EACJ/1B,EACAg2B,GA1EyB,eAoF/Be,EAA2BD,EACzB92B,EACAg2B,GAtF6B,kBAyFxBtW,EAAUnb,KAAI,SAAAlF,GACnB,IAAMg5B,EAAclB,IACpBkB,EAAYj2B,QAAQhE,EAAKiE,SAAStB,EAAa1B,IAC/Cg5B,EAAY9W,QAAQnjB,EAAKiE,SAAStB,EAAa1B,IAE/C,IAAMk6B,EAAsBH,EAAkBl6B,IAAIG,GAC9C+5B,EAAkB35B,IAAIJ,GACtBA,EACJ,GAAIk6B,EAAqB,CACvB,IAAMC,EAAkBzC,EAAyBt3B,IAC/C85B,GAGEC,GAAmBA,EAAgBxC,SACrCqB,EAAYoB,YACV1pB,KAAKM,UAAU,CACbqpB,yBAA0BF,EAAgBxC,WAMlD,OAAOqB,MA/GsB,iEAAH,sDAmH9B,MAAO,CACLx5B,KAAM,qBAAuBkI,EAC7B2xB,YAAa,qBACbiB,WAAY,SACZC,uBAAwB,YACxB7yB,OACA8yB,wBAAyBlB,EACzBmB,gBAAiB,SAACztB,GAAD,OACf,cAAC,IAAD,CAAMypB,eAAe,SAArB,SACE,cAACiE,EAAA,EAAD,CACE/lB,SAAO,EACPD,MACE1H,EAAM9G,QAAQuzB,eACZ,cAAC,QAAD,iCAEA,cAAC,QAAD,sBAGJ7kB,QAAO,sBAAE,4BAAA3U,EAAA,sEACiBq5B,EAAyB,CAC/C/f,KAAMvM,EAAMuM,KACZ5Y,QAASqM,EAAMrM,QACfC,aAAcoM,EAAMpM,aACpB+5B,mBAAoB3tB,EAAM2tB,mBAC1BpB,gBAAiBvsB,EAAMusB,gBACvBC,gBAAiBxsB,EAAMwsB,gBACvBtzB,QAAS8G,EAAM9G,UARV,OACDE,EADC,OAWP4G,EAAM4rB,kBAAkBxyB,GAXjB,qDA1I0B,YA6J5C+yB,IAA4Bj0B,KAAI,gBAAGwC,EAAH,EAAGA,KAAMowB,EAAT,EAASA,kBAAT,MAAkC,CACnEt4B,KAAK,UAAD,OAAYkI,GAChB2xB,YAAa,gCACbiB,WAAY,SACZC,uBAAwB,QACxB7yB,OACA+yB,gBAAiB,SAACztB,GAAD,OACf,cAAC4tB,EAAA,EAAD,CACE9C,kBAAmBA,EACnBc,kBAAmB5rB,EAAM4rB,kBACzB1yB,QAAS8G,EAAM9G,QACftF,aAAcoM,EAAMpM,aACpB+5B,mBAAoB3tB,EAAM2tB,mBAE1BE,yBAA0B7tB,EAAM8tB,6BAPlC,sBAMsBpzB,UA1KqB,YA+K5CyxB,IAA4Bj0B,KAAI,gBAAGwC,EAAH,EAAGA,KAAMowB,EAAT,EAASA,kBAAT,MAAkC,CACnEt4B,KAAK,kBAAD,OAAoBkI,GACxB2xB,YAAa,+BACbiB,WAAY,aACZ5yB,OACA+yB,gBAAiB,SAACztB,GAAD,OACf,cAAC,EAAD,CACE8qB,kBAAmBA,EACnBc,kBAAmB5rB,EAAM4rB,kBACzB1yB,QAAS8G,EAAM9G,SAHjB,yBAIyBwB,WAMhBwxB,O,gWCtNTtxB,EAAkBC,EAAOD,GAElBmzB,EAAS,SAACC,GACrBzuB,IAAO0uB,mBAEP,IAAMC,EAAe3uB,IAAO4uB,eACtB3uB,EAAQD,IAAOC,QAErB,OACE,cAAC,IAAD,CACEwuB,eAAgBA,EAChBI,yBAA0BF,EAAa,wBACvCG,6BAA8Bxd,IAC9Byd,+BAAgCtc,IAChCuc,+BAAgCrb,IALlC,SAOG,gBAAG3G,EAAH,EAAGA,KAAH,OACC,cAAC,IAAD,CACE2hB,aAAcA,EACdM,iBAAkB,CAChBlX,IACAK,IACAD,KAEF+W,uBAAwBnX,IAP1B,SASG,gBACCoX,EADD,EACCA,6BACAC,EAFD,EAECA,qCACAH,EAHD,EAGCA,iBACAI,EAJD,EAICA,0BACAjB,EALD,EAKCA,mBALD,OAOC,cAAC,IAAD,CACEphB,KAAMA,EACNsiB,eAAgB,SAAC7uB,EAAOmE,EAAWmI,GAAnB,OACd,cAAC,IAAD,CACEtM,MAAOA,EACPmE,UAAWA,EACXmI,eAAgBA,KAGpBwiB,sBAAuB,SAAC9uB,EAAO2B,GAAR,OACrB,cAAC,IAAD,2BAA0B3B,GAA1B,IAAiC2B,IAAKA,MAExCotB,mBAAoB,SAAA/uB,GAAK,OACvB,cAAC,IAAD,CACErM,QAASqM,EAAMrM,QACf0X,cAAerL,EAAMqL,cACrBxJ,qBAAsB7B,EAAM6B,qBAC5BG,QAAShC,EAAMgC,QACfgtB,mBAAoBvqB,IACpBwqB,gBAAiB/pB,IACjBZ,kBAAmBD,OAGvB6qB,6BACE1vB,EAAQ,kBAAM,cAAC,IAAD,KAAkC,KAElDgvB,iBAAkBA,EAClBW,cAAetX,IACfuX,gBAAiBnV,IACjByU,6BAA8BA,EAC9BC,qCACEA,EAEFhB,mBAAoBA,EACpB0B,gBAAiBnD,IACjBoD,wBAAyBC,IACzBC,iBAAkBC,IAAqB,CACrC70B,KACAoU,qBAAsB0gB,IACtBzgB,wBAAyB0gB,IACzBzgB,gBAAiB1P,IAEnBovB,0BAA2BA,Y,sHCxGnC98B,EAAKP,IAAgB,YACrBQ,EAAOR,IAAgB,QACvBD,EAAKC,IAAgB,MAErBqJ,EAAkBC,EAAOD,GAYzBg1B,EAAY79B,EAAK89B,OAAS99B,EAQ1BoM,E,aAaJ,WACEjF,GAGC,IAAD,gCANF42B,iBAAyC,GAMvC,KAQF9oB,iBAAmB,SAAC+oB,GAIlB,IAAMC,EAAuBJ,EAC1BK,UAAUF,GACV95B,QAAQ,MAAO,KAElB,OAAOqpB,OAAO4Q,KAAK,EAAKJ,kBACrB17B,QAAO,SAAApB,GAAQ,OAA+C,IAA3CA,EAASiQ,QAAQ+sB,MACpC93B,KAAI,SAAAlF,GAAQ,MAAK,CAChBA,WACAsC,IAAK,EAAKw6B,iBAAiB98B,QApB/B,KAwBFoV,MAAQ,SAACrW,GACP,IAAIyC,YAAMzC,GAAV,CAKA,IACED,EAAGq+B,WAAWp+B,GACd,MAAOJ,GAEP,OADA6F,QAAQrB,MAAM,SAAWpE,EAAO,aAAeJ,IACxC,EAET,OAAO,IApCP,KAsCFy+B,UAAY,SAACr+B,GACX,QAAIyC,YAAMzC,IAKHD,EAAGc,WAAWb,IA5CrB,KA8CFsW,SAAW,SAACtW,GACV,IACED,EAAGu+B,aAAat+B,GAChB,MAAOJ,GACP6F,QAAQrB,MAAM,YAAcpE,EAAO,aAAeJ,KAlDpD,KAqDF8M,WAAa,WACX,OAAO1M,EAAKY,KAAKrB,EAAG8Y,SAAb,gBAAgC5Y,iBAtDvC,KAwDF8+B,aAAe,SAACpG,GAEd,OAAK,EAAKqG,2BAA6B/7B,YAAM01B,GAAkBA,EAExDn4B,EAAKQ,SAAS23B,IA5DrB,KA8DFsG,YAAc,SAACtG,GACb,OAAOn4B,EAAK4C,QAAQu1B,GAAUj0B,QAAQ,MAAO,MA/D7C,KAiEFw6B,aAAe,SAACt+B,EAAkBu+B,GAChC,OAAIl8B,YAAMrC,GAAkBA,GAEvB,EAAKw+B,WAAWD,KACnBA,EAAgB3+B,EAAK4D,QAAQ+6B,IAExB3+B,EACJ4D,QAAQ+6B,EAAe3+B,EAAKk+B,UAAU99B,IACtC8D,QAAQ,MAAO,OAzElB,KA2EF26B,aAAe,SAACz+B,EAAkBu+B,GAChC,OAAIl8B,YAAMrC,GAAkBA,EAErBJ,EACJiE,SAAS06B,EAAe3+B,EAAKk+B,UAAU99B,IACvC8D,QAAQ,MAAO,MAhFlB,KAkFF06B,WAAa,SAACzG,GACZ,QAAI11B,YAAM01B,KAEc,IAApBA,EAAStzB,SAEVszB,EAAStzB,OAAS,GAA4B,MAAvBszB,EAAS2G,OAAO,IACvC3G,EAAStzB,OAAS,GAA4B,MAAvBszB,EAAS2G,OAAO,MAxF1C,KA2FFrG,SAAW,SAACsG,EAAgBC,GAC1B,GAAIv8B,YAAMs8B,GAER,OAAK,EAAKP,4BAEN/7B,YAAMu8B,IACRv5B,QAAQrB,MAAR,uDACkD26B,EADlD,eAC+DC,EAD/D,QAGO,IAGT,EAAKjB,iBAAiBF,EAAUK,UAAUc,IAASD,GAC5C,IAGT,IACMA,IAAWC,GAAMj/B,EAAGk/B,SAASF,EAAQC,GACzC,MAAOp/B,GAEP,OADA6F,QAAQrB,MAAM,YAAc26B,EAAS,KAAOC,EAAO,aAAep/B,IAC3D,EAET,OAAO,GAjHP,KAmHFs/B,YAAc,SAACva,EAAcwa,GAC3B,IACEp/B,EAAGq/B,eAAeza,EAAMwa,GACxB,MAAOv/B,GAEP,OADA6F,QAAQrB,MAAM,eAAiBugB,EAAO,kBAAoB/kB,IACnD,EAET,OAAO,GA1HP,KA4HF8G,SAAW,SAACie,GACV,IAEE,OADe5kB,EAAGs/B,aAAa1a,GACf/d,WAChB,MAAOhH,GAEP,OADA6F,QAAQrB,MAAM,YAAcugB,EAAO,aAAe/kB,GAC3C,KAlIT,KAqIF0/B,QAAU,SAACt/B,EAAcu/B,GACvBA,EAAMA,EAAI9c,cACV,IAAI+c,EAAS,IAAI32B,EAAGga,aACpB,IAEM9iB,EAAGc,WAAWb,IACRD,EAAG0/B,YAAYz/B,GACjBuF,SAAQ,SAASof,GAEJ,IAAf4a,EAAI16B,SAC2D,IAA/D8f,EAAKlC,cAAcvR,QAAQquB,EAAK5a,EAAK9f,OAAS06B,EAAI16B,SAElD26B,EAAO1c,UAAU9iB,EAAO,IAAM2kB,MAIpC,MAAO/kB,GACP6F,QAAQrB,MAAM,WAAapE,EAAO,IAAMu/B,EAAM,aAAe3/B,GAG/D,OAAO4/B,GAzJP,KA2JFE,WAAa,SAACz+B,GAEZ,IAAM0+B,EAAqB9B,EAAUK,UAAUj9B,GAI/C,KAHoC,EAAK88B,iBACvC4B,GAGA,OAAO,EAIT,IAEE,OADa5/B,EAAG6/B,SAAS3+B,GACb0d,SACZ,MAAO/e,GACP,OAAO,IAzKT+P,KAAK6uB,4BACDr3B,GAAWA,EAAQkF,4BA6KZD,Q,mDC1Nf,gEAEMrM,EAAKP,IAAgB,MACrBqgC,EAAsBje,YAAoB,YAMnCrL,EAAqB,SAAC,GAQV,IAPvBvW,EAOsB,EAPtBA,KACAwW,EAMsB,EANtBA,eACA+C,EAKsB,EALtBA,UAMMumB,EAAWD,IACjB,OAAO,IAAI55B,SAAQ,SAACrC,EAASiN,GAC3B,IAAK9Q,IAAO+/B,EAAU,OAAOjvB,EAAO,IAAI1P,MAAM,yBAE9C,IAAMq+B,EAASz/B,EAAGggC,kBAAkBvpB,GAC9BwpB,EAAUF,EAAS,MAAO,CAC9BG,KAAM,CAAEnX,MAAO,KAGjB0W,EAAOp0B,GAAG,SAAS,WACjB,IAAM80B,EAAWF,EAAQG,UAIzB,GAHA16B,QAAQ26B,IAAR,6BACwB5pB,EADxB,aAC2C0pB,EAD3C,kBAGI3mB,GAAa2mB,EAAW3mB,EAAW,CACrC,IAAM8mB,EAAoBjV,KAAKkV,MAAMJ,EAAQ,KAC7CrvB,EACE,IAAI1P,MAAJ,6BACwBk/B,EADxB,oDACqF9mB,EAAS,IAD9F,UAMJ3V,EAAQ4S,MAGVwpB,EAAQ50B,GAAG,SAAS,SAAAE,GAClBuF,EAAOvF,MAGT00B,EAAQO,KAAKf,GAEbQ,EAAQQ,UAAUxgC,GAAM,GAExBggC,EAAQS,gB,iCCrDZ,8CACM5gC,EADN,MACiBL,GAAgB,YAC3BM,EAAcD,EAAWA,EAASC,YAAc,KAOzC4Y,EAAkB,SAC7BhV,EACA+U,EACA3W,GAEA,OAAKhC,GAELA,EAAYqL,mBAAmB,8BAC/BrL,EAAYqL,mBAAmB,0BAExB,IAAIlF,SAAQ,SAACrC,EAASiN,GAC3B/Q,EAAYsL,GACV,8BACA,SAACC,EAAOq1B,EAAqBC,GAC3B7+B,EAAW4+B,EAAqBC,MAGpC7gC,EAAYsL,GAAG,0BAA0B,SAACC,EAAOC,GAC/C,GAAIA,EAAK,OAAOuF,EAAOvF,GACvB1H,OAEF9D,EAAY8L,KAAK,oBAAqBlI,EAAe+U,OAhB9BxS,QAAQ4K,OAAO,sC,8IC8G7B+vB,EAAU,SACrB9gB,EADqB,GAOF,IAJjB+gB,EAIgB,EAJhBA,6BACAC,EAGgB,EAHhBA,0BACAC,EAEgB,EAFhBA,gBA+CF,OApCsB,SAAhBC,EACJC,EACAC,GAEA,QAAwBzpB,IAApBspB,GAAiCG,GAASH,EAC5C,OAAO96B,QAAQrC,UAGjB,GAAsB,OAAlBq9B,GAAmD,kBAAlBA,EAA4B,CAC/D,IAAM9C,EAAO5Q,OAAO4Q,KAAK8C,GACzB,GAAI9C,EACF,OAAOl4B,QAAQC,IACbi4B,EAAKh4B,KAAI,SAAAg7B,GACP,IAAMC,EArBI,SAACthB,GACnB,OAA6C,IAAzCA,EAAO+gB,GACF/gB,EAGF,KAgBmBuhB,CAAYJ,EAAcE,IAC5C,OAAIC,EACKN,EAA0BM,EAAUE,aAAat1B,MACtD,SAAAu1B,GAGE,OAFAN,EAAcE,GAAuBI,EAE9BP,EACLC,EAAcE,GACdD,EAAQ,MAMTF,EAAcC,EAAcE,GAAsBD,EAAQ,OAEnEl1B,MAAK,eAIX,OAAO/F,QAAQrC,UAGVo9B,CAAclhB,EAAQ,IA2BlB0hB,EAAqC,SAACC,GACjD,IAAMC,EAA4B,GAElC,OAAO,SAAC5hB,EAAgB6hB,GACtB,IAAMC,EAAW9hB,EAAO2hB,GACxB,GAAwB,kBAAbG,EACT,MAAM,IAAIzgC,MAAJ,mBAAsBsgC,EAAtB,qBAGRC,EAA0BC,GACxBD,EAA0BC,IAAqB,GACjD,IAAMr5B,EAAU5H,YACd0e,IAAMwiB,IACN,SAAAnhC,GAAI,QAAMihC,EAA0BC,GAAkBlhC,MAGxD,OADAihC,EAA0BC,GAAkBr5B,IAAW,EAChDA,ICxNLvI,EAAKP,IAAgB,MACrBQ,EAAOR,IAAgB,QACvBsW,EAAStW,IAAgB,oBACzBiX,EAASX,EAASA,EAAOW,OAAS,KAElCiL,EAAe,SAAC3B,GACpB,OAAKhgB,EAEE,IAAIkG,SAAQ,SAACrC,EAASiN,GAC3B9Q,EAAG2G,SAASqZ,EAAU,CAAEyB,SAAU,SAAU,SAAClW,EAAK7J,GAChD,GAAI6J,EAAK,OAAOuF,EAAOvF,GAEvB,IACE,IAAMmW,EAAa9P,KAAKC,MAAMnQ,GAC9B,OAAOmC,EAAQ6d,GACf,MAAO9D,GACP,OAAO9M,EAAOkP,EAAW,0CAVf9Z,QAAQ4K,OAAO,iCAgBpBgxB,EAAmB,WAC9B,IAAKprB,EAAQ,OAAOxQ,QAAQ4K,OAAO,iBACnC,IAAMwG,EAAgBvB,EAAOwB,mBAE7B,OAAOb,EACJ2K,eAAe/J,EAAe,CAC7B3M,MAAO,iBACP2W,WAAY,CAAC,YACb5P,QACE,kFACFyE,QAAS,CAAC,CAAEzV,KAAM,qBAAsB0V,WAAY,CAAC,YAEtDnK,MAAK,YAAoB,IAAjBsV,EAAgB,EAAhBA,UACP,OAAKA,GAAcA,EAAUzc,OACtB,CAAEhC,eAAgBye,EAAU,IADS,SAKrCwgB,EAAS,SACpBjgC,GAIA,IAAMZ,EAAWY,EAAagB,eACxBF,EAAc3C,EAAK4C,QAAQ3B,GACjC,OAAOygB,EAAazgB,GAAU+K,MAAK,SAAA8T,GACjC,OAAO8gB,EAAQ9gB,EAAQ,CACrBghB,0BAA2B,SAAAiB,GACzB,OAAOrgB,EAAa1hB,EAAKY,KAAK+B,EAAao/B,GAAiB,UAE9DlB,6BAA8B,8BAI9BE,gBAAiB,IAChB/0B,MAAK,WACN,MAAO,CAAErF,QAASmZ,UAKXkiB,EAAW,uCAAG,WACzBngC,EACAogC,GAFyB,qBAAA/gC,EAAA,yDAInBD,EAAWY,EAAagB,eACxBq/B,EAAejhC,EAAW,aAC5BlB,EAAGc,WAAWqhC,GANO,oBAOlBD,EAPkB,0CAQd,GARc,mBAWfE,EAAgBpiC,EAAG6/B,SAASsC,GAAcE,MAAMC,UAChDC,EAAWviC,EAAG6/B,SAAS3+B,GAAUmhC,MAAMC,YAKzCF,EAAgBG,EAAW,KAjBV,2CAkBZ,GAlBY,iEAqBrB78B,QAAQrB,MAAM,0CAAd,MArBqB,mBAsBd,GAtBc,0CA0BlB,GA1BkB,0DAAH,wDA6BXm+B,EAAgB,SAAC1gC,GAC5B,OAAOoE,QAAQrC,QAAR,2BACF/B,GADE,IAELgB,eAAgBhB,EAAagB,eAAiB,gB,yBCrF5C9C,EAAKP,IAAgB,YACrBQ,EAAOR,IAAgB,QACvBsW,EAAStW,IAAgB,oBACzBiX,EAASX,EAASA,EAAOW,OAAS,KAElC+rB,EAAmB,SAACvhC,EAAkBwhC,GAC1C,IAAMhzB,EAAOe,YAAYC,MACzB,OAAO,IAAIxK,SAAQ,SAACrC,EAASiN,GAC3B9Q,EAAG2G,SAASzF,EAAU,CAAEugB,SAAU,SAAU,SAAClW,EAAK3E,GAChD,GAAI2E,EAAK,OAAOuF,EAAOvF,GAEP,KAAZ3E,GACFkK,EAAO,IAAI1P,MAAJ,+CAELwF,IAAY87B,GACd5xB,EACE,IAAI1P,MAAJ,6EAKJ,IAAMuhC,EAAmBlyB,YAAYC,MAAQhB,EAC7ChK,QAAQyG,KAAR,mBACcjL,EADd,uBACqCyhC,EAAiBC,UADtD,QAGA/+B,WAKOg/B,EAAiB,uCAAG,WAC/Bj8B,EACA1F,GAF+B,SAAAC,EAAA,yDAI1BnB,EAJ0B,sBAIhB,IAAIoB,MAAM,gCAJM,UAKf,KAAZwF,EAL2B,sBAMvB,IAAIxF,MAAM,mDANa,uBAQzBpB,EAAGgE,UAAU/D,EAAK4C,QAAQ3B,IARD,uBAUzBlB,EAAGyf,UAAUve,EAAU0F,GAVE,wBAWzB67B,EAAiBvhC,EAAU0F,GAXF,4CAAH,wDAcxBk8B,EAA8B,uCAAG,WACrC/iB,EACA7e,GAFqC,eAAAC,EAAA,6DAI/ByF,EAAUgL,KAAKM,UAAU6N,EAAQ,KAAM,GAJR,SAK/B8iB,EAAkBj8B,EAAS1F,GALI,2CAAH,wDAQ9B6hC,EAAoB,SACxBlhC,EACAX,EACA0B,GAEA,IFgHyBogC,EEhHnBC,EAA0B1iB,YAAoB1e,GACpD,GAAIA,EAAQqhC,kBAAmB,CAC7B,IAAMC,EFpCW,SACnBpjB,EADmB,GAQkB,IALnCqjB,EAKkC,EALlCA,cACAC,EAIkC,EAJlCA,0BACAC,EAGkC,EAHlCA,YACAxC,EAEkC,EAFlCA,6BAGIqC,EAAiB,GACjBI,EAAkB,SAAClC,EAAWthB,GAAuB,IAAD,EAMxD,OALAojB,EAAe/+B,KAAK,CAClBi9B,YACAthB,WAGK,EAAP,iBACG+gB,GAA+B,GADlC,4BAEeO,GAFf,GA8DF,OAxDoB,SAAdmC,EACJtC,EACAuC,EACA7B,GAEA,GAAsB,OAAlBV,GAAmD,kBAAlBA,EACnC,GAAI3S,MAAMmV,QAAQxC,GAChB,IAAK,IAAI5b,KAAS4b,EAAe,CAC/B,IAAMyC,EAAWF,EAAcL,EAAgB,IAC/C,GAAIE,EAAYK,GAAW,CACzB,IAAMnC,EAAgBN,EAAc5b,GAC9B5kB,EAAO2iC,EACX7B,EACAI,GAEIgC,EAAgBhC,EAAmBwB,EAAgB1iC,EAEzDwgC,EAAc5b,GAASie,EACrBK,EACApC,GAGFgC,EAAYhC,EAAemC,EAAUC,OAChC,CACL,IAAMA,EAAgBhC,EAAmBwB,EAAgB9d,EAEzDke,EAAYtC,EAAc5b,GAAQqe,EAAUC,SAIhD,IAAK,IAAIlC,KAAgBR,EAAe,CACtC,IAAM2C,EAAeJ,EAAcL,EAAgB1B,EAC7CoC,EACJlC,EAAmBwB,EAAgB1B,EACrC,GAAI4B,EAAYO,GAAe,CAC7B,IAAMrC,EAAgBN,EAAcQ,GAEpCR,EAAcQ,GAAgB6B,EAC5BO,EACAtC,GAGFgC,EAAYhC,EAAeqC,EAAcC,QAEzCN,EACEtC,EAAcQ,GACdmC,EACAC,IAQZN,CAAYzjB,EAAQ,GAAI,IACjBojB,EE1CkBY,CAAMd,EAAyB,CACpDG,cAAe,IACfC,0BAA2B5B,EAAmC,QAC9D6B,aF2GqBN,EE1GnB,IAAI//B,IAAI,CACN,aACA,qBACA,oBACA,aACA,iCFsGD,SAAChD,GAAD,OAAkB+iC,EAAMjiC,IAAId,KEnG/B6gC,6BAA8B,gCAGhC,OAAO56B,QAAQC,IACbg9B,EAAe/8B,KAAI,SAAAo7B,GACjB,OAAOsB,EACLtB,EAAczhB,OACd9f,EAAKY,KAAK+B,EAAa4+B,EAAcH,WAAa,SAClDj0B,OAAM,SAAA7B,GAEN,MADA7F,QAAQrB,MAAM,kCAAmCkH,GAC3CA,SAGVU,MAAK,WACL,OAAO62B,EACLG,EACA/hC,GACAkM,OAAM,SAAA7B,GAEN,MADA7F,QAAQrB,MAAM,qCAAsCkH,GAC9CA,QAIV,OAAOu3B,EACLG,EACA/hC,GACAkM,OAAM,SAAA7B,GAEN,MADA7F,QAAQrB,MAAM,+BAAgCkH,GACxCA,MAKCgO,EAAgB,SAC3B1X,EACAC,GAKA,IAAMZ,EAAWY,EAAagB,eACxB4N,EAAMszB,KAAKtzB,MACjB,IAAKxP,EACH,OAAOgF,QAAQ4K,OACb,6DAIJ,IAAMkT,EAAe,2BAChBliB,GADgB,IAEnBpB,KAAMmB,EAAQkC,UACdiV,OAAQnX,EAAQoiC,iBAChBC,iBAAkBxzB,IAGd9N,EAAc3C,EAAK4C,QAAQ3B,GACjC,OAAO6hC,EAAkBlhC,EAASX,EAAU0B,GAAaqJ,MAAK,WAC5D,MAAO,CAAEk4B,UAAU,EAAMriC,aAAckiB,OAI9BogB,EAA6B,uCAAG,qCAAAjjC,EAAA,2DAC3CU,QACAC,EAF2C,EAE3CA,aAOMuS,EAAcvS,EAAeA,EAAagB,eAAiB,GAC3DwU,EAAgBvB,EAAOwB,mBACvB8sB,EAAoB,CACxBhwB,cACA8B,QAAS,CAAC,CAAEzV,KAAM,qBAAsB0V,WAAY,CAAC,WAGlDM,EAhBsC,sBAiBnC,IAAItV,MAAM,eAjByB,UAmBrCF,EAAWwV,EAAO4tB,mBAAmBhtB,EAAe+sB,GAnBf,yCAqBlC,CAAEE,eAAgB,OArBgB,gCAwBpC,CACLA,eAAgB,CACdzhC,eAAgB5B,KA1BuB,4CAAH,sDA+B7Bua,EAAe,uCAAG,WAC7B5Z,EACA0iC,EACAn9B,GAH6B,mBAAAjG,EAAA,yDAaxBojC,EAbwB,sBAcrB,IAAInjC,MAAM,+CAdW,UAevBF,EAAWqjC,EAAezhC,eAfH,sBAiBrB,IAAI1B,MAAM,gDAjBW,cAmB7BgG,EAAQo9B,gBAEFxgB,EAAkB,CACtBlhB,eAAgB5B,EAChBR,KAAMmB,EAAQkC,UACdiV,OAAQnX,EAAQoiC,iBAChBC,iBAAkBF,KAAKtzB,OAzBI,SA6BvBtJ,EAAQq9B,gBAAgB,CAAEzgB,oBA7BH,cAgCvBphB,EAAc3C,EAAK4C,QAAQ3B,GACjCW,EAAQ6iC,eAAexjC,GAjCM,UAmCvB6hC,EAAkBlhC,EAASX,EAAU0B,GAnCd,iCAoCtB,CACLuhC,UAAU,EACVriC,aAAckiB,IAtCa,4CAAH,0DA0Cf2gB,EAAoB,SAC/B9iC,EACAC,GAEA,IAAMqgC,EAAergC,EAAagB,eAAiB,YACnD,OAAO+/B,EAAkB+B,YAAgB/iC,GAAUsgC,GAAc/0B,OAC/D,SAAA7B,GAEE,MADA7F,QAAQrB,MAAR,0BAAiC89B,EAAjC,KAAkD52B,GAC5CA,MAKCs5B,EAAuB,SAACxgC,GAAD,OAClC,iGAGIygC,EAA0B,0CAC1BC,EAAyB,O,iBC1OhB10B,MAAM20B,MAAK,SAAA92B,GAAK,OAC7B,cAAC+2B,EAAA,EAAD,2BAAa/2B,GAAb,IAAoBg3B,QAAQ,YAAYztB,MAAO,CAAEuV,KAAM,QAAvD,SACE,sBACE1B,EAAE,0QACF6Z,OAAO,eACPC,YAAY,MACZC,cAAc,QACdC,eAAe,gB,mBC2BL,KACd7f,aAAc,YACd/kB,KAAM,qBACN6kC,WAAY,SAAAr3B,GAAK,OAAI,cAACs3B,EAAD,CAAUC,SAAUv3B,EAAM8W,QAC/C0gB,gCAAiC,SAACtJ,GAChC,OAAKA,EAAauJ,MACbvJ,EAAauJ,KAA0B7gC,OAErC,CACLhC,eAAgBs5B,EAAauJ,KAA0B,IAJL,MAOtDC,wCFsMqD,SAAC,GAUjD,IATLC,EASI,EATJA,YACAtB,EAQI,EARJA,eACAuB,EAOI,EAPJA,kBACAC,EAMI,EANJA,yBAOMC,EAAazB,EACftkC,EAAK4C,QAAQ0hC,EAAezhC,gBAC5BijC,GAEA,GACEE,EAAkBJ,EAzBK,SAACI,GAAD,OAC5BA,EAAgBnhC,OAAS,IACtBmhC,EAAgBC,UAAU,EAAG,KAC7BD,GAED9hC,QAAQ2gC,EAAyB,KACjC3gC,QAAQ4gC,EAAwB,KAChCoB,OAmBCC,CAAuBP,GAAe,QACtC,YAOJ,OANKtB,GACHuB,EAAkB,CAChBhjC,eAAgB7C,EAAKY,KAAKmlC,EAAYC,KAKxC,cAACI,EAAA,EAAD,CACE7xB,WAAS,EACTJ,MAAO4xB,EACP1xB,SAAU,SAAAgyB,GAAa,OACrBR,EAAkB,CAChBhjC,eAAgB7C,EAAKY,KAAKylC,EAAeL,MAG7C9xB,KAAK,iBEvOToyB,iBAAkB,iBAAO,CACvBzE,mBACAC,SACAE,cACA1oB,gBACA6qB,gCACA3oB,kBACAkpB,oBACAnC,gBACAgE,oBAAqB,SAACniC,GACpB,MAAM,CAAC,yIAETwgC,yBAEF4B,yBAA0B,kBAAM,gBAC9B5kC,EAD8B,EAC9BA,QACAW,EAF8B,EAE9BA,SACAiY,EAH8B,EAG9BA,KACAisB,EAJ8B,EAI9BA,gBACAC,EAL8B,EAK9BA,8BACAC,EAN8B,EAM9BA,WAN8B,MAO1B,CACJ,CACEhxB,MAAO6E,EAAK8C,EAAE,oBACdspB,MAAO,kBAAM/kB,YAAmB,CAAEjgB,UAASW,eAE7C,CACEoT,MAAO6E,EAAK8C,EAAE,kBACdspB,MAAO,kBAAM3kB,YAAiB,CAAErgB,UAASW,eAE3C,CACEoT,MAAO6E,EAAK8C,EAAE,uBACdspB,MAAO,WACL1kB,YAAqB,CAAEtgB,UAASW,aAChCokC,EAAW,CACTl1B,QAAS,cAAC,QAAD,mDAIf,CAAEyC,KAAM,aACR,CACEyB,MAAO6E,EAAK8C,EAAE,0CACdupB,QAASzM,IAA4Bj0B,KACnC,gBAAGm0B,EAAH,EAAGA,YAAaD,EAAhB,EAAgBA,eAAgBtB,EAAhC,EAAgCA,kBAAhC,MAAyD,CACvDpjB,MAAO6E,EAAK8C,EAAEgd,GACdsM,MAAM,WAAD,4BAAE,sBAAA1lC,EAAA,sEACCmhB,YAAoB,CACxBzgB,UACAuU,WAAYkkB,EACZ/X,eAAgByW,IAJb,OAML0N,IANK,2CAAF,kDAAC,QAWZ,CACE9wB,MAAO6E,EAAK8C,EAAE,2CACdspB,MAAO,WACLtjB,YAAkC,CAAE1hB,YAGpC8kC,IAGAD","file":"static/js/local-app.91bfb8c9.chunk.js","sourcesContent":["// @flow\nimport optionalRequire from './OptionalRequire';\nconst os = optionalRequire('os');\n\nexport const getUID = () => {\n  try {\n    return os.userInfo().uid;\n  } catch (e) {\n    return '';\n  }\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport PromisePool from '@supercharge/promise-pool';\nimport { retryIfFailed } from '../../Utils/RetryIfFailed';\nimport newNameGenerator from '../../Utils/NewNameGenerator';\nimport { type FileMetadata } from '../index';\nimport {\n  extractFilenameWithExtensionFromProductAuthorizedUrl,\n  isProductAuthorizedResourceUrl,\n} from '../../Utils/GDevelopServices/Shop';\nimport {\n  extractFilenameWithExtensionFromPublicAssetResourceUrl,\n  isPublicAssetResourceUrl,\n} from '../../Utils/GDevelopServices/Asset';\nimport {\n  isBlobURL,\n  isURL,\n  parseLocalFilePathOrExtensionFromMetadata,\n} from '../../ResourcesList/ResourceUtils';\nimport { sanitizeFilename } from '../../Utils/Filename';\nimport { extractFilenameFromProjectResourceUrl } from '../../Utils/GDevelopServices/Project';\nimport axios from 'axios';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\n\ntype Options = {|\n  project: gdProject,\n  fileMetadata: FileMetadata,\n  onProgress: (number, number) => void,\n|};\n\nconst generateUnusedFilepath = (\n  basePath: string,\n  alreadyUsedFilePaths: Set<string>,\n  filename: string\n) => {\n  const extension = path.extname(filename);\n  const filenameWithoutExtension = path.basename(filename, extension);\n  const name = newNameGenerator(filenameWithoutExtension, name => {\n    const tentativePath = path.join(basePath, name) + extension;\n    return (\n      fs.existsSync(tentativePath) || alreadyUsedFilePaths.has(tentativePath)\n    );\n  });\n  return path.join(basePath, name) + extension;\n};\n\nconst downloadBlobToLocalFile = async (\n  blobUrl: string,\n  filePath: string\n): Promise<void> => {\n  if (!ipcRenderer) throw new Error('Not supported');\n\n  const response = await axios.get(blobUrl, {\n    responseType: 'arraybuffer',\n  });\n  const arrayBuffer = response.data;\n\n  await ipcRenderer.invoke(\n    'local-file-save-from-arraybuffer',\n    arrayBuffer,\n    filePath\n  );\n};\n\nexport const moveUrlResourcesToLocalFiles = async ({\n  project,\n  fileMetadata,\n  onProgress,\n}: Options) => {\n  if (!fs || !ipcRenderer) throw new Error('Unsupported');\n\n  // Get all resources to download.\n  const resourcesManager = project.getResourcesManager();\n  const allResourceNames = resourcesManager.getAllResourceNames().toJSArray();\n  const resourceToFetchNames = allResourceNames.filter(resourceName => {\n    const resource = resourcesManager.getResource(resourceName);\n\n    return isURL(resource.getFile());\n  });\n\n  const projectPath = path.dirname(fileMetadata.fileIdentifier);\n  const baseAssetsPath = path.join(projectPath, 'assets');\n  const downloadedFilePaths = new Set<string>();\n  const erroredResources = [];\n\n  let fetchedResourcesCount = 0;\n\n  await PromisePool.withConcurrency(50)\n    .for(resourceToFetchNames)\n    .process(async resourceName => {\n      const resource = resourcesManager.getResource(resourceName);\n\n      const url = resource.getFile();\n      if (isBlobURL(url)) {\n        try {\n          const {\n            localFilePath,\n            extension,\n          } = parseLocalFilePathOrExtensionFromMetadata(resource);\n          const downloadedFilePath = localFilePath\n            ? path.resolve(projectPath, localFilePath)\n            : generateUnusedFilepath(\n                baseAssetsPath,\n                downloadedFilePaths,\n                sanitizeFilename(resource.getName() + (extension || ''))\n              );\n\n          await fs.ensureDir(baseAssetsPath);\n          await downloadBlobToLocalFile(url, downloadedFilePath);\n          resource.setFile(\n            path.relative(projectPath, downloadedFilePath).replace(/\\\\/g, '/')\n          );\n        } catch (error) {\n          erroredResources.push({ resourceName, error });\n        }\n      } else {\n        let filename;\n        if (isProductAuthorizedResourceUrl(url)) {\n          // Resource is a private asset.\n          filename = extractFilenameWithExtensionFromProductAuthorizedUrl(url);\n        } else if (isPublicAssetResourceUrl(url)) {\n          // Resource is a public asset.\n          filename = extractFilenameWithExtensionFromPublicAssetResourceUrl(\n            url\n          );\n        } else {\n          // Resource is a project resource or a generic url.\n          filename = extractFilenameFromProjectResourceUrl(url);\n        }\n\n        // Find a new file for the resource to download.\n        const downloadedFilePath = generateUnusedFilepath(\n          baseAssetsPath,\n          downloadedFilePaths,\n          filename\n        );\n        downloadedFilePaths.add(downloadedFilePath);\n\n        try {\n          await retryIfFailed({ times: 2 }, async () => {\n            await fs.ensureDir(baseAssetsPath);\n            await ipcRenderer.invoke(\n              'local-file-download',\n              url,\n              downloadedFilePath\n            );\n            resource.setFile(\n              path.relative(projectPath, downloadedFilePath).replace(/\\\\/g, '/')\n            );\n          });\n        } catch (error) {\n          erroredResources.push({ resourceName, error });\n        }\n      }\n\n      onProgress(fetchedResourcesCount++, resourceToFetchNames.length);\n    });\n\n  return {\n    erroredResources,\n  };\n};\n","// @flow\nimport {\n  type ResourceExternalEditor,\n  type ExternalEditorInput,\n  type ExternalEditorOutput,\n  type ExternalEditorBase64Resource,\n  type EditWithExternalEditorOptions,\n  readMetadata,\n  saveBlobUrlsFromExternalEditorBase64Resources,\n  freeBlobsAndUpdateMetadata,\n  patchExternalEditorMetadataWithResourcesNamesIfNecessary,\n} from './ResourceExternalEditor';\nimport { sendExternalEditorOpened } from '../Utils/Analytics/EventSender';\nimport { t } from '@lingui/macro';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport { isBlobURL, isURL } from './ResourceUtils';\nimport {\n  convertBlobToDataURL,\n  downloadUrlsToBlobs,\n  type ItemResult,\n} from '../Utils/BlobDownloader';\nimport { type ResourceKind } from './ResourceSource';\n\nconst path = optionalRequire('path');\nconst fs = optionalRequire('fs');\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\n/**\n * Ask Electron main process to open a window for the specified editor,\n * then wait for the editor to be closed and pass the results.\n */\nconst openAndWaitForExternalEditorWindow = async (\n  editorName: 'piskel' | 'yarn' | 'jfxr',\n  externalEditorInput: ExternalEditorInput\n): Promise<?ExternalEditorOutput> => {\n  if (!ipcRenderer) throw new Error('Not supported.');\n\n  const externalEditorOutput = await ipcRenderer.invoke(\n    `${editorName}-load`,\n    externalEditorInput\n  );\n  return externalEditorOutput;\n};\n\n/**\n * Download (or read locally) resources and prepare them to be edited\n * by an external editor.\n */\nexport const downloadAndPrepareExternalEditorBase64Resources = async ({\n  project,\n  resourceNames,\n}: {|\n  project: gdProject,\n  resourceNames: Array<string>,\n|}): Promise<Array<ExternalEditorBase64Resource>> => {\n  type ResourceToDownload = {|\n    resourceName: string,\n    url: string,\n  |};\n\n  type ResourceToReadLocally = {|\n    resourceName: string,\n    localFilePath: string,\n  |};\n\n  const projectPath = path.dirname(project.getProjectFile());\n  const urlsToDownload: Array<ResourceToDownload> = [];\n  const filesToRead: Array<ResourceToReadLocally> = [];\n  const resourcesManager = project.getResourcesManager();\n  resourceNames.forEach(resourceName => {\n    if (!resourcesManager.hasResource(resourceName)) return;\n\n    const resource = resourcesManager.getResource(resourceName);\n    const url = resource.getFile();\n    if (isURL(url)) {\n      if (isBlobURL(url)) {\n        console.error('Unsupported blob URL for a resource - ignoring it.');\n      } else {\n        urlsToDownload.push({\n          url,\n          resourceName,\n        });\n      }\n    } else {\n      // This resource is a local file.\n      filesToRead.push({\n        localFilePath: url,\n        resourceName,\n      });\n    }\n  });\n\n  const downloadedBlobs: Array<\n    ItemResult<ResourceToDownload>\n  > = await downloadUrlsToBlobs({\n    urlContainers: urlsToDownload,\n    onProgress: (count, total) => {},\n  });\n\n  const resourcesToDataUrl = new Map<\n    string,\n    {|\n      dataUrl: string,\n      localFilePath?: string,\n    |}\n  >();\n  await Promise.all(\n    downloadedBlobs.map(async ({ error, blob, item }) => {\n      if (blob) {\n        try {\n          resourcesToDataUrl.set(item.resourceName, {\n            dataUrl: await convertBlobToDataURL(blob),\n          });\n        } catch (error) {\n          console.error(\n            `Unable to read data from resource \"${\n              item.resourceName\n            }\" - ignoring it.`,\n            error\n          );\n        }\n      }\n    })\n  );\n  await Promise.all(\n    filesToRead.map(async ({ localFilePath, resourceName }) => {\n      try {\n        const content = await fs.promises.readFile(\n          path.resolve(projectPath, localFilePath)\n        );\n\n        resourcesToDataUrl.set(resourceName, {\n          localFilePath,\n          dataUrl: 'data:text/plain;base64,' + content.toString('base64'),\n        });\n      } catch (error) {\n        console.error(\n          `Unable to read local file \"${localFilePath}\" - ignoring it.`,\n          error\n        );\n      }\n    })\n  );\n\n  return resourceNames.map(resourceName => {\n    const resourceData = resourcesToDataUrl.get(resourceName);\n    if (!resourceData)\n      return {\n        name: resourceName,\n        dataUrl: '',\n      };\n\n    const { localFilePath, dataUrl } = resourceData;\n    return {\n      name: resourceName,\n      dataUrl,\n      localFilePath,\n    };\n  });\n};\n\n/**\n * Edit one or more resources with the specified external editor.\n */\nconst editWithLocalExternalEditor = async ({\n  externalEditorName,\n  defaultName,\n  metadataKey,\n  resourceKind,\n  options,\n}: {|\n  externalEditorName: 'piskel' | 'yarn' | 'jfxr',\n  defaultName: string,\n  metadataKey: string,\n  resourceKind: ResourceKind,\n  options: EditWithExternalEditorOptions,\n|}) => {\n  const { project, resourceNames, resourceManagementProps } = options;\n\n  // Fetch all edited resources as base64 encoded \"data urls\" (`data:...`).\n  const resources = await downloadAndPrepareExternalEditorBase64Resources({\n    project,\n    resourceNames,\n  });\n\n  // Open the external editor, passing the resources with the data urls.\n  const externalEditorInput: ExternalEditorInput = {\n    singleFrame: options.extraOptions.singleFrame,\n    externalEditorData: readMetadata(\n      metadataKey,\n      options.extraOptions.existingMetadata\n    ),\n    fps: options.extraOptions.fps,\n    isLooping: options.extraOptions.isLooping,\n    name: options.extraOptions.name || resourceNames[0] || defaultName,\n    resources,\n  };\n  sendExternalEditorOpened(externalEditorName);\n  const externalEditorOutput: ?ExternalEditorOutput = await openAndWaitForExternalEditorWindow(\n    externalEditorName,\n    externalEditorInput\n  );\n  if (!externalEditorOutput) return null; // Changes cancelled.\n\n  // Save the edited files back to the GDevelop resources, as \"blob urls\" (blob:...)\n  // which can then uploaded or saved locally.\n  const modifiedResources = await saveBlobUrlsFromExternalEditorBase64Resources(\n    {\n      baseNameForNewResources: externalEditorOutput.baseNameForNewResources,\n      project,\n      resources: externalEditorOutput.resources,\n      resourceKind,\n    }\n  );\n\n  // Ask the project to persist the resources (\"blob urls\" will be either uploaded\n  // or saved locally).\n  try {\n    await resourceManagementProps.onFetchNewlyAddedResources();\n  } catch (error) {\n    console.error(\n      'An error happened while fetching the newly added resources:',\n      error\n    );\n  }\n\n  // Free the \"blob urls\" so that blobs don't stay in memory! They are only temporarily\n  // useful while waiting for an upload/local file save.\n  freeBlobsAndUpdateMetadata({\n    modifiedResources,\n    metadataKey,\n    metadata: options.extraOptions.singleFrame\n      ? externalEditorOutput.externalEditorData\n      : null,\n  });\n\n  // Some editors (Piskel) need to have resource names persisted.\n  patchExternalEditorMetadataWithResourcesNamesIfNecessary(\n    modifiedResources.map(({ resource }) => resource.getName()),\n    externalEditorOutput.externalEditorData\n  );\n\n  return {\n    resources: modifiedResources.map(({ resource, originalIndex }) => ({\n      name: resource.getName(),\n      originalIndex,\n    })),\n    newName: externalEditorOutput.baseNameForNewResources,\n    newMetadata: { [metadataKey]: externalEditorOutput.externalEditorData },\n  };\n};\n\n/**\n * This is the list of editors that can be used to edit resources\n * on Electron runtime.\n */\nconst editors: Array<ResourceExternalEditor> = [\n  {\n    name: 'piskel-app',\n    createDisplayName: t`Create with Piskel`,\n    editDisplayName: t`Edit with Piskel`,\n    kind: 'image',\n    edit: async options => {\n      return await editWithLocalExternalEditor({\n        options,\n        externalEditorName: 'piskel',\n        defaultName: 'New image',\n        metadataKey: 'pskl',\n        resourceKind: 'image',\n      });\n    },\n  },\n  {\n    name: 'Jfxr',\n    createDisplayName: t`Create with Jfxr`,\n    editDisplayName: t`Edit with Jfxr`,\n    kind: 'audio',\n    edit: async options => {\n      return await editWithLocalExternalEditor({\n        options,\n        externalEditorName: 'jfxr',\n        defaultName: 'New sound effect',\n        metadataKey: 'jfxr',\n        resourceKind: 'audio',\n      });\n    },\n  },\n  {\n    name: 'Yarn',\n    createDisplayName: t`Create with Yarn`,\n    editDisplayName: t`Edit with Yarn`,\n    kind: 'json',\n    edit: async options => {\n      return await editWithLocalExternalEditor({\n        options,\n        externalEditorName: 'yarn',\n        defaultName: 'New dialogue tree',\n        metadataKey: 'yarn',\n        resourceKind: 'json',\n      });\n    },\n  },\n];\n\nexport default editors;\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport * as React from 'react';\nimport LocalFileSystem from '../LocalFileSystem';\nimport optionalRequire from '../../../Utils/OptionalRequire';\nimport { timeFunction } from '../../../Utils/TimeFunction';\nimport { findGDJS } from '../../../GameEngineFinder/LocalGDJSFinder';\nimport LocalNetworkPreviewDialog from './LocalNetworkPreviewDialog';\nimport assignIn from 'lodash/assignIn';\nimport { type PreviewOptions } from '../../PreviewLauncher.flow';\nimport SubscriptionChecker, {\n  type SubscriptionCheckerInterface,\n} from '../../../Profile/Subscription/SubscriptionChecker';\nimport {\n  getDebuggerServerAddress,\n  localPreviewDebuggerServer,\n} from './LocalPreviewDebuggerServer';\nimport Window from '../../../Utils/Window';\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\ntype Props = {|\n  getIncludeFileHashs: () => { [string]: number },\n  onExport?: () => void,\n|};\n\ntype State = {|\n  networkPreviewDialogOpen: boolean,\n  networkPreviewHost: ?string,\n  networkPreviewPort: ?number,\n  networkPreviewError: ?any,\n  hotReloadsCount: number,\n  previewGamePath: ?string,\n  previewBrowserWindowOptions: ?{\n    width: number,\n    height: number,\n    useContentSize: boolean,\n    title: string,\n    backgroundColor: string,\n  },\n  hideMenuBar: boolean,\n  alwaysOnTop: boolean,\n|};\n\nexport default class LocalPreviewLauncher extends React.Component<\n  Props,\n  State\n> {\n  canDoNetworkPreview = () => true;\n  canDoHotReload = () => true;\n\n  state = {\n    networkPreviewDialogOpen: false,\n    networkPreviewHost: null,\n    networkPreviewPort: null,\n    networkPreviewError: null,\n    previewGamePath: null,\n    previewBrowserWindowOptions: null,\n    hotReloadsCount: 0,\n    hideMenuBar: true,\n    alwaysOnTop: true,\n  };\n  _networkPreviewSubscriptionChecker: ?SubscriptionCheckerInterface = null;\n  _hotReloadSubscriptionChecker: ?SubscriptionCheckerInterface = null;\n\n  _openPreviewBrowserWindow = () => {\n    const { previewGamePath, previewBrowserWindowOptions } = this.state;\n    if (!previewBrowserWindowOptions || !previewGamePath) return;\n\n    if (!ipcRenderer) return;\n\n    ipcRenderer.invoke('preview-open', {\n      previewBrowserWindowOptions,\n      previewGameIndexHtmlPath: `file://${previewGamePath}/index.html`,\n      alwaysOnTop: this.state.alwaysOnTop,\n      hideMenuBar: this.state.hideMenuBar,\n    });\n  };\n\n  closePreview = (windowId: number) => {\n    if (!ipcRenderer) return;\n    ipcRenderer.invoke('preview-close', { windowId });\n  };\n\n  _openPreviewWindow = (\n    project: gdProject,\n    gamePath: string,\n    options: PreviewOptions\n  ): void => {\n    this.setState(\n      {\n        previewBrowserWindowOptions: {\n          width: project.getGameResolutionWidth(),\n          height: project.getGameResolutionHeight(),\n          useContentSize: true,\n          title: `Preview of ${project.getName()}`,\n          backgroundColor: '#000000',\n          webPreferences: {\n            webSecurity: false, // Allow to access to local files,\n            // Allow Node.js API access in renderer process, as long\n            // as we've not removed dependency on it and on \"@electron/remote\".\n            nodeIntegration: true,\n            contextIsolation: false,\n          },\n        },\n        previewGamePath: gamePath,\n        hideMenuBar: !options.getIsMenuBarHiddenInPreview(),\n        alwaysOnTop: options.getIsAlwaysOnTopInPreview(),\n      },\n      () => {\n        if (!options.networkPreview) {\n          this._openPreviewBrowserWindow();\n        } else {\n          if (!ipcRenderer) return;\n\n          ipcRenderer.removeAllListeners('serve-folder-done');\n          ipcRenderer.removeAllListeners('local-network-ips');\n          ipcRenderer.on('serve-folder-done', (event, err, serverParams) => {\n            if (err) {\n              this.setState({\n                networkPreviewDialogOpen: true,\n                networkPreviewPort: null,\n                networkPreviewHost: null,\n                networkPreviewError: err,\n              });\n            } else {\n              this.setState({\n                networkPreviewDialogOpen: true,\n                networkPreviewPort: serverParams.port,\n              });\n            }\n\n            setTimeout(() => this._checkSubscriptionForNetworkPreview());\n          });\n          ipcRenderer.on('local-network-ip', (event, ipAddress) => {\n            this.setState({\n              networkPreviewHost: ipAddress,\n            });\n          });\n          ipcRenderer.send('serve-folder', {\n            root: gamePath,\n          });\n          ipcRenderer.send('get-local-network-ip');\n        }\n      }\n    );\n  };\n\n  _prepareExporter = (): Promise<{|\n    outputDir: string,\n    exporter: gdjsExporter,\n    gdjsRoot: string,\n  |}> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: false,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const outputDir = path.join(fileSystem.getTempDir(), 'preview');\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        outputDir,\n        exporter,\n        gdjsRoot,\n      };\n    });\n  };\n\n  launchPreview = (previewOptions: PreviewOptions): Promise<any> => {\n    const { project, layout, externalLayout } = previewOptions;\n\n    // Start the debugger server for previews. Even if not used,\n    // useful if the user opens the Debugger editor later, or want to\n    // hot reload.\n    return this.getPreviewDebuggerServer()\n      .startServer()\n      .catch(err => {\n        // Ignore any error when running the debugger server - the preview\n        // can still work without it.\n        console.error(\n          'Unable to start the Debugger Server for the preview:',\n          err\n        );\n      })\n      .then(() => this._prepareExporter())\n      .then(({ outputDir, exporter, gdjsRoot }) => {\n        timeFunction(\n          () => {\n            const previewExportOptions = new gd.PreviewExportOptions(\n              project,\n              outputDir\n            );\n            previewExportOptions.setIsDevelopmentEnvironment(Window.isDev());\n            previewExportOptions.setLayoutName(layout.getName());\n            if (externalLayout) {\n              previewExportOptions.setExternalLayoutName(\n                externalLayout.getName()\n              );\n            }\n\n            const previewDebuggerServerAddress = getDebuggerServerAddress();\n            if (previewDebuggerServerAddress) {\n              previewExportOptions.useWebsocketDebuggerClientWithServerAddress(\n                previewDebuggerServerAddress.address,\n                '' + previewDebuggerServerAddress.port\n              );\n            }\n\n            const includeFileHashs = this.props.getIncludeFileHashs();\n            for (const includeFile in includeFileHashs) {\n              const hash = includeFileHashs[includeFile];\n              previewExportOptions.setIncludeFileHash(includeFile, hash);\n            }\n\n            // Give the preview the path to the \"@electron/remote\" module of the editor,\n            // as this is required by some features and we've not removed dependency\n            // on \"@electron/remote\" yet.\n            previewExportOptions.setElectronRemoteRequirePath(\n              path.join(\n                gdjsRoot,\n                '../preview_node_modules',\n                '@electron/remote',\n                'renderer/index.js'\n              )\n            );\n\n            const debuggerIds = this.getPreviewDebuggerServer().getExistingDebuggerIds();\n            const shouldHotReload =\n              previewOptions.hotReload && !!debuggerIds.length;\n\n            previewExportOptions.setProjectDataOnlyExport(\n              // Only export project data if asked and if a hot-reloading is being done.\n              shouldHotReload && previewOptions.projectDataOnlyExport\n            );\n\n            previewExportOptions.setFullLoadingScreen(\n              previewOptions.fullLoadingScreen\n            );\n\n            if (previewOptions.fallbackAuthor) {\n              previewExportOptions.setFallbackAuthor(\n                previewOptions.fallbackAuthor.id,\n                previewOptions.fallbackAuthor.username\n              );\n            }\n\n            exporter.exportProjectForPixiPreview(previewExportOptions);\n            previewExportOptions.delete();\n            exporter.delete();\n\n            if (shouldHotReload) {\n              debuggerIds.forEach(debuggerId => {\n                this.getPreviewDebuggerServer().sendMessage(debuggerId, {\n                  command: 'hotReload',\n                });\n              });\n\n              if (\n                this.state.hotReloadsCount % 16 === 0 &&\n                this._hotReloadSubscriptionChecker\n              ) {\n                this._hotReloadSubscriptionChecker.checkUserHasSubscription();\n              }\n              this.setState(state => ({\n                hotReloadsCount: state.hotReloadsCount + 1,\n              }));\n            } else {\n              this._openPreviewWindow(project, outputDir, previewOptions);\n            }\n          },\n          time => console.info(`Preview took ${time}ms`)\n        );\n      });\n  };\n\n  getPreviewDebuggerServer() {\n    return localPreviewDebuggerServer;\n  }\n\n  _checkSubscriptionForNetworkPreview = () => {\n    if (!this._networkPreviewSubscriptionChecker) return true;\n\n    return this._networkPreviewSubscriptionChecker.checkUserHasSubscription();\n  };\n\n  render() {\n    const {\n      networkPreviewDialogOpen,\n      networkPreviewHost,\n      networkPreviewPort,\n      networkPreviewError,\n    } = this.state;\n\n    return (\n      <React.Fragment>\n        <SubscriptionChecker\n          ref={subscriptionChecker =>\n            (this._networkPreviewSubscriptionChecker = subscriptionChecker)\n          }\n          onChangeSubscription={() =>\n            this.setState({ networkPreviewDialogOpen: false })\n          }\n          id=\"Preview over wifi\"\n          title={<Trans>Preview over wifi</Trans>}\n          mode=\"try\"\n        />\n        <SubscriptionChecker\n          ref={subscriptionChecker =>\n            (this._hotReloadSubscriptionChecker = subscriptionChecker)\n          }\n          id=\"Hot reloading\"\n          title={\n            <Trans>Live preview (apply changes to the running preview)</Trans>\n          }\n          mode=\"try\"\n        />\n        <LocalNetworkPreviewDialog\n          open={networkPreviewDialogOpen}\n          url={\n            networkPreviewHost && networkPreviewPort\n              ? `${networkPreviewHost}:${networkPreviewPort}`\n              : null\n          }\n          error={networkPreviewError}\n          onClose={() => this.setState({ networkPreviewDialogOpen: false })}\n          onExport={this.props.onExport}\n          onRunPreviewLocally={this._openPreviewBrowserWindow}\n        />\n      </React.Fragment>\n    );\n  }\n}\n","// @flow\n\nexport const timeFunction = (fn: Function, onResult: number => void) => {\n  var t0 = performance.now();\n  fn();\n  var t1 = performance.now();\n  onResult(t1 - t0);\n};\n","// @flow\nimport optionalRequire from '../../../Utils/OptionalRequire';\nimport {\n  type PreviewDebuggerServerCallbacks,\n  type PreviewDebuggerServer,\n  type DebuggerId,\n  type ServerAddress,\n} from '../../PreviewLauncher.flow';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\nlet debuggerServerState: 'started' | 'stopped' = 'stopped';\nlet debuggerServerAddress: ?ServerAddress = null;\nconst callbacksList: Array<PreviewDebuggerServerCallbacks> = [];\nconst debuggerIds: Array<DebuggerId> = [];\n\nconst removeServerListeners = () => {\n  if (!ipcRenderer) return;\n\n  ipcRenderer.removeAllListeners('debugger-send-message-done');\n  ipcRenderer.removeAllListeners('debugger-error-received');\n  ipcRenderer.removeAllListeners('debugger-connection-closed');\n  ipcRenderer.removeAllListeners('debugger-connection-opened');\n  ipcRenderer.removeAllListeners('debugger-connection-errored');\n  ipcRenderer.removeAllListeners('debugger-start-server-done');\n  ipcRenderer.removeAllListeners('debugger-message-received');\n};\n\n/**\n * A debugger server implemented using Electron (this one is just a bridge to it,\n * communicating through events with it).\n */\nexport const localPreviewDebuggerServer: PreviewDebuggerServer = {\n  startServer: () => {\n    if (!ipcRenderer) return Promise.reject();\n    if (debuggerServerState === 'started') return Promise.resolve();\n\n    const serverStartPromise = new Promise((resolve, reject) => {\n      let serverStartPromiseCompleted = false;\n      debuggerServerState = 'stopped';\n      debuggerServerAddress = null;\n      removeServerListeners();\n\n      ipcRenderer.on('debugger-error-received', (event, err) => {\n        if (!serverStartPromiseCompleted) {\n          reject(err);\n          serverStartPromiseCompleted = true;\n        }\n\n        callbacksList.forEach(({ onErrorReceived }) => onErrorReceived(err));\n      });\n\n      ipcRenderer.on('debugger-connection-closed', (event, { id }) => {\n        const debuggerIdIndex = debuggerIds.indexOf(id);\n        if (debuggerIdIndex !== -1) debuggerIds.splice(debuggerIdIndex, 1);\n\n        callbacksList.forEach(({ onConnectionClosed }) =>\n          onConnectionClosed({\n            id,\n            debuggerIds,\n          })\n        );\n      });\n\n      ipcRenderer.on('debugger-connection-opened', (event, { id }) => {\n        debuggerIds.push(id);\n        callbacksList.forEach(({ onConnectionOpened }) =>\n          onConnectionOpened({\n            id,\n            debuggerIds,\n          })\n        );\n      });\n\n      ipcRenderer.on(\n        'debugger-connection-errored',\n        (event, { id, errorMessage }) => {\n          callbacksList.forEach(({ onConnectionErrored }) =>\n            onConnectionErrored({\n              id,\n              errorMessage,\n            })\n          );\n        }\n      );\n\n      ipcRenderer.on('debugger-start-server-done', (event, { address }) => {\n        console.info('Local preview debugger started');\n        debuggerServerState = 'started';\n        debuggerServerAddress = address;\n        if (!serverStartPromiseCompleted) {\n          resolve();\n          serverStartPromiseCompleted = true;\n        }\n\n        callbacksList.forEach(({ onServerStateChanged }) =>\n          onServerStateChanged()\n        );\n      });\n\n      ipcRenderer.on('debugger-message-received', (event, { id, message }) => {\n        console.info('Processing message received for debugger');\n        try {\n          const parsedMessage = JSON.parse(message);\n          callbacksList.forEach(({ onHandleParsedMessage }) =>\n            onHandleParsedMessage({ id, parsedMessage })\n          );\n        } catch (e) {\n          console.warn(\n            'Error while parsing message received from debugger client:',\n            e\n          );\n        }\n      });\n      ipcRenderer.send('debugger-start-server');\n    });\n\n    // Consider the start of the server as a failure if not completed/errored\n    // after 5s.\n    const serverStartTimeoutPromise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        reject(\n          new Error(\n            'Debugger server not started or errored after 5s - aborting.'\n          )\n        );\n      }, 5000);\n    });\n    return Promise.race([serverStartPromise, serverStartTimeoutPromise]);\n  },\n  sendMessage: (id: DebuggerId, message: Object) => {\n    if (!ipcRenderer) return;\n    if (debuggerServerState === 'stopped') {\n      console.error('Cannot send message when debugger server is stopped.');\n      return;\n    }\n\n    ipcRenderer.send('debugger-send-message', {\n      id,\n      message: JSON.stringify(message),\n    });\n  },\n  getServerState: () => debuggerServerState,\n  getExistingDebuggerIds: () => debuggerIds,\n  registerCallbacks: (callbacks: PreviewDebuggerServerCallbacks) => {\n    callbacksList.push(callbacks);\n\n    return () => {\n      const callbacksIndex = callbacksList.indexOf(callbacks);\n      if (callbacksIndex !== -1) callbacksList.splice(callbacksIndex, 1);\n    };\n  },\n};\n\nexport const getDebuggerServerAddress = (): ?ServerAddress =>\n  debuggerServerAddress;\n","// @flow\nimport { type Exporter } from '../ExportDialog';\nimport { localCordovaExportPipeline } from './LocalCordovaExport';\nimport { localElectronExportPipeline } from './LocalElectronExport';\nimport { localHTML5ExportPipeline } from './LocalHTML5Export';\nimport { localFacebookInstantGamesExportPipeline } from './LocalFacebookInstantGamesExport';\nimport { localOnlineCordovaExportPipeline } from './LocalOnlineCordovaExport';\nimport { localOnlineElectronExportPipeline } from './LocalOnlineElectronExport';\nimport { localOnlineWebExportPipeline } from './LocalOnlineWebExport';\nimport { cordovaExporter } from '../GenericExporters/CordovaExport';\nimport { onlineWebExporter } from '../GenericExporters/OnlineWebExport';\nimport { html5Exporter } from '../GenericExporters/HTML5Export';\nimport { facebookInstantGamesExporter } from '../GenericExporters/FacebookInstantGamesExport';\nimport { onlineCordovaExporter } from '../GenericExporters/OnlineCordovaExport';\nimport { onlineElectronExporter } from '../GenericExporters/OnlineElectronExport';\nimport { electronExporter } from '../GenericExporters/ElectronExport';\n\nexport const localOnlineWebExporter: Exporter = {\n  ...onlineWebExporter,\n  exportPipeline: localOnlineWebExportPipeline,\n};\n\nexport const localAutomatedExporters: Array<Exporter> = [\n  {\n    ...html5Exporter,\n    exportPipeline: localHTML5ExportPipeline,\n  },\n  {\n    ...onlineCordovaExporter,\n    exportPipeline: localOnlineCordovaExportPipeline,\n  },\n  {\n    ...onlineElectronExporter,\n    exportPipeline: localOnlineElectronExportPipeline,\n  },\n  {\n    ...facebookInstantGamesExporter,\n    exportPipeline: localFacebookInstantGamesExportPipeline,\n  },\n];\n\nexport const localManualExporters: Array<Exporter> = [\n  {\n    ...html5Exporter,\n    exportPipeline: localHTML5ExportPipeline,\n  },\n  {\n    ...cordovaExporter,\n    exportPipeline: localCordovaExportPipeline,\n  },\n  {\n    ...electronExporter,\n    exportPipeline: localElectronExportPipeline,\n  },\n];\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/CordovaExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n|};\n\ntype ExportOutput = {|\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-cordova',\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <Column noMargin>\n          <ExplanationHeader />\n        </Column>\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        localFileSystem,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      context.exportState.outputDir\n    );\n    exportOptions.setTarget('cordova');\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      urlFiles: localFileSystem.getAllUrlFilesIn(context.exportState.outputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return null;\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openPath(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/ElectronExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n|};\n\ntype ExportOutput = {|\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-electron',\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <Column noMargin>\n          <ExplanationHeader />\n        </Column>\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        localFileSystem,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      context.exportState.outputDir\n    );\n    exportOptions.setTarget('electron');\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      urlFiles: localFileSystem.getAllUrlFilesIn(context.exportState.outputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return null;\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openPath(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { ExplanationHeader, DoneFooter } from '../GenericExporters/HTML5Export';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n|};\n\ntype ExportOutput = {|\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localHTML5ExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-html5',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Export as a HTML5 game</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        localFileSystem,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      context.exportState.outputDir\n    );\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      urlFiles: localFileSystem.getAllUrlFilesIn(context.exportState.outputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return null;\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openPath(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            fullWidth\n            primary\n            onClick={() => openExportFolder()}\n            label={<Trans>Open the exported game folder</Trans>}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport LocalFilePicker from '../../UI/LocalFilePicker';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/FacebookInstantGamesExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst remote = optionalRequire('@electron/remote');\nconst app = remote ? remote.app : null;\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  archiveOutputFilename: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localFacebookInstantGamesExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-facebook-instant-games',\n\n  getInitialExportState: (project: gdProject) => ({\n    archiveOutputFilename: app\n      ? path.join(app.getPath('documents'), 'fb-instant-game.zip')\n      : '',\n  }),\n\n  canLaunchBuild: exportState => !!exportState.archiveOutputFilename,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <LocalFilePicker\n          title={'Facebook Instant Games export zip file'}\n          message={\n            'Choose where to save the exported file for Facebook Instant Games'\n          }\n          filters={[\n            {\n              name: 'Compressed file for Facebook Instant Games',\n              extensions: ['zip'],\n            },\n          ]}\n          value={exportState.archiveOutputFilename}\n          defaultPath={app ? app.getPath('documents') : ''}\n          onChange={value =>\n            updateExportState(() => ({ archiveOutputFilename: value }))\n          }\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'FacebookInstantGamesExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        localFileSystem,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem, temporaryOutputDir }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      temporaryOutputDir\n    );\n    exportOptions.setTarget('facebookInstantGames');\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      temporaryOutputDir,\n      urlFiles: localFileSystem.getAllUrlFilesIn(temporaryOutputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return { temporaryOutputDir };\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: context.exportState.archiveOutputFilename,\n    });\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell && path)\n        shell.openPath(path.dirname(exportState.archiveOutputFilename));\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { t } from '@lingui/macro';\n\nimport * as React from 'react';\nimport TextField from '../TextField';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport FlatButton from '../FlatButton';\nconst electron = optionalRequire('electron');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst styles = {\n  container: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'baseline',\n  },\n  button: {\n    marginLeft: 10,\n  },\n  textField: {\n    flex: 1,\n  },\n};\n\ntype Props = {|\n  value: string,\n  onChange: string => void,\n  title: string,\n  message: string,\n  defaultPath?: string,\n  fullWidth?: boolean,\n  filters: Array<{\n    name: string,\n    extensions: Array<string>,\n  }>,\n|};\n\nconst LocalFilePicker = ({\n  value,\n  onChange,\n  title,\n  message,\n  defaultPath,\n  fullWidth,\n  filters,\n}: Props) => {\n  const onChooseFolder = async () => {\n    if (!dialog || !electron) return;\n\n    const browserWindow = remote.getCurrentWindow();\n    const { filePath } = await dialog.showSaveDialog(browserWindow, {\n      title: title,\n      filters: filters,\n      message: message,\n      defaultPath: defaultPath,\n    });\n    onChange(filePath || '');\n  };\n\n  return (\n    <div\n      style={{\n        ...styles.container,\n        width: fullWidth ? '100%' : undefined,\n      }}\n    >\n      <TextField\n        margin=\"dense\"\n        style={styles.textField}\n        type=\"text\"\n        translatableHintText={t`Choose a file`}\n        value={value}\n        onChange={(event, value) => onChange(value)}\n      />\n      <FlatButton\n        label={<Trans>Choose</Trans>}\n        style={styles.button}\n        onClick={onChooseFolder}\n      />\n    </div>\n  );\n};\n\nexport default LocalFilePicker;\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildCordovaAndroid,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineCordovaExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-cordova',\n  onlineBuildType: 'cordova-build',\n  limitedBuilds: true,\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: () => ({\n    targets: ['androidApk'],\n    keystore: 'new',\n    signingDialogOpen: false,\n  }),\n\n  // Build can be launched only if just opened the dialog or build errored.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    errored || exportStep === '',\n\n  // Navigation is enabled when the build is errored or whilst uploading.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored &&\n    ['register', 'export', 'resources-download', 'compress', 'upload'].includes(\n      exportStep\n    ),\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Create package for Android</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineCordovaExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        localFileSystem,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem, temporaryOutputDir }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      temporaryOutputDir\n    );\n    exportOptions.setTarget('cordova');\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      temporaryOutputDir,\n      urlFiles: localFileSystem.getAllUrlFilesIn(temporaryOutputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return { temporaryOutputDir };\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string,\n    options: {|\n      gameName: string,\n      gameVersion: string,\n    |}\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildCordovaAndroid(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      exportState.targets,\n      exportState.keystore,\n      gameId,\n      options\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildElectron,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineElectronExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-electron',\n  onlineBuildType: 'electron-build',\n  limitedBuilds: true,\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: () => ({\n    targets: ['winExe'],\n  }),\n\n  // Build can be launched only if just opened the dialog or build errored.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    !!exportState.targets.length && (errored || exportStep === ''),\n\n  // Navigation is enabled when the build is errored or whilst uploading.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored &&\n    ['register', 'export', 'resources-download', 'compress', 'upload'].includes(\n      exportStep\n    ),\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineElectronExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        localFileSystem,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem, temporaryOutputDir }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      temporaryOutputDir\n    );\n    exportOptions.setTarget('electron');\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      temporaryOutputDir,\n      urlFiles: localFileSystem.getAllUrlFilesIn(temporaryOutputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return { temporaryOutputDir };\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string,\n    options: {|\n      gameName: string,\n      gameVersion: string,\n    |}\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildElectron(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      exportState.targets,\n      gameId,\n      options\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildWeb,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  OnlineGameLink,\n} from '../GenericExporters/OnlineWebExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineWebExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-web',\n  onlineBuildType: 'web-build',\n\n  getInitialExportState: () => null,\n\n  // Build can be launched if just opened the dialog or build errored, re-enabled when done.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    errored || exportStep === '' || exportStep === 'done',\n\n  // Navigation is enabled when the build is errored or if the build is not done.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored && !['', 'done'].includes(exportStep),\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Generate link</Trans>,\n\n  renderCustomStepsProgress: ({\n    build,\n    project,\n    onSaveProject,\n    errored,\n    exportStep,\n  }) => (\n    <OnlineGameLink\n      build={build}\n      project={project}\n      onSaveProject={onSaveProject}\n      errored={errored}\n      exportStep={exportStep}\n    />\n  ),\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineWebExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        localFileSystem,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem, temporaryOutputDir }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      temporaryOutputDir\n    );\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      temporaryOutputDir,\n      urlFiles: localFileSystem.getAllUrlFilesIn(temporaryOutputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return { temporaryOutputDir };\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n      sizeLimit: 250 * 1000 * 1000,\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string,\n    options: {|\n      gameName: string,\n      gameVersion: string,\n    |}\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildWeb(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      gameId,\n      options\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport { useCommandWithOptions } from '../CommandPalette/CommandHooks';\nimport {\n  buildMainMenuDeclarativeTemplate,\n  type BuildMainMenuProps,\n  type MainMenuCallbacks,\n  type MainMenuExtraCallbacks,\n  type MainMenuEvent,\n} from './MainMenu';\nimport PreferencesContext from './Preferences/PreferencesContext';\nconst electron = optionalRequire('electron');\nconst remote = optionalRequire('@electron/remote');\nconst app = remote ? remote.app : null;\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\n// Custom hook to register and deregister IPC listener\nconst useIPCEventListener = ({\n  ipcEvent,\n  callback,\n  shouldApply,\n}: {\n  ipcEvent: MainMenuEvent,\n  callback: Function,\n  shouldApply: boolean,\n}) => {\n  React.useEffect(\n    () => {\n      if (!ipcRenderer || !shouldApply) return;\n\n      const handler = (event, ...eventArgs) => callback(...eventArgs);\n      ipcRenderer.on(ipcEvent, handler);\n      return () => ipcRenderer.removeListener(ipcEvent, handler);\n    },\n    [ipcEvent, callback, shouldApply]\n  );\n};\n\nconst useAppEventListener = ({\n  event,\n  callback,\n}: {\n  event: string,\n  callback: Function,\n}) => {\n  React.useEffect(\n    () => {\n      if (!app) return;\n      const handler = (event, ...eventArgs) => callback(...eventArgs);\n      app.on(event, handler);\n      return () => app.removeListener(event, handler);\n    },\n    [event, callback]\n  );\n};\n\nconst isMainWindow = (windowTitle: string): boolean => {\n  if (!windowTitle) return false;\n  const lowercaseTitle = windowTitle.toLowerCase();\n  return (\n    lowercaseTitle.startsWith('gdevelop') &&\n    lowercaseTitle !== 'gdevelop dialogue tree editor (yarn)' &&\n    lowercaseTitle !== 'gdevelop sound effects editor (jfxr)' &&\n    lowercaseTitle !== 'gdevelop image editor (piskel)'\n  );\n};\n\n/**\n * Create and update the editor main menu using Electron APIs.\n */\nconst ElectronMainMenu = ({\n  props,\n  callbacks,\n  extraCallbacks,\n}: {|\n  props: BuildMainMenuProps,\n  callbacks: MainMenuCallbacks,\n  extraCallbacks: MainMenuExtraCallbacks,\n|}) => {\n  const { i18n, project, recentProjectFiles, shortcutMap } = props;\n  const { onClosePreview } = extraCallbacks;\n  const language = i18n.language;\n  const [\n    isFocusedOnMainWindow,\n    setIsFocusedOnMainWindow,\n  ] = React.useState<boolean>(true);\n  const [focusedWindowId, setFocusedWindowId] = React.useState<number>(\n    remote.getCurrentWindow().id\n  );\n  const closePreviewWindow =\n    !isFocusedOnMainWindow && onClosePreview\n      ? () => onClosePreview(focusedWindowId)\n      : null;\n  const {\n    values: { useShortcutToClosePreviewWindow },\n  } = React.useContext(PreferencesContext);\n\n  useAppEventListener({\n    event: 'browser-window-focus',\n    callback: window => {\n      setFocusedWindowId(window.id);\n      setIsFocusedOnMainWindow(isMainWindow(window.title));\n    },\n  });\n  useAppEventListener({\n    event: 'browser-window-blur',\n    callback: window => {\n      setIsFocusedOnMainWindow(!isMainWindow(window.title));\n    },\n  });\n\n  // We could use a for loop, but for safety let's write every hook one by\n  // one to avoid any change at runtime which would break the rules of hooks.\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open',\n    callback: callbacks.onChooseProject,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-recent',\n    callback: callbacks.onOpenRecentFile,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-save',\n    callback: callbacks.onSaveProject,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-save-as',\n    callback: callbacks.onSaveProjectAs,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-close',\n    callback:\n      useShortcutToClosePreviewWindow && closePreviewWindow\n        ? closePreviewWindow\n        : callbacks.onCloseProject,\n    shouldApply:\n      useShortcutToClosePreviewWindow && closePreviewWindow\n        ? true\n        : isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-close-app',\n    callback: callbacks.onCloseApp,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-export',\n    callback: callbacks.onExportProject,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-create-template',\n    callback: callbacks.onCreateProject,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-create-blank',\n    callback: callbacks.onCreateBlank,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-project-manager',\n    callback: callbacks.onOpenProjectManager,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-home-page',\n    callback: callbacks.onOpenHomePage,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-debugger',\n    callback: callbacks.onOpenDebugger,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-about',\n    callback: callbacks.onOpenAbout,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-preferences',\n    callback: callbacks.onOpenPreferences,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-language',\n    callback: callbacks.onOpenLanguage,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-profile',\n    callback: callbacks.onOpenProfile,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-games-dashboard',\n    callback: callbacks.onOpenGamesDashboard,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'update-status',\n    callback: callbacks.setElectronUpdateStatus,\n    shouldApply: true, // Keep logic around app update even if on preview window\n  });\n\n  React.useEffect(\n    () => {\n      if (ipcRenderer) {\n        ipcRenderer.send(\n          'set-main-menu',\n          buildMainMenuDeclarativeTemplate({\n            project,\n            i18n,\n            recentProjectFiles,\n            shortcutMap,\n            isApplicationTopLevelMenu: true,\n          })\n        );\n      }\n    },\n    [i18n, language, project, recentProjectFiles, shortcutMap]\n  );\n\n  const { onOpenRecentFile } = callbacks;\n  useCommandWithOptions('OPEN_RECENT_PROJECT', true, {\n    generateOptions: React.useCallback(\n      () =>\n        recentProjectFiles.map(item => ({\n          text: item.fileMetadata.fileIdentifier,\n          handler: () => onOpenRecentFile(item),\n        })),\n      [onOpenRecentFile, recentProjectFiles]\n    ),\n  });\n\n  return null;\n};\n\nexport default ElectronMainMenu;\n","// @flow\n// Note: this file does not use export/imports and use Flow comments to allow its usage from Node.js\n\nconst { loadExtension } = require('.');\nconst optionalRequire = require('../Utils/OptionalRequire');\nconst { findJsExtensionModules } = require('./LocalJsExtensionsFinder');\n\n/*flow-include\nimport type {JsExtensionsLoader, TranslationFunction} from '.';\nimport ObjectsEditorService from '../ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from '../ObjectsRendering/ObjectsRenderingService';\n\ntype MakeExtensionsLoaderArguments = {|\n  gd: any,\n  objectsEditorService: typeof ObjectsEditorService,\n  objectsRenderingService: typeof ObjectsRenderingService,\n  filterExamples: boolean,\n  onFindGDJS?: ?() => Promise<{gdjsRoot: string}>\n|};\n*/\n\n/**\n * Loader that will find all JS extensions declared in GDJS/Runtime/Extensions/xxx/JsExtension.js.\n * If you add a new extension and also want it to be available for the web-app version, add it in\n * BrowserJsExtensionsLoader.js\n */\nmodule.exports = function makeExtensionsLoader(\n  {\n    gd,\n    objectsEditorService,\n    objectsRenderingService,\n    filterExamples,\n    onFindGDJS,\n  } /*: MakeExtensionsLoaderArguments*/\n) /*: JsExtensionsLoader*/ {\n  return {\n    loadAllExtensions: (_ /*: TranslationFunction */) => {\n      return findJsExtensionModules({ filterExamples, onFindGDJS }).then(\n        extensionModulePaths => {\n          return Promise.all(\n            extensionModulePaths.map(extensionModulePath => {\n              let extensionModule = null;\n              try {\n                extensionModule = optionalRequire(extensionModulePath, {\n                  rethrowException: true,\n                });\n              } catch (ex) {\n                return {\n                  extensionModulePath,\n                  result: {\n                    message:\n                      'Unable to import extension. Please check for any syntax error or error that would prevent it from being run.',\n                    error: true,\n                    rawError: ex,\n                  },\n                };\n              }\n\n              if (extensionModule) {\n                // Load any editor for objects, if we have somewhere where\n                // to register them.\n                if (\n                  objectsEditorService &&\n                  extensionModule.registerEditorConfigurations\n                ) {\n                  extensionModule.registerEditorConfigurations(\n                    objectsEditorService\n                  );\n                }\n\n                // Load any renderer for objects, if we have somewhere where\n                // to register them.\n                if (\n                  objectsRenderingService &&\n                  extensionModule.registerInstanceRenderers\n                ) {\n                  extensionModule.registerInstanceRenderers(\n                    objectsRenderingService\n                  );\n                }\n\n                return {\n                  extensionModulePath,\n                  result: loadExtension(\n                    _,\n                    gd,\n                    gd.JsPlatform.get(),\n                    extensionModule\n                  ),\n                };\n              }\n\n              return {\n                extensionModulePath,\n                result: {\n                  error: true,\n                  message:\n                    'Unknown error. Please check for any syntax error or error that would prevent it from being run.',\n                },\n              };\n            })\n          );\n        },\n        err => {\n          console.error(`Unable to find JS extensions modules`);\n          throw err;\n        }\n      );\n    },\n  };\n};\n","// Note: this file does not use export/imports nor Flow to allow its usage from Node.js\n\nconst { findGDJS } = require('../GameEngineFinder/LocalGDJSFinder');\nconst optionalRequire = require('../Utils/OptionalRequire');\nconst path = optionalRequire('path');\nconst fs = optionalRequire('fs');\n\nconst checkIfPathHasJsExtensionModule = extensionFolderPath => {\n  return new Promise(resolve => {\n    const jsExtensionModulePath = path.join(\n      extensionFolderPath,\n      'JsExtension.js'\n    );\n    fs.stat(jsExtensionModulePath, (err, stats) => {\n      if (err) {\n        return resolve(null);\n      }\n\n      return resolve(stats.isFile() ? jsExtensionModulePath : null);\n    });\n  });\n};\n\nconst findJsExtensionModules = ({ filterExamples, onFindGDJS }) => {\n  return (onFindGDJS ? onFindGDJS() : findGDJS()).then(({ gdjsRoot }) => {\n    const extensionsRoot = path.join(gdjsRoot, 'Runtime', 'Extensions');\n    console.info(\n      `Searching for JS extensions (file called JsExtension.js) in ${extensionsRoot}...`\n    );\n    return new Promise((resolve, reject) => {\n      fs.readdir(extensionsRoot, (error, extensionFolders) => {\n        if (error) {\n          return reject(error);\n        }\n\n        const filteredExtensionFolders = extensionFolders.filter(folder => {\n          if (!filterExamples) return true;\n\n          return folder.indexOf('Example') === -1;\n        });\n\n        Promise.all(\n          filteredExtensionFolders.map(extensionFolder =>\n            checkIfPathHasJsExtensionModule(\n              path.join(extensionsRoot, extensionFolder)\n            )\n          )\n        ).then(modulePaths => {\n          resolve(modulePaths.filter(modulePath => !!modulePath));\n        }, reject);\n      });\n    });\n  });\n};\n\nmodule.exports = {\n  findJsExtensionModules,\n};\n","// @flow\nimport {\n  type EventsFunctionCodeWriter,\n  type EventsFunctionCodeWriterCallbacks,\n} from '..';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { getUID } from '../../Utils/LocalUserInfo';\nimport slugs from 'slugs';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst fs = optionalRequire('fs');\n\n/**\n * Create the EventsFunctionCodeWriter that writes generated code for events functions\n * to local files.\n */\nexport const makeLocalEventsFunctionCodeWriter = ({\n  onWriteFile,\n}: EventsFunctionCodeWriterCallbacks): EventsFunctionCodeWriter => {\n  // The generated code for extensions will be stored in a temporary directory\n\n  const outputDir = path.join(\n    os.tmpdir(),\n    `GDGeneratedEventsFunctions-` + getUID()\n  );\n  fs.mkdir(outputDir, err => {\n    if (err && err.code !== 'EEXIST') {\n      console.error(\n        'Unable to create the directory where to output events functions generated code: ',\n        err\n      );\n      return;\n    }\n  });\n\n  const getPathFor = (codeNamespace: string) => {\n    return `${outputDir}/${slugs(codeNamespace)}.js`;\n  };\n\n  return {\n    getIncludeFileFor: (codeNamespace: string) => getPathFor(codeNamespace),\n    writeFunctionCode: (\n      functionCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(functionCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n    writeBehaviorCode: (\n      behaviorCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(behaviorCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n    writeObjectCode: (\n      objectCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(objectCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n  };\n};\n","// @flow\nimport { serializeToJSObject } from '../../Utils/Serializer';\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst writeJSONFile = (object: Object, filepath: string): Promise<void> => {\n  if (!fs) return Promise.reject(new Error('Filesystem is not supported.'));\n\n  try {\n    const content = JSON.stringify(object, null, 2);\n    return fs.ensureDir(path.dirname(filepath)).then(\n      () =>\n        new Promise((resolve, reject) => {\n          fs.writeFile(filepath, content, (err: ?Error) => {\n            if (err) {\n              return reject(err);\n            }\n\n            return resolve();\n          });\n        })\n    );\n  } catch (stringifyException) {\n    return Promise.reject(stringifyException);\n  }\n};\n\nexport default class LocalEventsFunctionsExtensionWriter {\n  static chooseEventsFunctionExtensionFile = (\n    extensionName?: string\n  ): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = remote.getCurrentWindow();\n\n    return dialog\n      .showSaveDialog(browserWindow, {\n        title: 'Export an extension of the project',\n        filters: [\n          {\n            name: 'GDevelop 5 \"events based\" extension',\n            extensions: ['json'],\n          },\n        ],\n        defaultPath: extensionName || 'Extension.json',\n      })\n      .then(({ filePath }) => {\n        if (!filePath) return null;\n        return filePath;\n      });\n  };\n\n  static writeEventsFunctionsExtension = (\n    extension: gdEventsFunctionsExtension,\n    filepath: string\n  ): Promise<void> => {\n    const serializedObject = serializeToJSObject(extension);\n    return writeJSONFile(serializedObject, filepath).catch(err => {\n      console.error('Unable to write the events function extension:', err);\n      throw err;\n    });\n  };\n\n  static chooseCustomObjectFile = (objectName?: string): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = remote.getCurrentWindow();\n\n    return dialog\n      .showSaveDialog(browserWindow, {\n        title: 'Export an object of the project',\n        filters: [\n          {\n            name: 'GDevelop 5 object configuration',\n            extensions: ['gdo'],\n          },\n        ],\n        defaultPath: objectName || 'Object',\n      })\n      .then(({ filePath }) => {\n        if (!filePath) return null;\n        return filePath;\n      });\n  };\n\n  static writeCustomObject = (\n    customObject: gdObject,\n    filepath: string\n  ): Promise<void> => {\n    const exportedObject = customObject.clone().get();\n    exportedObject.setTags('');\n    exportedObject.getVariables().clear();\n    exportedObject.getEffects().clear();\n    exportedObject\n      .getAllBehaviorNames()\n      .toJSArray()\n      .forEach(name => exportedObject.removeBehavior(name));\n    const serializedObject = serializeToJSObject(exportedObject);\n    return writeJSONFile(serializedObject, filepath).catch(err => {\n      console.error('Unable to write the object:', err);\n      throw err;\n    });\n  };\n}\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst fs = optionalRequire('fs');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst readJSONFile = (filepath: string): Promise<Object> => {\n  if (!fs) return Promise.reject('Filesystem is not supported.');\n\n  return new Promise((resolve, reject) => {\n    fs.readFile(filepath, { encoding: 'utf8' }, (err, data) => {\n      if (err) return reject(err);\n\n      try {\n        const dataObject = JSON.parse(data);\n        return resolve(dataObject);\n      } catch (ex) {\n        return reject(filepath + ' is a corrupted/malformed file.');\n      }\n    });\n  });\n};\n\nexport default class LocalEventsFunctionsExtensionOpener {\n  static chooseEventsFunctionExtensionFile = (): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = remote.getCurrentWindow();\n\n    return dialog\n      .showOpenDialog(browserWindow, {\n        title: 'Import an extension in the project',\n        properties: ['openFile'],\n        message: 'Choose an extension file to import (.json file)',\n        filters: [\n          {\n            name: 'GDevelop 5 \"events based\" extension',\n            extensions: ['json'],\n          },\n        ],\n      })\n      .then(({ filePaths }) => {\n        if (!filePaths || !filePaths.length) return null;\n        return filePaths[0];\n      });\n  };\n\n  static readEventsFunctionExtensionFile = (\n    filepath: string\n  ): Promise<Object> => {\n    return readJSONFile(filepath);\n  };\n}\n","// @flow\n\nimport {\n  applyResourceDefaults,\n  getLocalResourceFullPath,\n  getResourceFilePathStatus,\n} from '../../ResourcesList/ResourceUtils';\nimport { mapVector } from '../../Utils/MapFor';\nimport newNameGenerator from '../../Utils/NewNameGenerator';\nimport optionalLazyRequire from '../../Utils/OptionalLazyRequire';\nimport optionalRequire from '../../Utils/OptionalRequire';\n\nconst gd: libGDevelop = global.gd;\n\nconst lazyRequireGlob = optionalLazyRequire('glob');\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\n\nexport const locateResourceFile = ({\n  project,\n  resource,\n}: {|\n  project: gdProject,\n  resource: gdResource,\n|}) => {\n  const resourceFilePath = getLocalResourceFullPath(\n    project,\n    resource.getName()\n  );\n\n  electron.shell.showItemInFolder(path.resolve(resourceFilePath));\n};\n\nexport const openResourceFile = ({\n  project,\n  resource,\n}: {|\n  project: gdProject,\n  resource: gdResource,\n|}) => {\n  const resourceFilePath = getLocalResourceFullPath(\n    project,\n    resource.getName()\n  );\n  electron.shell.openPath(path.resolve(resourceFilePath));\n};\n\nexport const copyResourceFilePath = ({\n  project,\n  resource,\n}: {|\n  project: gdProject,\n  resource: gdResource,\n|}) => {\n  const resourceFilePath = getLocalResourceFullPath(\n    project,\n    resource.getName()\n  );\n  electron.clipboard.writeText(path.resolve(resourceFilePath));\n};\n\nexport const scanForNewResources = async ({\n  project,\n  extensions,\n  createResource,\n}: {|\n  project: gdProject,\n  extensions: Array<string>,\n  createResource: () => gdResource,\n|}) => {\n  const glob = lazyRequireGlob();\n  if (!glob) return;\n\n  const resourcesManager = project.getResourcesManager();\n  const projectPath = path.dirname(project.getProjectFile());\n\n  const allExtensions = [\n    ...extensions,\n    ...extensions.map(extension => extension.toUpperCase()),\n  ];\n\n  try {\n    const allFiles = await new Promise((resolve, reject) => {\n      glob(\n        projectPath + '/**/*.{' + allExtensions.join(',') + '}',\n        (error, files) => {\n          if (error) reject(error);\n          else resolve(files);\n        }\n      );\n    });\n\n    const filesToCheck = new gd.VectorString();\n    allFiles.forEach(filePath =>\n      filesToCheck.push_back(path.relative(projectPath, filePath))\n    );\n    const filePathsNotInResources = project\n      .getResourcesManager()\n      .findFilesNotInResources(filesToCheck);\n    filesToCheck.delete();\n\n    mapVector(filePathsNotInResources, (relativeFilePath: string) => {\n      const resourceName = newNameGenerator(relativeFilePath, name =>\n        resourcesManager.hasResource(name)\n      );\n\n      const resource = createResource();\n      resource.setFile(relativeFilePath);\n      resource.setName(resourceName);\n      applyResourceDefaults(project, resource);\n      resourcesManager.addResource(resource);\n      resource.delete();\n\n      console.info(\n        `\"${relativeFilePath}\" added to project as resource named \"${resourceName}\".`\n      );\n    });\n  } catch (error) {\n    console.error(`Error finding files inside ${projectPath}:`, error);\n    return;\n  }\n};\n\nexport const removeAllResourcesWithInvalidPath = ({\n  project,\n}: {|\n  project: gdProject,\n|}) => {\n  const resourcesManager = project.getResourcesManager();\n  const removedResourceNames = resourcesManager\n    .getAllResourceNames()\n    .toJSArray()\n    .filter(resourceName => {\n      return getResourceFilePathStatus(project, resourceName) === 'error';\n    });\n\n  removedResourceNames.forEach(resourceName => {\n    resourcesManager.removeResource(resourceName);\n    console.info('Removed due to invalid path: ' + resourceName);\n  });\n};\n","// @flow\nimport * as React from 'react';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport PreferencesContext from '../MainFrame/Preferences/PreferencesContext';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\n/**\n * Set up some watchers for GDJS and Extensions sources.\n * Stop the watchers when the component is unmounted or `shouldWatch` prop is false.\n */\nexport const LocalGDJSDevelopmentWatcher = () => {\n  const preferences = React.useContext(PreferencesContext);\n  const shouldWatch = preferences.values.useGDJSDevelopmentWatcher;\n\n  React.useEffect(\n    () => {\n      if (!shouldWatch) {\n        // Nothing to set up in the effect if watch is deactivated.\n        return;\n      }\n\n      if (!ipcRenderer) {\n        console.error(\n          'Unable to find ipcRenderer to set up GDJS development watchers'\n        );\n        return;\n      }\n\n      ipcRenderer.send('setup-local-gdjs-development-watcher');\n      return () => {\n        ipcRenderer.send('close-local-gdjs-development-watcher');\n      };\n    },\n    [shouldWatch]\n  );\n\n  return null;\n};\n","// @flow\nimport {\n  type MoveAllProjectResourcesOptions,\n  type MoveAllProjectResourcesResult,\n  type MoveAllProjectResourcesFunction,\n} from './index';\nimport LocalFileStorageProvider from '../LocalFileStorageProvider';\nimport { moveUrlResourcesToLocalFiles } from '../LocalFileStorageProvider/LocalFileResourceMover';\nimport UrlStorageProvider from '../UrlStorageProvider';\nimport CloudStorageProvider from '../CloudStorageProvider';\nimport LocalFileSystem from '../../Export/LocalExporters/LocalFileSystem';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { moveAllCloudProjectResourcesToCloudProject } from '../CloudStorageProvider/CloudResourceMover';\nimport { checkIfIsGDevelopCloudBucketUrl } from '../../Utils/CrossOrigin';\nimport {\n  getCredentialsForCloudProject,\n  uploadProjectResourceFiles,\n  type UploadedProjectResourceFiles,\n} from '../../Utils/GDevelopServices/Project';\nimport { processByChunk } from '../../Utils/ProcessByChunk';\nimport { readLocalFileToFile } from '../../Utils/LocalFileUploader';\nimport { isURL, isBlobURL } from '../../ResourcesList/ResourceUtils';\nconst path = optionalRequire('path');\n\nconst gd: libGDevelop = global.gd;\n\nconst moveNothing = async () => {\n  return {\n    erroredResources: [],\n  };\n};\n\ntype ResourceAndFile = {|\n  resource: gdResource,\n  file: File,\n|};\n\nexport const moveAllLocalResourcesToCloudResources = async ({\n  project,\n  authenticatedUser,\n  oldFileMetadata,\n  newFileMetadata,\n  onProgress,\n}: MoveAllProjectResourcesOptions): Promise<MoveAllProjectResourcesResult> => {\n  const result: MoveAllProjectResourcesResult = {\n    erroredResources: [],\n  };\n\n  const newCloudProjectId = newFileMetadata.fileIdentifier;\n\n  const resourcesManager = project.getResourcesManager();\n\n  /**\n   * Find the local resources that must be\n   * uploaded into the new project.\n   */\n  const getResourcesToUpload = (project: gdProject): Array<gdResource> => {\n    const allResourceNames = resourcesManager.getAllResourceNames().toJSArray();\n    return allResourceNames\n      .map(\n        (resourceName: string): ?gdResource => {\n          const resource = resourcesManager.getResource(resourceName);\n          const resourceFile = resource.getFile();\n\n          if (isURL(resourceFile)) {\n            if (checkIfIsGDevelopCloudBucketUrl(resourceFile)) {\n              // URL from a cloud project: this is unlikely and would not work\n              // (as the project is a local project). Still, ignore this.\n              return null;\n            } else if (isBlobURL(resourceFile)) {\n              result.erroredResources.push({\n                resourceName: resource.getName(),\n                error: new Error('Unsupported blob URL.'),\n              });\n              return null;\n            } else {\n              // Public URL resource: nothing to do.\n              return null;\n            }\n          } else {\n            // Local resource to be downloaded.\n            return resource;\n          }\n        }\n      )\n      .filter(Boolean);\n  };\n\n  const allResourcesToUpload = getResourcesToUpload(project);\n\n  const projectPath = path.dirname(oldFileMetadata.fileIdentifier);\n\n  let alreadyDoneCount = 0;\n  // Read all files as Files.\n  await processByChunk(allResourcesToUpload, {\n    transformItem: async (resource): Promise<ResourceAndFile | null> => {\n      const resourceAbsolutePath = path.resolve(\n        projectPath,\n        resource.getFile()\n      );\n\n      try {\n        const file = await readLocalFileToFile(resourceAbsolutePath);\n        return {\n          resource,\n          file,\n        };\n      } catch (error) {\n        result.erroredResources.push({\n          resourceName: resource.getName(),\n          error: new Error(\n            `Unable to open the file (${resourceAbsolutePath}).`\n          ),\n        });\n        return null;\n      }\n    },\n    isChunkTooBig: (resourceAndFilesChunk: Array<ResourceAndFile | null>) => {\n      if (resourceAndFilesChunk.length > 70) return true;\n\n      const allBufferSize = resourceAndFilesChunk\n        .filter(Boolean)\n        .reduce((size, { file }) => size + file.size, 0);\n\n      // Stop a chunk when more than 150MB are read to be uploaded. This is\n      // to avoid loading all resources in memory at once. This don't give an exact\n      // guarantee on the upper bound (a single file could be more than 150MB), but\n      // this limits the risks of running out of memory.\n      return allBufferSize > 150 * 1000 * 1000;\n    },\n    processChunk: async (\n      resourceAndFilesChunk: Array<ResourceAndFile | null>\n    ) => {\n      const resourceAndFilesToUpload: ResourceAndFile[] = resourceAndFilesChunk.filter(\n        Boolean\n      );\n\n      // Upload the files just read, for the new project.\n      await getCredentialsForCloudProject(authenticatedUser, newCloudProjectId);\n      const uploadedProjectResourceFiles: UploadedProjectResourceFiles = await uploadProjectResourceFiles(\n        authenticatedUser,\n        newCloudProjectId,\n        resourceAndFilesToUpload.map(({ file }) => file),\n        (count, total) => {\n          onProgress(alreadyDoneCount + count, allResourcesToUpload.length);\n        }\n      );\n      alreadyDoneCount += resourceAndFilesChunk.length;\n\n      // Update resources with the newly created URLs.\n      uploadedProjectResourceFiles.forEach(({ url, error }, index) => {\n        const resource = resourceAndFilesToUpload[index].resource;\n        if (error || !url) {\n          result.erroredResources.push({\n            resourceName: resource.getName(),\n            error: error || new Error('Unknown error during upload.'),\n          });\n          return;\n        }\n\n        resource.setFile(url);\n      });\n    },\n  });\n\n  return result;\n};\n\nconst movers: {\n  [string]: MoveAllProjectResourcesFunction,\n} = {\n  [`${LocalFileStorageProvider.internalName}=>${\n    LocalFileStorageProvider.internalName\n  }`]: async ({ project, newFileMetadata }: MoveAllProjectResourcesOptions) => {\n    // TODO: Ideally, errors while copying resources should be reported.\n    // TODO: Report progress.\n    const projectPath = path.dirname(newFileMetadata.fileIdentifier);\n    const fileSystem = assignIn(\n      new gd.AbstractFileSystemJS(),\n      new LocalFileSystem()\n    );\n    gd.ProjectResourcesCopier.copyAllResourcesTo(\n      project,\n      // $FlowFixMe - fileSystem is a gdAbstractFileSystem, despite the assignIn.\n      fileSystem,\n      projectPath,\n      true, // Update the project with the new resource paths\n      false, // Don't move absolute files\n      true // Keep relative files folders structure.\n    );\n    return {\n      erroredResources: [],\n    };\n  },\n  // When saving a Cloud project locally, all resources are downloaded (including\n  // the ones on GDevelop Cloud).\n  [`${CloudStorageProvider.internalName}=>${\n    LocalFileStorageProvider.internalName\n  }`]: ({ project, newFileMetadata, onProgress }) =>\n    moveUrlResourcesToLocalFiles({\n      project,\n      fileMetadata: newFileMetadata,\n      onProgress,\n    }),\n  // On the desktop app, try to download all URLs into local files, put\n  // next to the project file (in a \"assets\" directory). This is helpful\n  // to continue working on a game started on the web-app (using public URLs\n  // for resources).\n  [`${UrlStorageProvider.internalName}=>${\n    LocalFileStorageProvider.internalName\n  }`]: ({ project, newFileMetadata, onProgress }) =>\n    moveUrlResourcesToLocalFiles({\n      project,\n      fileMetadata: newFileMetadata,\n      onProgress,\n    }),\n\n  // Moving to GDevelop \"Cloud\" storage:\n\n  // From a local project to a Cloud project, all resources are uploaded.\n  [`${LocalFileStorageProvider.internalName}=>${\n    CloudStorageProvider.internalName\n  }`]: moveAllLocalResourcesToCloudResources,\n  // From a Cloud project to another, resources need to be copied\n  // (unless they are public URLs).\n  [`${CloudStorageProvider.internalName}=>${\n    CloudStorageProvider.internalName\n  }`]: moveAllCloudProjectResourcesToCloudProject,\n  // Nothing to move around when going from a project on a public URL\n  // to a cloud project (we could offer an option one day though to download\n  // and upload the URL resources on GDevelop Cloud).\n  [`${UrlStorageProvider.internalName}=>${\n    CloudStorageProvider.internalName\n  }`]: moveNothing,\n};\n\nconst LocalResourceMover = {\n  moveAllProjectResources: async (\n    options: MoveAllProjectResourcesOptions\n  ): Promise<MoveAllProjectResourcesResult> => {\n    const { oldStorageProvider, newStorageProvider } = options;\n    const mover =\n      movers[\n        `${oldStorageProvider.internalName}=>${newStorageProvider.internalName}`\n      ];\n    if (!mover)\n      throw new Error(\n        `Can't find a ResourceMover for ${oldStorageProvider.internalName} to ${\n          newStorageProvider.internalName\n        }.`\n      );\n\n    return mover(options);\n  },\n};\n\nexport default LocalResourceMover;\n","// @flow\n\nexport const processByChunk = async <Item, MappedItem>(\n  array: Array<Item>,\n  {\n    transformItem,\n    isChunkTooBig,\n    processChunk,\n  }: {|\n    transformItem: Item => Promise<MappedItem>,\n    isChunkTooBig: (MappedItem[]) => boolean,\n    processChunk: (MappedItem[]) => Promise<void>,\n  |}\n): Promise<void> => {\n  let currentItemIndex = 0;\n  const nextChunk: Array<MappedItem> = [];\n\n  while (currentItemIndex < array.length) {\n    const mappedItem = await transformItem(array[currentItemIndex]);\n\n    if (!nextChunk.length) {\n      // Existing chunk is empty - let the new item be added to it.\n    } else {\n      if (!isChunkTooBig([...nextChunk, mappedItem])) {\n        // Item can be added to the existing chunk - let's add it.\n      } else {\n        // Item can't be added to the existing chunk - process the existing chunk\n        await processChunk(nextChunk);\n        nextChunk.length = 0;\n      }\n    }\n\n    nextChunk.push(mappedItem);\n    currentItemIndex++;\n  }\n\n  if (nextChunk.length) {\n    await processChunk(nextChunk);\n    nextChunk.length = 0;\n  }\n\n  return;\n};\n","// @flow\r\nimport optionalRequire from './OptionalRequire';\r\nconst path = optionalRequire('path');\r\nconst fs = optionalRequire('fs');\r\n\r\nconst readLocalFileToArrayBuffer = async (\r\n  filePath: string\r\n): Promise<ArrayBuffer> => {\r\n  const buffer: Buffer = await new Promise((resolve, reject) => {\r\n    fs.readFile(filePath, function(err, buffer) {\r\n      if (err) {\r\n        reject(err);\r\n        return;\r\n      }\r\n\r\n      resolve(buffer);\r\n    });\r\n  });\r\n\r\n  // See https://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer:\r\n  // The slice and offset stuff is required because small Buffers (less than 4 kB by default, half the pool size)\r\n  // can be views on a shared ArrayBuffer. Without slicing, you can end up with an ArrayBuffer containing data from another Buffer.\r\n  const arrayBuffer = buffer.buffer.slice(\r\n    buffer.byteOffset,\r\n    buffer.byteOffset + buffer.byteLength\r\n  );\r\n  return arrayBuffer;\r\n};\r\n\r\n// See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types.\r\nconst extensionToMimeType = {\r\n  // Common audio extensions:\r\n  aac: 'audio/aac',\r\n  wav: 'audio/wav',\r\n  mp3: 'audio/mp3',\r\n  ogg: 'audio/ogg',\r\n\r\n  // Common image extensions:\r\n  png: 'image/png',\r\n  jpg: 'image/jpeg',\r\n  jpeg: 'image/jpeg',\r\n  webp: 'image/webp',\r\n\r\n  // Common font extensions:\r\n  ttf: 'font/ttf',\r\n  otf: 'font/otf',\r\n\r\n  // Common video extensions:\r\n  mp4: 'video/mp4',\r\n  webm: 'video/webm',\r\n\r\n  // Other common extensions:\r\n  json: 'application/json',\r\n  xml: 'application/xml',\r\n  gz: 'application/gzip',\r\n  js: 'application/javascript',\r\n};\r\n\r\nexport const readLocalFileToFile = async (filePath: string): Promise<File> => {\r\n  const arrayBuffer = await readLocalFileToArrayBuffer(filePath);\r\n  const extensionWithoutLeadingDot = path.extname(filePath).replace(/^\\./, '');\r\n  return new File([arrayBuffer], path.basename(filePath), {\r\n    type:\r\n      extensionToMimeType[extensionWithoutLeadingDot] ||\r\n      'application/octet-stream',\r\n  });\r\n};\r\n","// @flow\nimport {\n  type ResourceFetcher,\n  type FetchAllProjectResourcesOptions,\n  type FetchAllProjectResourcesResult,\n  type FetchAllProjectResourcesFunction,\n} from './index';\nimport LocalFileStorageProvider from '../LocalFileStorageProvider';\nimport { moveUrlResourcesToLocalFiles } from '../LocalFileStorageProvider/LocalFileResourceMover';\nimport UrlStorageProvider from '../UrlStorageProvider';\nimport CloudStorageProvider from '../CloudStorageProvider';\nimport { fetchRelativeResourcesToFullUrls } from '../UrlStorageProvider/UrlResourceFetcher';\nimport { moveUrlResourcesToCloudFilesIfPrivate } from '../CloudStorageProvider/CloudResourceFetcher';\n\nconst fetchers: {\n  [string]: FetchAllProjectResourcesFunction,\n} = {\n  // The Cloud file storage provider fetches the resources that are\n  // private URLs by downloading them and reuploading them to the cloud.\n  [CloudStorageProvider.internalName]: moveUrlResourcesToCloudFilesIfPrivate,\n  // The local file storage provider fetches the resources that are URLs\n  // by downloading them locally.\n  [LocalFileStorageProvider.internalName]: moveUrlResourcesToLocalFiles,\n  // The URL storage consider relative resources to be relative to the project\n  // URL. This allows to open local projects uploaded to GitHub for example.\n  [UrlStorageProvider.internalName]: fetchRelativeResourcesToFullUrls,\n};\n\nconst LocalResourceFetcher: ResourceFetcher = {\n  fetchAllProjectResources: async (\n    options: FetchAllProjectResourcesOptions\n  ): Promise<FetchAllProjectResourcesResult> => {\n    const { storageProvider } = options;\n    const fetcher = fetchers[storageProvider.internalName];\n    if (!fetcher)\n      throw new Error(\n        `Can't find a ResourceFetcher for ${\n          storageProvider.internalName\n        } - have you registered the storage provider here?`\n      );\n\n    return fetcher(options);\n  },\n};\n\nexport default LocalResourceFetcher;\n",null,"// @flow\n\nimport * as React from 'react';\nimport QrCreator from 'qr-creator';\nimport GDevelopThemeContext from './Theme/GDevelopThemeContext';\n\ntype Props = {|\n  url: string,\n  size?: number,\n|};\n\nconst QrCode = ({ url, size = 128 }: Props) => {\n  const gdevelopTheme = React.useContext(GDevelopThemeContext);\n\n  const containerRef = React.useRef<?HTMLDivElement>(null);\n  React.useEffect(\n    () => {\n      const containerElement = containerRef.current;\n\n      if (!containerElement) return;\n\n      QrCreator.render(\n        {\n          text: url,\n          radius: 0,\n          // See https://www.qrcode.com/en/about/error_correction.html.\n          // The lower the level, the smaller the image. We don't need high level\n          // because it won't be damaged.\n          ecLevel: 'L',\n          fill: gdevelopTheme.palette.secondary,\n          background: null, // color or null for transparent\n          size, // in pixels\n        },\n        containerElement\n      );\n      return () => {\n        if (containerElement.firstChild) {\n          containerElement.removeChild(containerElement.firstChild);\n        }\n      };\n    },\n    [url, size, gdevelopTheme]\n  );\n  return <div ref={containerRef} />;\n};\n\nexport default QrCode;\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport * as React from 'react';\nimport Dialog from '../../../UI/Dialog';\nimport FlatButton from '../../../UI/FlatButton';\nimport Text from '../../../UI/Text';\nimport { Line } from '../../../UI/Grid';\nimport PlaceholderLoader from '../../../UI/PlaceholderLoader';\nimport ShareLink from '../../../UI/ShareDialog/ShareLink';\nimport QrCode from '../../../UI/QrCode';\n\ntype Props = {|\n  open: boolean,\n  /**\n   * url without protocol, for example '192.168.1.16:2929'\n   */\n  url: ?string,\n  onClose: () => void,\n  onExport: ?() => void,\n  onRunPreviewLocally: () => void,\n  error: ?any,\n|};\n\nconst LocalNetworkPreviewDialog = ({\n  url,\n  open,\n  error,\n  onExport,\n  onClose,\n  onRunPreviewLocally,\n}: Props) => {\n  if (!open) return null;\n  const urlWithProtocol = url ? `http://${url}` : '';\n\n  return (\n    <Dialog\n      title={<Trans>Preview</Trans>}\n      actions={[\n        <FlatButton\n          key=\"close\"\n          label={<Trans>Close</Trans>}\n          primary\n          onClick={onClose}\n        />,\n      ]}\n      secondaryActions={[\n        onExport && (\n          <FlatButton\n            key=\"export\"\n            label={<Trans>Export game</Trans>}\n            onClick={onExport}\n          />\n        ),\n        <FlatButton\n          key=\"run-preview-locally\"\n          label={<Trans>Run on this computer</Trans>}\n          onClick={onRunPreviewLocally}\n        />,\n      ]}\n      open={open}\n      onRequestClose={onClose}\n      maxWidth=\"sm\"\n    >\n      {error && (\n        <Line>\n          <Text>\n            <Trans>\n              Unable to start the server for the preview! Make sure that you are\n              authorized to run servers on this computer. Otherwise, use classic\n              preview to test your game.\n            </Trans>\n          </Text>\n        </Line>\n      )}\n      {!error && !url && <PlaceholderLoader />}\n      {!error && url && (\n        <div>\n          <Line>\n            <Text>\n              <Trans>\n                Your preview is ready! On your mobile or tablet, open your\n                browser and enter in the address bar:\n              </Trans>\n            </Text>\n          </Line>\n          <ShareLink url={url} />\n          {urlWithProtocol && (\n            <>\n              <Line>\n                <Text>\n                  <Trans>Or flash this QR code:</Trans>\n                </Text>\n              </Line>\n              <Line justifyContent=\"center\">\n                <QrCode url={urlWithProtocol} size={100} />\n              </Line>\n            </>\n          )}\n          <Line>\n            <Text>\n              <Trans>\n                Please note that your device should be connected on the same\n                network as this computer.\n              </Trans>\n            </Text>\n          </Line>\n        </div>\n      )}\n    </Dialog>\n  );\n};\n\nexport default LocalNetworkPreviewDialog;\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire';\nimport newNameGenerator from '../Utils/NewNameGenerator';\nimport { isPathInProjectFolder } from './ResourceUtils';\nimport { createNewResource } from './ResourceSource';\nconst fs = optionalRequire('fs');\nconst path = optionalRequire('path');\n\nexport type EmbeddedResource = {|\n  resourceKind: string,\n  resourceName?: string,\n\n  /** The \"path\" to the embedded resource (e.g: a tileset) as stored in the parent resource (e.g: a tilemap). */\n  relPath: string,\n\n  /** The full path to the file of the embedded resource. */\n  fullPath: string,\n\n  /** True if the embedded resource file is outside the project folder. */\n  isOutsideProjectFolder: boolean,\n|};\n\nexport type EmbeddedResources = {|\n  hasAnyEmbeddedResourceOutsideProjectFolder: boolean,\n  embeddedResources: Map<string, EmbeddedResource>,\n|};\n\nexport type MappedResources = {|\n  mapping: { [key: string]: string },\n|};\n\ntype ParseEmbeddedFiles = (\n  project: gdProject,\n  filePath: string\n) => Promise<?EmbeddedResources>;\n\n/**\n * Copy the embedded resources inside the project folder\n */\nexport async function copyAllEmbeddedResourcesToProjectFolder(\n  project: gdProject,\n  filesWithEmbeddedResources: Map<string, EmbeddedResources>\n) {\n  if (!fs || !path) {\n    return;\n  }\n\n  const projectPath = path.dirname(project.getProjectFile());\n  const copies = [];\n\n  for (const {\n    hasAnyEmbeddedResourceOutsideProjectFolder,\n    embeddedResources,\n  } of filesWithEmbeddedResources.values()) {\n    if (!hasAnyEmbeddedResourceOutsideProjectFolder) continue;\n\n    for (const embedded of embeddedResources.values()) {\n      if (!embedded.isOutsideProjectFolder) continue;\n\n      const resourceBasename = path.basename(embedded.fullPath);\n      const fileExtension = path.extname(resourceBasename);\n      const fileNameWithoutExtension = path.basename(\n        resourceBasename,\n        fileExtension\n      );\n\n      const newFileNameWithoutExtension = newNameGenerator(\n        fileNameWithoutExtension,\n        tentativeFileName => {\n          const tentativePath =\n            path.join(projectPath, tentativeFileName) + fileExtension;\n          return fs.existsSync(tentativePath);\n        }\n      );\n\n      const resourceNewPath = path.join(\n        projectPath,\n        newFileNameWithoutExtension + fileExtension\n      );\n\n      embedded.resourceName = newFileNameWithoutExtension + fileExtension;\n\n      copies.push(fs.promises.copyFile(embedded.fullPath, resourceNewPath));\n    }\n  }\n\n  return Promise.all(copies);\n}\n\n/**\n * Create the mapping between embedded resource path (e.g: path to a tileset) to its resource name (i.e: the name of\n * the resource containing the tileset).\n */\nexport function createAndMapEmbeddedResources(\n  project: gdProject,\n  filesWithEmbeddedResources: Map<string, EmbeddedResources>\n): Map<string, MappedResources> {\n  const projectPath = path.dirname(project.getProjectFile());\n\n  const filesWithMappedResources = new Map<string, MappedResources>();\n  for (const [filePath, { embeddedResources }] of filesWithEmbeddedResources) {\n    const mapping = {};\n    for (let {\n      resourceKind,\n      resourceName,\n      relPath,\n      fullPath,\n    } of embeddedResources.values()) {\n      if (!resourceName) {\n        resourceName = path.relative(projectPath, fullPath);\n      }\n\n      const theEmbeddedResource = createNewResource(resourceKind);\n      if (theEmbeddedResource) {\n        theEmbeddedResource.setName(resourceName);\n        theEmbeddedResource.setFile(resourceName);\n\n        mapping[relPath] = resourceName;\n\n        project.getResourcesManager().addResource(theEmbeddedResource);\n      }\n    }\n\n    filesWithMappedResources.set(filePath, {\n      mapping,\n    });\n  }\n\n  return filesWithMappedResources;\n}\n\n/**\n * List the embedded resources of a Tilemap (or JSON) resource.\n * Supports LDtk tilemaps.\n *\n * @param project The project\n * @param filePath The file path of a resource\n * @returns\n */\nexport async function listTileMapEmbeddedResources(\n  project: gdProject,\n  filePath: string\n): Promise<?EmbeddedResources> {\n  if (!fs || !path) {\n    return null;\n  }\n\n  const data = await fs.promises.readFile(filePath, 'utf8');\n  try {\n    const tileMap = JSON.parse(data);\n\n    // For LDtk tilemaps, read the tilesets.\n    if (tileMap && tileMap.__header__ && tileMap.__header__.app === 'LDtk') {\n      const dir = path.dirname(filePath);\n      const embeddedResources = new Map<string, EmbeddedResource>();\n      let hasAnyEmbeddedResourceOutsideProjectFolder = false;\n\n      for (const tileset of tileMap.defs.tilesets) {\n        if (tileset.relPath) {\n          const relPath = tileset.relPath;\n          const fullPath = path.resolve(dir, relPath);\n          const isOutsideProjectFolder = !isPathInProjectFolder(\n            project,\n            fullPath\n          );\n          const resource: EmbeddedResource = {\n            resourceKind: 'image',\n            relPath,\n            fullPath,\n            isOutsideProjectFolder,\n          };\n\n          embeddedResources.set(relPath, resource);\n\n          if (isOutsideProjectFolder)\n            hasAnyEmbeddedResourceOutsideProjectFolder = true;\n        }\n      }\n\n      for (const level of tileMap.levels) {\n        if (level.bgRelPath) {\n          const relPath = level.bgRelPath;\n          const fullPath = path.resolve(dir, relPath);\n          const isOutsideProjectFolder = !isPathInProjectFolder(\n            project,\n            fullPath\n          );\n          const resource: EmbeddedResource = {\n            resourceKind: 'image',\n            relPath,\n            fullPath,\n            isOutsideProjectFolder,\n          };\n\n          embeddedResources.set(level.bgRelPath, resource);\n\n          if (isOutsideProjectFolder)\n            hasAnyEmbeddedResourceOutsideProjectFolder = true;\n        }\n      }\n\n      return {\n        hasAnyEmbeddedResourceOutsideProjectFolder,\n        embeddedResources,\n      };\n    }\n  } catch (error) {\n    console.error(\n      `Unable to read properly the data from file ${filePath} for use as a tilemap - ignoring any potentially embedded resources.`\n    );\n    return null;\n  }\n}\n\nexport const embeddedResourcesParsers: { [string]: ParseEmbeddedFiles } = {\n  tilemap: listTileMapEmbeddedResources,\n  json: listTileMapEmbeddedResources,\n};\n","// @flow\nimport { t, Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport {\n  type ChooseResourceOptions,\n  type ChooseResourceProps,\n  type ResourceSourceComponentProps,\n  type ResourceSource,\n  allResourceKindsAndMetadata,\n} from './ResourceSource';\nimport { ResourceStore } from '../AssetStore/ResourceStore';\nimport { isPathInProjectFolder, copyAllToProjectFolder } from './ResourceUtils';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport Window from '../Utils/Window';\nimport {\n  copyAllEmbeddedResourcesToProjectFolder,\n  embeddedResourcesParsers,\n  createAndMapEmbeddedResources,\n  type EmbeddedResources,\n  type MappedResources,\n} from './LocalEmbeddedResourceSources';\nimport { Line } from '../UI/Grid';\nimport RaisedButton from '../UI/RaisedButton';\nimport { FileToCloudProjectResourceUploader } from './FileToCloudProjectResourceUploader';\n\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\nconst path = optionalRequire('path');\n\ntype ResourceStoreChooserProps = {\n  options: ChooseResourceOptions,\n  onChooseResources: (resources: Array<gdResource>) => void,\n  createNewResource: () => gdResource,\n};\n\nconst ResourceStoreChooser = ({\n  options,\n  onChooseResources,\n  createNewResource,\n}: ResourceStoreChooserProps) => {\n  return (\n    <ResourceStore\n      onChoose={resource => {\n        const chosenResourceUrl = resource.url;\n        const newResource = createNewResource();\n        newResource.setFile(chosenResourceUrl);\n        newResource.setName(path.basename(chosenResourceUrl));\n        newResource.setOrigin('gdevelop-asset-store', chosenResourceUrl);\n\n        onChooseResources([newResource]);\n      }}\n      resourceKind={options.resourceKind}\n    />\n  );\n};\n\nconst localResourceSources: Array<ResourceSource> = [\n  // Have the local resource sources first, so they are used by default/shown first when\n  // the project is saved locally.\n  ...allResourceKindsAndMetadata.map(\n    ({ kind, displayName, fileExtensions, createNewResource }) => {\n      const selectLocalFileResources = async ({\n        i18n,\n        getLastUsedPath,\n        setLastUsedPath,\n        project,\n        options,\n      }: ChooseResourceProps) => {\n        if (!dialog)\n          throw new Error('Electron dialog not supported in this environment.');\n\n        const properties = ['openFile'];\n        if (options.multiSelection) properties.push('multiSelections');\n\n        const projectPath = path.dirname(project.getProjectFile());\n        const latestPath = getLastUsedPath(project, kind) || projectPath;\n\n        const browserWindow = remote.getCurrentWindow();\n        let { filePaths } = await dialog.showOpenDialog(browserWindow, {\n          title: i18n._(t`Choose a file`),\n          properties,\n          filters: [\n            { name: i18n._(t`Supported files`), extensions: fileExtensions },\n          ],\n          defaultPath: latestPath,\n        });\n        if (!filePaths || !filePaths.length) return [];\n\n        const lastUsedPath = path.parse(filePaths[0]).dir;\n        setLastUsedPath(project, kind, lastUsedPath);\n\n        let hasFilesOutsideProjectFolder = filePaths.some(\n          path => !isPathInProjectFolder(project, path)\n        );\n\n        // Some resources, like tilemaps, can have references to other files.\n        // We parse these files, optionally copy them, then create a mapping from the previous file name\n        // as written inside the tilemap to the name of the resource that is representing this file.\n        const filesWithEmbeddedResources = new Map<string, EmbeddedResources>();\n        const parseEmbeddedResources = embeddedResourcesParsers[kind];\n        if (parseEmbeddedResources) {\n          for (const filePath of filePaths) {\n            const embeddedResources = await parseEmbeddedResources(\n              project,\n              filePath\n            );\n\n            if (embeddedResources) {\n              filesWithEmbeddedResources.set(filePath, embeddedResources);\n\n              if (embeddedResources.hasAnyEmbeddedResourceOutsideProjectFolder)\n                hasFilesOutsideProjectFolder = true;\n            }\n          }\n        }\n\n        // Check if files should be copied in the project folder.\n        const newToOldFilePaths = new Map<string, string>();\n        let filesWithMappedResources = new Map<string, MappedResources>();\n        if (hasFilesOutsideProjectFolder) {\n          const answer = Window.showConfirmDialog(\n            i18n._(\n              t`This/these file(s) are outside the project folder. Would you like to make a copy of them in your project folder first (recommended)?`\n            )\n          );\n\n          if (answer) {\n            filePaths = await copyAllToProjectFolder(\n              project,\n              filePaths,\n              newToOldFilePaths\n            );\n\n            await copyAllEmbeddedResourcesToProjectFolder(\n              project,\n              filesWithEmbeddedResources\n            );\n          }\n        }\n\n        // In case of resources embedded inside others,\n        // create a mapping from the file name\n        // as written inside the resource (e.g: the tilemap)\n        // to the name of the resource that was created to\n        // represent this file.\n        filesWithMappedResources = createAndMapEmbeddedResources(\n          project,\n          filesWithEmbeddedResources\n        );\n\n        return filePaths.map(filePath => {\n          const newResource = createNewResource();\n          newResource.setFile(path.relative(projectPath, filePath));\n          newResource.setName(path.relative(projectPath, filePath));\n\n          const filePathWithMapping = newToOldFilePaths.has(filePath)\n            ? newToOldFilePaths.get(filePath)\n            : filePath;\n          if (filePathWithMapping) {\n            const mappedResources = filesWithMappedResources.get(\n              filePathWithMapping\n            );\n\n            if (mappedResources && mappedResources.mapping) {\n              newResource.setMetadata(\n                JSON.stringify({\n                  embeddedResourcesMapping: mappedResources.mapping,\n                })\n              );\n            }\n          }\n\n          return newResource;\n        });\n      };\n\n      return {\n        name: 'local-file-opener-' + kind,\n        displayName: t`Choose a file`,\n        displayTab: 'import',\n        onlyForStorageProvider: 'LocalFile',\n        kind,\n        selectResourcesHeadless: selectLocalFileResources,\n        renderComponent: (props: ResourceSourceComponentProps) => (\n          <Line justifyContent=\"center\">\n            <RaisedButton\n              primary\n              label={\n                props.options.multiSelection ? (\n                  <Trans>Choose one or more files</Trans>\n                ) : (\n                  <Trans>Choose a file</Trans>\n                )\n              }\n              onClick={async () => {\n                const resources = await selectLocalFileResources({\n                  i18n: props.i18n,\n                  project: props.project,\n                  fileMetadata: props.fileMetadata,\n                  getStorageProvider: props.getStorageProvider,\n                  getLastUsedPath: props.getLastUsedPath,\n                  setLastUsedPath: props.setLastUsedPath,\n                  options: props.options,\n                });\n\n                props.onChooseResources(resources);\n              }}\n            />\n          </Line>\n        ),\n      };\n    }\n  ),\n  ...allResourceKindsAndMetadata.map(({ kind, createNewResource }) => ({\n    name: `upload-${kind}`,\n    displayName: t`File(s) from your device`,\n    displayTab: 'import',\n    onlyForStorageProvider: 'Cloud',\n    kind,\n    renderComponent: (props: ResourceSourceComponentProps) => (\n      <FileToCloudProjectResourceUploader\n        createNewResource={createNewResource}\n        onChooseResources={props.onChooseResources}\n        options={props.options}\n        fileMetadata={props.fileMetadata}\n        getStorageProvider={props.getStorageProvider}\n        key={`url-chooser-${kind}`}\n        automaticallyOpenInput={!!props.automaticallyOpenIfPossible}\n      />\n    ),\n  })),\n  ...allResourceKindsAndMetadata.map(({ kind, createNewResource }) => ({\n    name: `resource-store-${kind}`,\n    displayName: t`Choose from asset store`,\n    displayTab: 'standalone',\n    kind,\n    renderComponent: (props: ResourceSourceComponentProps) => (\n      <ResourceStoreChooser\n        createNewResource={createNewResource}\n        onChooseResources={props.onChooseResources}\n        options={props.options}\n        key={`resource-store-${kind}`}\n      />\n    ),\n  })),\n];\n\nexport default localResourceSources;\n","// @flow\nimport React from 'react';\nimport MainFrame from './MainFrame';\nimport Window from './Utils/Window';\nimport ExportDialog from './Export/ExportDialog';\nimport Authentication from './Utils/GDevelopServices/Authentication';\nimport './UI/icomoon-font.css'; // Styles for Icomoon font.\n\n// Import for Electron powered IDE.\nimport localResourceSources from './ResourcesList/LocalResourceSources';\nimport localResourceExternalEditors from './ResourcesList/LocalResourceExternalEditors';\nimport LocalPreviewLauncher from './Export/LocalExporters/LocalPreviewLauncher';\nimport {\n  localAutomatedExporters,\n  localManualExporters,\n  localOnlineWebExporter,\n} from './Export/LocalExporters';\nimport ElectronMainMenu from './MainFrame/ElectronMainMenu';\nimport makeExtensionsLoader from './JsExtensionsLoader/LocalJsExtensionsLoader';\nimport { makeLocalEventsFunctionCodeWriter } from './EventsFunctionsExtensionsLoader/CodeWriters/LocalEventsFunctionCodeWriter';\nimport ObjectsEditorService from './ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from './ObjectsRendering/ObjectsRenderingService';\nimport Providers from './MainFrame/Providers';\nimport LocalEventsFunctionsExtensionWriter from './EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionWriter';\nimport LocalEventsFunctionsExtensionOpener from './EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionOpener';\nimport ProjectStorageProviders from './ProjectsStorage/ProjectStorageProviders';\nimport LocalFileStorageProvider from './ProjectsStorage/LocalFileStorageProvider';\nimport { LocalGDJSDevelopmentWatcher } from './GameEngineFinder/LocalGDJSDevelopmentWatcher';\nimport CloudStorageProvider from './ProjectsStorage/CloudStorageProvider';\nimport UrlStorageProvider from './ProjectsStorage/UrlStorageProvider';\nimport LocalResourceMover from './ProjectsStorage/ResourceMover/LocalResourceMover';\nimport LocalResourceFetcher from './ProjectsStorage/ResourceFetcher/LocalResourceFetcher';\n\nconst gd: libGDevelop = global.gd;\n\nexport const create = (authentication: Authentication) => {\n  Window.setUpContextMenu();\n\n  const appArguments = Window.getArguments();\n  const isDev = Window.isDev();\n\n  return (\n    <Providers\n      authentication={authentication}\n      disableCheckForUpdates={!!appArguments['disable-update-check']}\n      makeEventsFunctionCodeWriter={makeLocalEventsFunctionCodeWriter}\n      eventsFunctionsExtensionWriter={LocalEventsFunctionsExtensionWriter}\n      eventsFunctionsExtensionOpener={LocalEventsFunctionsExtensionOpener}\n    >\n      {({ i18n }) => (\n        <ProjectStorageProviders\n          appArguments={appArguments}\n          storageProviders={[\n            LocalFileStorageProvider,\n            UrlStorageProvider,\n            CloudStorageProvider,\n          ]}\n          defaultStorageProvider={LocalFileStorageProvider}\n        >\n          {({\n            getStorageProviderOperations,\n            getStorageProviderResourceOperations,\n            storageProviders,\n            initialFileMetadataToOpen,\n            getStorageProvider,\n          }) => (\n            <MainFrame\n              i18n={i18n}\n              renderMainMenu={(props, callbacks, extraCallbacks) => (\n                <ElectronMainMenu\n                  props={props}\n                  callbacks={callbacks}\n                  extraCallbacks={extraCallbacks}\n                />\n              )}\n              renderPreviewLauncher={(props, ref) => (\n                <LocalPreviewLauncher {...props} ref={ref} />\n              )}\n              renderExportDialog={props => (\n                <ExportDialog\n                  project={props.project}\n                  onSaveProject={props.onSaveProject}\n                  onChangeSubscription={props.onChangeSubscription}\n                  onClose={props.onClose}\n                  automatedExporters={localAutomatedExporters}\n                  manualExporters={localManualExporters}\n                  onlineWebExporter={localOnlineWebExporter}\n                />\n              )}\n              renderGDJSDevelopmentWatcher={\n                isDev ? () => <LocalGDJSDevelopmentWatcher /> : null\n              }\n              storageProviders={storageProviders}\n              resourceMover={LocalResourceMover}\n              resourceFetcher={LocalResourceFetcher}\n              getStorageProviderOperations={getStorageProviderOperations}\n              getStorageProviderResourceOperations={\n                getStorageProviderResourceOperations\n              }\n              getStorageProvider={getStorageProvider}\n              resourceSources={localResourceSources}\n              resourceExternalEditors={localResourceExternalEditors}\n              extensionsLoader={makeExtensionsLoader({\n                gd,\n                objectsEditorService: ObjectsEditorService,\n                objectsRenderingService: ObjectsRenderingService,\n                filterExamples: !isDev,\n              })}\n              initialFileMetadataToOpen={initialFileMetadataToOpen}\n            />\n          )}\n        </ProjectStorageProviders>\n      )}\n    </Providers>\n  );\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { getUID } from '../../Utils/LocalUserInfo';\nimport { isURL } from '../../ResourcesList/ResourceUtils';\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\n\nconst gd: libGDevelop = global.gd;\n\nexport type UrlFileDescriptor = {|\n  filePath: string,\n  url: string,\n|};\n\n// For some reason, `path.posix` is undefined when packaged\n// with webpack, so we're using `path` directly. As it's for the web-app,\n// it should always be the posix version. In tests on Windows,\n// it's necessary to use path.posix.\n// Search for \"pathPosix\" in the codebase for other places where this is used.\nconst pathPosix = path.posix || path;\n\n/**\n * Gives access to the local filesystem, but returns paths\n * that are using \"/\" as a path separator, even on Windows\n * (so that in exported games, paths are slashs, which is\n * supported everywhere).\n */\nclass LocalFileSystem {\n  /**\n   * True if URLs should be downloaded (useful for an export, but not for a preview).\n   * @private\n   */\n  _downloadUrlsToLocalFiles: boolean;\n\n  /**\n   * Store all the files that should be downloaded (filepath => url)\n   * @private\n   */\n  _filesToDownload: { [string]: string } = {};\n\n  constructor(\n    options: ?{|\n      downloadUrlsToLocalFiles: boolean,\n    |}\n  ) {\n    this._downloadUrlsToLocalFiles =\n      !!options && options.downloadUrlsToLocalFiles;\n  }\n\n  /**\n   * Returns all the files that should be downloaded from a URL, with the specified destination path prefix.\n   */\n  getAllUrlFilesIn = (pathPrefix: string): Array<UrlFileDescriptor> => {\n    // Ensure the path prefix we're searching the files in is normalized,\n    // because everything that we stored was normalized. If we don't do this,\n    // we risk missing files on Windows (as pathPrefix can contain backslashes).\n    const normalizedPathPrefix = pathPosix\n      .normalize(pathPrefix)\n      .replace(/\\\\/g, '/');\n\n    return Object.keys(this._filesToDownload)\n      .filter(filePath => filePath.indexOf(normalizedPathPrefix) === 0)\n      .map(filePath => ({\n        filePath,\n        url: this._filesToDownload[filePath],\n      }));\n  };\n\n  mkDir = (path: string) => {\n    if (isURL(path)) {\n      // URLs are always assumed to exist.\n      return;\n    }\n\n    try {\n      fs.mkdirsSync(path);\n    } catch (e) {\n      console.error('mkDir(' + path + ') failed: ' + e);\n      return false;\n    }\n    return true;\n  };\n  dirExists = (path: string) => {\n    if (isURL(path)) {\n      // URLs are always assumed to exist.\n      return true;\n    }\n\n    return fs.existsSync(path);\n  };\n  clearDir = (path: string) => {\n    try {\n      fs.emptyDirSync(path);\n    } catch (e) {\n      console.error('clearDir(' + path + ') failed: ' + e);\n    }\n  };\n  getTempDir = () => {\n    return path.join(os.tmpdir(), `GDTMP-${getUID()}`);\n  };\n  fileNameFrom = (fullPath: string) => {\n    // If URLs are not downloaded, then filenames are not changed.\n    if (!this._downloadUrlsToLocalFiles && isURL(fullPath)) return fullPath;\n\n    return path.basename(fullPath);\n  };\n  dirNameFrom = (fullPath: string) => {\n    return path.dirname(fullPath).replace(/\\\\/g, '/');\n  };\n  makeAbsolute = (filename: string, baseDirectory: string) => {\n    if (isURL(filename)) return filename;\n\n    if (!this.isAbsolute(baseDirectory))\n      baseDirectory = path.resolve(baseDirectory);\n\n    return path\n      .resolve(baseDirectory, path.normalize(filename))\n      .replace(/\\\\/g, '/');\n  };\n  makeRelative = (filename: string, baseDirectory: string) => {\n    if (isURL(filename)) return filename;\n\n    return path\n      .relative(baseDirectory, path.normalize(filename))\n      .replace(/\\\\/g, '/');\n  };\n  isAbsolute = (fullPath: string) => {\n    if (isURL(fullPath)) return true;\n\n    if (fullPath.length === 0) return true;\n    return (\n      (fullPath.length > 0 && fullPath.charAt(0) === '/') ||\n      (fullPath.length > 1 && fullPath.charAt(1) === ':')\n    );\n  };\n  copyFile = (source: string, dest: string) => {\n    if (isURL(source)) {\n      // If URLs are not downloaded, then there is nothing to copy.\n      if (!this._downloadUrlsToLocalFiles) return true;\n\n      if (isURL(dest)) {\n        console.error(\n          `Destination can't be a URL in copyFile (from ${source} to ${dest}).`\n        );\n        return false;\n      }\n\n      this._filesToDownload[pathPosix.normalize(dest)] = source;\n      return true;\n    }\n\n    try {\n      if (source !== dest) fs.copySync(source, dest);\n    } catch (e) {\n      console.error('copyFile(' + source + ', ' + dest + ') failed: ' + e);\n      return false;\n    }\n    return true;\n  };\n  writeToFile = (file: string, contents: string) => {\n    try {\n      fs.outputFileSync(file, contents);\n    } catch (e) {\n      console.error('writeToFile(' + file + ', ...) failed: ' + e);\n      return false;\n    }\n    return true;\n  };\n  readFile = (file: string) => {\n    try {\n      var contents = fs.readFileSync(file);\n      return contents.toString();\n    } catch (e) {\n      console.error('readFile(' + file + ') failed: ' + e);\n      return '';\n    }\n  };\n  readDir = (path: string, ext: string) => {\n    ext = ext.toUpperCase();\n    var output = new gd.VectorString();\n    try {\n      var files = [];\n      if (fs.existsSync(path)) {\n        files = fs.readdirSync(path);\n        files.forEach(function(file) {\n          if (\n            ext.length === 0 ||\n            file.toUpperCase().indexOf(ext, file.length - ext.length) !== -1\n          ) {\n            output.push_back(path + '/' + file);\n          }\n        });\n      }\n    } catch (e) {\n      console.error('readDir(' + path + ',' + ext + ') failed: ' + e);\n    }\n\n    return output;\n  };\n  fileExists = (filePath: string) => {\n    // Check if a file WILL exists once downloaded.\n    const normalizedFilePath = pathPosix.normalize(filePath);\n    const shouldTheFileBeDownloaded = !!this._filesToDownload[\n      normalizedFilePath\n    ];\n    if (shouldTheFileBeDownloaded) {\n      return true;\n    }\n\n    // Check if a local file exists.\n    try {\n      const stat = fs.statSync(filePath);\n      return stat.isFile();\n    } catch (e) {\n      return false;\n    }\n  };\n}\n\nexport default LocalFileSystem;\n","// @flow\n\nimport optionalRequire from './OptionalRequire';\nimport optionalLazyRequire from '../Utils/OptionalLazyRequire';\nconst fs = optionalRequire('fs');\nconst lazyRequireArchiver = optionalLazyRequire('archiver');\n\n// TODO: Move in a Archiver folder?\n/**\n * Archive the given folder to a file. Only available when running on Electron runtime.\n */\nexport const archiveLocalFolder = ({\n  path,\n  outputFilename,\n  sizeLimit,\n}: {|\n  path: string,\n  outputFilename: string,\n  sizeLimit?: number,\n|}): Promise<string> => {\n  const archiver = lazyRequireArchiver();\n  return new Promise((resolve, reject) => {\n    if (!fs || !archiver) return reject(new Error('Archiver unavailable'));\n\n    const output = fs.createWriteStream(outputFilename);\n    const archive = archiver('zip', {\n      zlib: { level: 9 }, // Sets the compression level.\n    });\n\n    output.on('close', () => {\n      const fileSize = archive.pointer();\n      console.log(\n        `Archive written at ${outputFilename}, ${fileSize} total bytes.`\n      );\n      if (sizeLimit && fileSize > sizeLimit) {\n        const roundFileSizeInMb = Math.round(fileSize / (1000 * 1000));\n        reject(\n          new Error(\n            `Archive is of size ${roundFileSizeInMb} MB, which is above the limit allowed of ${sizeLimit /\n              (1000 * 1000)} MB.`\n          )\n        );\n      }\n      resolve(outputFilename);\n    });\n\n    archive.on('error', err => {\n      reject(err);\n    });\n\n    archive.pipe(output);\n\n    archive.directory(path, false);\n\n    archive.finalize();\n  });\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\ntype UploadOptions = {\n  signedUrl: string,\n  contentType: string,\n};\n\nexport const uploadLocalFile = (\n  localFilePath: string,\n  uploadOptions: UploadOptions,\n  onProgress: (progress: number, total: number) => void\n): Promise<void> => {\n  if (!ipcRenderer) return Promise.reject('No support for local file upload');\n\n  ipcRenderer.removeAllListeners('local-file-upload-progress');\n  ipcRenderer.removeAllListeners('local-file-upload-done');\n\n  return new Promise((resolve, reject) => {\n    ipcRenderer.on(\n      'local-file-upload-progress',\n      (event, stepCurrentProgress, stepMaxProgress) => {\n        onProgress(stepCurrentProgress, stepMaxProgress);\n      }\n    );\n    ipcRenderer.on('local-file-upload-done', (event, err) => {\n      if (err) return reject(err);\n      resolve();\n    });\n    ipcRenderer.send('local-file-upload', localFilePath, uploadOptions);\n  });\n};\n","// @flow\n// TODO: This module could be published on npm if useful.\nimport newNameGenerator from './NewNameGenerator';\nimport slugs from 'slugs';\n\ntype PartialObjectDescription = {|\n  reference: string,\n  object: Object,\n|};\n\ntype Reference = {\n  referenceTo: string,\n};\n\ntype SplitConfiguration = {|\n  pathSeparator: string,\n  getArrayItemReferenceName: (\n    object: Object,\n    currentReference: string\n  ) => string,\n  shouldSplit: (path: string) => boolean,\n  isReferenceMagicPropertyName: string,\n|};\n\ntype UnsplitConfiguration = {|\n  isReferenceMagicPropertyName: string,\n  getReferencePartialObject: (referencePath: string) => Promise<Object>,\n  maxUnsplitDepth?: number,\n|};\n\n/**\n * Mutate the given object to split it into multiple partial objects.\n * Partial objects will be replaced by references.\n *\n * @param object The object to be split.\n * @param configuration Configuration to be used to split the object.\n */\nexport const split = (\n  object: Object,\n  {\n    pathSeparator,\n    getArrayItemReferenceName,\n    shouldSplit,\n    isReferenceMagicPropertyName,\n  }: SplitConfiguration\n): Array<PartialObjectDescription> => {\n  const partialObjects = [];\n  const createReference = (reference, object): Reference => {\n    partialObjects.push({\n      reference,\n      object,\n    });\n\n    return {\n      [isReferenceMagicPropertyName]: true,\n      referenceTo: reference,\n    };\n  };\n\n  const splitObject = (\n    currentObject: Object,\n    currentPath: string,\n    currentReference: string\n  ) => {\n    if (currentObject !== null && typeof currentObject === 'object') {\n      if (Array.isArray(currentObject)) {\n        for (let index in currentObject) {\n          const itemPath = currentPath + pathSeparator + '*';\n          if (shouldSplit(itemPath)) {\n            const partialObject = currentObject[index];\n            const name = getArrayItemReferenceName(\n              partialObject,\n              currentReference\n            );\n            const itemReference = currentReference + pathSeparator + name;\n\n            currentObject[index] = createReference(\n              itemReference,\n              partialObject\n            );\n\n            splitObject(partialObject, itemPath, itemReference);\n          } else {\n            const itemReference = currentReference + pathSeparator + index;\n\n            splitObject(currentObject[index], itemPath, itemReference);\n          }\n        }\n      } else {\n        for (let propertyName in currentObject) {\n          const propertyPath = currentPath + pathSeparator + propertyName;\n          const propertyReference =\n            currentReference + pathSeparator + propertyName;\n          if (shouldSplit(propertyPath)) {\n            const partialObject = currentObject[propertyName];\n\n            currentObject[propertyName] = createReference(\n              propertyReference,\n              partialObject\n            );\n\n            splitObject(partialObject, propertyPath, propertyReference);\n          } else {\n            splitObject(\n              currentObject[propertyName],\n              propertyPath,\n              propertyReference\n            );\n          }\n        }\n      }\n    }\n  };\n\n  splitObject(object, '', '');\n  return partialObjects;\n};\n\n/**\n * Mutate the given object to recompose it from partial objects.\n * References to partial objects will be fetched as needed.\n *\n * @param object The object to be unsplit.\n * @param configuration Configuration to be used to unsplit the object.\n */\nexport const unsplit = (\n  object: Object,\n  {\n    isReferenceMagicPropertyName,\n    getReferencePartialObject,\n    maxUnsplitDepth,\n  }: UnsplitConfiguration\n): Promise<void> => {\n  const isReference = (object: Object): ?Reference => {\n    if (object[isReferenceMagicPropertyName] === true) {\n      return object;\n    }\n\n    return null;\n  };\n\n  const unsplitObject = (\n    currentObject: Object,\n    depth: number\n  ): Promise<void> => {\n    if (maxUnsplitDepth !== undefined && depth >= maxUnsplitDepth) {\n      return Promise.resolve();\n    }\n\n    if (currentObject !== null && typeof currentObject === 'object') {\n      const keys = Object.keys(currentObject);\n      if (keys) {\n        return Promise.all(\n          keys.map(indexOrPropertyName => {\n            const reference = isReference(currentObject[indexOrPropertyName]);\n            if (reference) {\n              return getReferencePartialObject(reference.referenceTo).then(\n                partialObject => {\n                  currentObject[indexOrPropertyName] = partialObject;\n\n                  return unsplitObject(\n                    currentObject[indexOrPropertyName],\n                    depth + 1\n                  );\n                }\n              );\n            }\n\n            return unsplitObject(currentObject[indexOrPropertyName], depth + 1);\n          })\n        ).then(() => {});\n      }\n    }\n\n    return Promise.resolve();\n  };\n\n  return unsplitObject(object, 0);\n};\n\n/**\n * A helper that can be used to split according to a list of hardcoded paths\n */\nexport const splitPaths = (paths: Set<string>) => {\n  return (path: string) => paths.has(path);\n};\n\n/**\n * A helper that can be used to get the name of items in array using an hardcoded property name.\n */\nexport const getNameFromProperty = (propertyName: string) => {\n  return (object: Object): string => {\n    const property = object[propertyName];\n    if (typeof property !== 'string') {\n      throw new Error(`Property ${propertyName} is not a string`);\n    }\n\n    return property;\n  };\n};\n\n/**\n * A helper that can be used to get the name of items in array using an hardcoded property name.\n */\nexport const getSlugifiedUniqueNameFromProperty = (propertyName: string) => {\n  const existingNamesForReference = {};\n\n  return (object: Object, currentReference: string): string => {\n    const property = object[propertyName];\n    if (typeof property !== 'string') {\n      throw new Error(`Property ${propertyName} is not a string`);\n    }\n\n    existingNamesForReference[currentReference] =\n      existingNamesForReference[currentReference] || {};\n    const newName = newNameGenerator(\n      slugs(property),\n      name => !!existingNamesForReference[currentReference][name]\n    );\n    existingNamesForReference[currentReference][newName] = true;\n    return newName;\n  };\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { type FileMetadata } from '../index';\nimport { unsplit } from '../../Utils/ObjectSplitter';\nconst fs = optionalRequire('fs');\nconst path = optionalRequire('path');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst readJSONFile = (filepath: string): Promise<Object> => {\n  if (!fs) return Promise.reject('Filesystem is not supported.');\n\n  return new Promise((resolve, reject) => {\n    fs.readFile(filepath, { encoding: 'utf8' }, (err, data) => {\n      if (err) return reject(err);\n\n      try {\n        const dataObject = JSON.parse(data);\n        return resolve(dataObject);\n      } catch (ex) {\n        return reject(filepath + ' is a corrupted/malformed file.');\n      }\n    });\n  });\n};\n\nexport const onOpenWithPicker = (): Promise<?FileMetadata> => {\n  if (!dialog) return Promise.reject('Not supported');\n  const browserWindow = remote.getCurrentWindow();\n\n  return dialog\n    .showOpenDialog(browserWindow, {\n      title: 'Open a project',\n      properties: ['openFile'],\n      message:\n        'If you want to open your GDevelop 4 project, be sure to save it as a .json file',\n      filters: [{ name: 'GDevelop 5 project', extensions: ['json'] }],\n    })\n    .then(({ filePaths }) => {\n      if (!filePaths || !filePaths.length) return null;\n      return { fileIdentifier: filePaths[0] };\n    });\n};\n\nexport const onOpen = (\n  fileMetadata: FileMetadata\n): Promise<{|\n  content: Object,\n|}> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const projectPath = path.dirname(filePath);\n  return readJSONFile(filePath).then(object => {\n    return unsplit(object, {\n      getReferencePartialObject: referencePath => {\n        return readJSONFile(path.join(projectPath, referencePath) + '.json');\n      },\n      isReferenceMagicPropertyName: '__REFERENCE_TO_SPLIT_OBJECT',\n      // Limit unsplitting to depth 3 (which would allow properties of layouts/external layouts/external events\n      // to be un-splitted, but not the content of these properties), to avoid very slow processing\n      // of large game files.\n      maxUnsplitDepth: 3,\n    }).then(() => {\n      return { content: object };\n    });\n  });\n};\n\nexport const hasAutoSave = async (\n  fileMetadata: FileMetadata,\n  compareLastModified: boolean\n): Promise<boolean> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const autoSavePath = filePath + '.autosave';\n  if (fs.existsSync(autoSavePath)) {\n    if (!compareLastModified) {\n      return true;\n    }\n    try {\n      const autoSavedTime = fs.statSync(autoSavePath).mtime.getTime();\n      const saveTime = fs.statSync(filePath).mtime.getTime();\n      // When comparing the last modified time, add a 5 seconds margin to avoid\n      // showing the warning if the user has just saved the project, or if the\n      // project has been decompressed from a zip file, causing the last modified\n      // time to be the time of decompression.\n      if (autoSavedTime > saveTime + 5000) {\n        return true;\n      }\n    } catch (err) {\n      console.error('Unable to compare *.autosave to project', err);\n      return false;\n    }\n    return false;\n  }\n  return false;\n};\n\nexport const onGetAutoSave = (fileMetadata: FileMetadata) => {\n  return Promise.resolve({\n    ...fileMetadata,\n    fileIdentifier: fileMetadata.fileIdentifier + '.autosave',\n  });\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { serializeToJSObject, serializeToJSON } from '../../Utils/Serializer';\nimport { type FileMetadata, type SaveAsLocation } from '../index';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  split,\n  splitPaths,\n  getSlugifiedUniqueNameFromProperty,\n} from '../../Utils/ObjectSplitter';\nimport type { MessageDescriptor } from '../../Utils/i18n/MessageDescriptor.flow';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\n\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst checkFileContent = (filePath: string, expectedContent: string) => {\n  const time = performance.now();\n  return new Promise((resolve, reject) => {\n    fs.readFile(filePath, { encoding: 'utf8' }, (err, content) => {\n      if (err) return reject(err);\n\n      if (content === '') {\n        reject(new Error(`Written file is empty, did the write fail?`));\n      }\n      if (content !== expectedContent) {\n        reject(\n          new Error(\n            `Written file is not containing the expected content, did the write fail?`\n          )\n        );\n      }\n      const verificationTime = performance.now() - time;\n      console.info(\n        `Verified ${filePath} content in ${verificationTime.toFixed()}ms.`\n      );\n      resolve();\n    });\n  });\n};\n\nexport const writeAndCheckFile = async (\n  content: string,\n  filePath: string\n): Promise<void> => {\n  if (!fs) throw new Error('Filesystem is not supported.');\n  if (content === '')\n    throw new Error('The content to save on disk is empty. Aborting.');\n\n  await fs.ensureDir(path.dirname(filePath));\n\n  await fs.writeFile(filePath, content);\n  await checkFileContent(filePath, content);\n};\n\nconst writeAndCheckFormattedJSONFile = async (\n  object: Object,\n  filePath: string\n): Promise<void> => {\n  const content = JSON.stringify(object, null, 2);\n  await writeAndCheckFile(content, filePath);\n};\n\nconst writeProjectFiles = (\n  project: gdProject,\n  filePath: string,\n  projectPath: string\n): Promise<void> => {\n  const serializedProjectObject = serializeToJSObject(project);\n  if (project.isFolderProject()) {\n    const partialObjects = split(serializedProjectObject, {\n      pathSeparator: '/',\n      getArrayItemReferenceName: getSlugifiedUniqueNameFromProperty('name'),\n      shouldSplit: splitPaths(\n        new Set([\n          '/layouts/*',\n          '/externalLayouts/*',\n          '/externalEvents/*',\n          '/layouts/*',\n          '/eventsFunctionsExtensions/*',\n        ])\n      ),\n      isReferenceMagicPropertyName: '__REFERENCE_TO_SPLIT_OBJECT',\n    });\n\n    return Promise.all(\n      partialObjects.map(partialObject => {\n        return writeAndCheckFormattedJSONFile(\n          partialObject.object,\n          path.join(projectPath, partialObject.reference) + '.json'\n        ).catch(err => {\n          console.error('Unable to write a partial file:', err);\n          throw err;\n        });\n      })\n    ).then(() => {\n      return writeAndCheckFormattedJSONFile(\n        serializedProjectObject,\n        filePath\n      ).catch(err => {\n        console.error('Unable to write the split project:', err);\n        throw err;\n      });\n    });\n  } else {\n    return writeAndCheckFormattedJSONFile(\n      serializedProjectObject,\n      filePath\n    ).catch(err => {\n      console.error('Unable to write the project:', err);\n      throw err;\n    });\n  }\n};\n\nexport const onSaveProject = (\n  project: gdProject,\n  fileMetadata: FileMetadata\n): Promise<{|\n  wasSaved: boolean,\n  fileMetadata: FileMetadata,\n|}> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const now = Date.now();\n  if (!filePath) {\n    return Promise.reject(\n      'Project file is empty, \"Save as\" should have been called?'\n    );\n  }\n  // Ensure we always pick the latest name and gameId.\n  const newFileMetadata = {\n    ...fileMetadata,\n    name: project.getName(),\n    gameId: project.getProjectUuid(),\n    lastModifiedDate: now,\n  };\n\n  const projectPath = path.dirname(filePath);\n  return writeProjectFiles(project, filePath, projectPath).then(() => {\n    return { wasSaved: true, fileMetadata: newFileMetadata }; // Save was properly done\n  });\n};\n\nexport const onChooseSaveProjectAsLocation = async ({\n  project,\n  fileMetadata,\n}: {|\n  project: gdProject,\n  fileMetadata: ?FileMetadata, // This is the current location.\n|}): Promise<{|\n  saveAsLocation: ?SaveAsLocation, // This is the newly chosen location (or null if cancelled).\n|}> => {\n  const defaultPath = fileMetadata ? fileMetadata.fileIdentifier : '';\n  const browserWindow = remote.getCurrentWindow();\n  const saveDialogOptions = {\n    defaultPath,\n    filters: [{ name: 'GDevelop 5 project', extensions: ['json'] }],\n  };\n\n  if (!dialog) {\n    throw new Error('Unsupported');\n  }\n  const filePath = dialog.showSaveDialogSync(browserWindow, saveDialogOptions);\n  if (!filePath) {\n    return { saveAsLocation: null };\n  }\n\n  return {\n    saveAsLocation: {\n      fileIdentifier: filePath,\n    },\n  };\n};\n\nexport const onSaveProjectAs = async (\n  project: gdProject,\n  saveAsLocation: ?SaveAsLocation,\n  options: {|\n    onStartSaving: () => void,\n    onMoveResources: ({|\n      newFileMetadata: FileMetadata,\n    |}) => Promise<void>,\n  |}\n): Promise<{|\n  wasSaved: boolean,\n  fileMetadata: ?FileMetadata,\n|}> => {\n  if (!saveAsLocation)\n    throw new Error('A location was not chosen before saving as.');\n  const filePath = saveAsLocation.fileIdentifier;\n  if (!filePath)\n    throw new Error('A file path was not chosen before saving as.');\n\n  options.onStartSaving();\n  // Ensure we always pick the latest name and gameId.\n  const newFileMetadata = {\n    fileIdentifier: filePath,\n    name: project.getName(),\n    gameId: project.getProjectUuid(),\n    lastModifiedDate: Date.now(),\n  };\n\n  // Move (copy or download, etc...) the resources first.\n  await options.onMoveResources({ newFileMetadata });\n\n  // Save the project when resources have been copied.\n  const projectPath = path.dirname(filePath);\n  project.setProjectFile(filePath);\n\n  await writeProjectFiles(project, filePath, projectPath);\n  return {\n    wasSaved: true,\n    fileMetadata: newFileMetadata,\n  };\n};\n\nexport const onAutoSaveProject = (\n  project: gdProject,\n  fileMetadata: FileMetadata\n): Promise<void> => {\n  const autoSavePath = fileMetadata.fileIdentifier + '.autosave';\n  return writeAndCheckFile(serializeToJSON(project), autoSavePath).catch(\n    err => {\n      console.error(`Unable to write ${autoSavePath}:`, err);\n      throw err;\n    }\n  );\n};\n\nexport const getWriteErrorMessage = (error: Error): MessageDescriptor =>\n  t`An error occurred when saving the project. Please try again by choosing another location.`;\n\n// See https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file\nconst forbiddenCharacterRegex = /\\\\ | \\/ | : | \\* | \\? | \" | < | > | \\|/g;\nconst consecutiveSpacesRegex = /\\s+/g;\nconst cleanUpProjectFileName = (projectFileName: string) =>\n  (projectFileName.length > 200\n    ? projectFileName.substring(0, 200)\n    : projectFileName\n  )\n    .replace(forbiddenCharacterRegex, ' ')\n    .replace(consecutiveSpacesRegex, ' ')\n    .trim();\n\nexport const onRenderNewProjectSaveAsLocationChooser = ({\n  projectName,\n  saveAsLocation,\n  setSaveAsLocation,\n  newProjectsDefaultFolder,\n}: {\n  projectName: string,\n  saveAsLocation: ?SaveAsLocation,\n  setSaveAsLocation: (?SaveAsLocation) => void,\n  newProjectsDefaultFolder?: string,\n}) => {\n  const outputPath = saveAsLocation\n    ? path.dirname(saveAsLocation.fileIdentifier)\n    : newProjectsDefaultFolder\n    ? newProjectsDefaultFolder\n    : '';\n  const projectFileName = projectName\n    ? cleanUpProjectFileName(projectName) + '.json'\n    : 'game.json';\n  if (!saveAsLocation) {\n    setSaveAsLocation({\n      fileIdentifier: path.join(outputPath, projectFileName),\n    });\n  }\n\n  return (\n    <LocalFolderPicker\n      fullWidth\n      value={outputPath}\n      onChange={newOutputPath =>\n        setSaveAsLocation({\n          fileIdentifier: path.join(newOutputPath, projectFileName),\n        })\n      }\n      type=\"create-game\"\n    />\n  );\n};\n","import React from 'react';\nimport SvgIcon from '@material-ui/core/SvgIcon';\n\nexport default React.memo(props => (\n  <SvgIcon {...props} viewBox=\"0 0 16 16\" style={{ fill: 'none' }}>\n    <path\n      d=\"M5.75 11.25C5.75 11.25 6 14.25 4 15.25H12C10 14.25 10.25 11.25 10.25 11.25M5.75 11.25H13.25C14.3546 11.25 15.25 10.3546 15.25 9.25V2.75C15.25 1.64543 14.3546 0.75 13.25 0.75H2.75C1.64543 0.75 0.75 1.64543 0.75 2.75V9.25C0.75 10.3546 1.64543 11.25 2.75 11.25H5.75Z\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.5\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </SvgIcon>\n));\n","// @flow\nimport * as React from 'react';\nimport { Trans, t } from '@lingui/macro';\nimport { type StorageProvider } from '../index';\nimport {\n  onOpenWithPicker,\n  onOpen,\n  hasAutoSave,\n  onGetAutoSave,\n} from './LocalProjectOpener';\nimport {\n  onSaveProject,\n  onChooseSaveProjectAsLocation,\n  onSaveProjectAs,\n  onAutoSaveProject,\n  getWriteErrorMessage,\n  onRenderNewProjectSaveAsLocationChooser,\n} from './LocalProjectWriter';\nimport {\n  type AppArguments,\n  POSITIONAL_ARGUMENTS_KEY,\n} from '../../Utils/Window';\nimport { type MessageDescriptor } from '../../Utils/i18n/MessageDescriptor.flow';\nimport Computer from '../../UI/CustomSvgIcons/Computer';\nimport {\n  copyResourceFilePath,\n  locateResourceFile,\n  openResourceFile,\n  removeAllResourcesWithInvalidPath,\n  scanForNewResources,\n} from './LocalProjectResourcesHandler';\nimport { allResourceKindsAndMetadata } from '../../ResourcesList/ResourceSource';\n\n/**\n * Use the Electron APIs to provide access to the native\n * file system (with native save/open dialogs).\n */\nexport default ({\n  internalName: 'LocalFile',\n  name: t`Your computer`,\n  renderIcon: props => <Computer fontSize={props.size} />,\n  getFileMetadataFromAppArguments: (appArguments: AppArguments) => {\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY]) return null;\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY].length) return null;\n\n    return {\n      fileIdentifier: appArguments[POSITIONAL_ARGUMENTS_KEY][0],\n    };\n  },\n  onRenderNewProjectSaveAsLocationChooser: onRenderNewProjectSaveAsLocationChooser,\n  createOperations: () => ({\n    onOpenWithPicker,\n    onOpen,\n    hasAutoSave,\n    onSaveProject,\n    onChooseSaveProjectAsLocation,\n    onSaveProjectAs,\n    onAutoSaveProject,\n    onGetAutoSave,\n    getOpenErrorMessage: (error: Error): MessageDescriptor => {\n      return t`Check that the file exists, that this file is a proper game created with GDevelop and that you have the authorization to open it.`;\n    },\n    getWriteErrorMessage,\n  }),\n  createResourceOperations: () => ({\n    project,\n    resource,\n    i18n,\n    updateInterface,\n    cleanUserSelectionOfResources,\n    informUser,\n  }) => [\n    {\n      label: i18n._(t`Locate file`),\n      click: () => locateResourceFile({ project, resource }),\n    },\n    {\n      label: i18n._(t`Open file`),\n      click: () => openResourceFile({ project, resource }),\n    },\n    {\n      label: i18n._(t`Copy file path`),\n      click: () => {\n        copyResourceFilePath({ project, resource });\n        informUser({\n          message: <Trans>Resource file path copied to clipboard</Trans>,\n        });\n      },\n    },\n    { type: 'separator' },\n    {\n      label: i18n._(t`Scan in the project folder for...`),\n      submenu: allResourceKindsAndMetadata.map(\n        ({ displayName, fileExtensions, createNewResource }) => ({\n          label: i18n._(displayName),\n          click: async () => {\n            await scanForNewResources({\n              project,\n              extensions: fileExtensions,\n              createResource: createNewResource,\n            });\n            updateInterface();\n          },\n        })\n      ),\n    },\n    {\n      label: i18n._(t`Remove resources with invalid path`),\n      click: () => {\n        removeAllResourcesWithInvalidPath({ project });\n        // Remove user selection in case the user selected a resource\n        // that was just removed.\n        cleanUserSelectionOfResources();\n        // Force update of the resources list as otherwise it could render\n        // resources that were just deleted.\n        updateInterface();\n      },\n    },\n  ],\n}: StorageProvider);\n"],"sourceRoot":""}